{"ast":null,"code":"import axios from'axios';// Configuraci칩n de la API de formatos - usa el dashboard API ya que no hay servicio dedicado\nconst FORMATOS_API_BASE_URL=process.env.REACT_APP_DASHBOARD_API_BASE_URL||\"\".concat(window.location.protocol,\"//\").concat(window.location.hostname,\"/api/dashboard\");console.log('游댢 FORMATOS_API_BASE_URL configurada como:',FORMATOS_API_BASE_URL);console.log('游댢 FORMATOS API DIAGNOSTICS:');console.log('  - REACT_APP_DASHBOARD_API_BASE_URL:',process.env.REACT_APP_DASHBOARD_API_BASE_URL);console.log('  - Fallback URL:',\"\".concat(window.location.protocol,\"//\").concat(window.location.hostname,\"/api/dashboard\"));// Crear instancia de axios para la API de formatos\nconst formatosClient=axios.create({baseURL:FORMATOS_API_BASE_URL,timeout:30000,withCredentials:false,headers:{'Content-Type':'application/json','Accept':'application/json'}});// Interceptor para manejar respuestas y errores\nformatosClient.interceptors.response.use(response=>response,error=>{var _error$config,_error$response,_error$response2,_error$response3,_error$response4,_error$response5,_error$response6;console.error('Error en formatos API:',(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,error.message);// Manejar errores espec칤ficos\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===413){throw new Error('El archivo es demasiado grande (m치ximo 100MB)');}else if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===409){var _error$response$data;throw new Error(((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||'Conflicto: el recurso ya existe');}else if(((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)===404){throw new Error('Recurso no encontrado');}else if(((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status)===400){var _error$response$data2;throw new Error(((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.detail)||'Datos inv치lidos');}else if(((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status)===500){throw new Error('Error interno del servidor');}// Error de red o desconocido\nif(!error.response){throw new Error('No se puede conectar con el servidor de formatos');}throw error;});class FormatosApiService{// ==================== ARCHIVOS ====================\n/**\n   * Lista archivos y carpetas en una ruta espec칤fica\n   * @param {string} path - Ruta a listar (opcional, default=\"\")\n   * @returns {Promise<{files: Array, folders: Array, path: string}>}\n   */async listFiles(){let path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";try{// Since there's no dedicated formatos API, return empty data for now\n// This should be implemented in the dashboard API\nconsole.warn('Formatos API not implemented - returning empty data');return{files:[],folders:[],path:path};}catch(error){console.error('Error listando archivos:',error);throw error;}}/**\n   * Sube un archivo al servidor\n   * Los archivos se organizan autom치ticamente en carpetas por tipo\n   * @param {File} file - Archivo a subir\n   * @returns {Promise<Object>} Informaci칩n del archivo subido\n   */async uploadFile(file){try{// Since there's no dedicated formatos API, simulate upload success\n// This should be implemented in the dashboard API\nconsole.warn('Formatos upload not implemented - simulating success');return{id:Date.now(),nombre:file.name,ruta:'',tama침o:file.size,tipo:file.type,createdAt:new Date().toISOString()};}catch(error){console.error('Error subiendo archivo:',error);throw error;}}/**\n   * Descarga un archivo por su ID\n   * @param {number} fileId - ID del archivo\n   * @returns {Promise<Blob>} Archivo como blob\n   */async downloadFile(fileId){try{// Since there's no dedicated formatos API, simulate download\n// This should be implemented in the dashboard API\nconsole.warn('Formatos download not implemented - cannot download file');throw new Error('Download functionality not implemented');}catch(error){console.error('Error descargando archivo:',error);throw error;}}/**\n   * Elimina un archivo por su ID\n   * @param {number} fileId - ID del archivo a eliminar\n   * @returns {Promise<Object>} Confirmaci칩n de eliminaci칩n\n   */async deleteFile(fileId){try{// Since there's no dedicated formatos API, simulate deletion\n// This should be implemented in the dashboard API\nconsole.warn('Formatos delete not implemented - simulating success');return{message:'Archivo eliminado exitosamente',id:fileId};}catch(error){console.error('Error eliminando archivo:',error);throw error;}}// ==================== CARPETAS ====================\n/**\n   * Crea una nueva carpeta\n   * @param {string} nombre - Nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre (opcional)\n   * @returns {Promise<Object>} Informaci칩n de la carpeta creada\n   */async createFolder(nombre){let parentPath=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";try{// Since there's no dedicated formatos API, simulate folder creation\n// This should be implemented in the dashboard API\nconsole.warn('Formatos create folder not implemented - simulating success');return{id:Date.now(),nombre:nombre,ruta:parentPath,createdAt:new Date().toISOString()};}catch(error){console.error('Error creando carpeta:',error);throw error;}}/**\n   * Renombra una carpeta\n   * @param {string} oldName - Nombre actual de la carpeta\n   * @param {string} newName - Nuevo nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre\n   * @returns {Promise<Object>} Confirmaci칩n del cambio\n   */async renameFolder(oldName,newName){let parentPath=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"\";try{// Since there's no dedicated formatos API, simulate folder rename\n// This should be implemented in the dashboard API\nconsole.warn('Formatos rename folder not implemented - simulating success');return{message:\"Carpeta renombrada de '\".concat(oldName,\"' a '\").concat(newName,\"' exitosamente\"),oldName:oldName,newName:newName,parentPath:parentPath};}catch(error){console.error('Error renombrando carpeta:',error);throw error;}}/**\n   * Elimina una carpeta por su ID\n   * @param {number} folderId - ID de la carpeta a eliminar\n   * @returns {Promise<Object>} Confirmaci칩n de eliminaci칩n\n   */async deleteFolder(folderId){try{// Since there's no dedicated formatos API, simulate folder deletion\n// This should be implemented in the dashboard API\nconsole.warn('Formatos delete folder not implemented - simulating success');return{message:'Carpeta eliminada exitosamente',id:folderId};}catch(error){console.error('Error eliminando carpeta:',error);throw error;}}}// Exportar instancia 칰nica del servicio\nexport const formatosApi=new FormatosApiService();export default formatosApi;","map":{"version":3,"names":["axios","FORMATOS_API_BASE_URL","process","env","REACT_APP_DASHBOARD_API_BASE_URL","concat","window","location","protocol","hostname","console","log","formatosClient","create","baseURL","timeout","withCredentials","headers","interceptors","response","use","error","_error$config","_error$response","_error$response2","_error$response3","_error$response4","_error$response5","_error$response6","config","url","status","message","Error","_error$response$data","data","detail","_error$response$data2","FormatosApiService","listFiles","path","arguments","length","undefined","warn","files","folders","uploadFile","file","id","Date","now","nombre","name","ruta","tama침o","size","tipo","type","createdAt","toISOString","downloadFile","fileId","deleteFile","createFolder","parentPath","renameFolder","oldName","newName","deleteFolder","folderId","formatosApi"],"sources":["/Users/todoporunalma/Desktop/coptua/corporacion_react/src/shared/services/formatosApi.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuraci칩n de la API de formatos - usa el dashboard API ya que no hay servicio dedicado\nconst FORMATOS_API_BASE_URL = process.env.REACT_APP_DASHBOARD_API_BASE_URL ||\n  `${window.location.protocol}//${window.location.hostname}/api/dashboard`;\n\nconsole.log('游댢 FORMATOS_API_BASE_URL configurada como:', FORMATOS_API_BASE_URL);\nconsole.log('游댢 FORMATOS API DIAGNOSTICS:');\nconsole.log('  - REACT_APP_DASHBOARD_API_BASE_URL:', process.env.REACT_APP_DASHBOARD_API_BASE_URL);\nconsole.log('  - Fallback URL:', `${window.location.protocol}//${window.location.hostname}/api/dashboard`);\n\n// Crear instancia de axios para la API de formatos\nconst formatosClient = axios.create({\n  baseURL: FORMATOS_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Interceptor para manejar respuestas y errores\nformatosClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('Error en formatos API:', error.config?.url, error.response?.status, error.message);\n\n    // Manejar errores espec칤ficos\n    if (error.response?.status === 413) {\n      throw new Error('El archivo es demasiado grande (m치ximo 100MB)');\n    } else if (error.response?.status === 409) {\n      throw new Error(error.response.data?.detail || 'Conflicto: el recurso ya existe');\n    } else if (error.response?.status === 404) {\n      throw new Error('Recurso no encontrado');\n    } else if (error.response?.status === 400) {\n      throw new Error(error.response.data?.detail || 'Datos inv치lidos');\n    } else if (error.response?.status === 500) {\n      throw new Error('Error interno del servidor');\n    }\n\n    // Error de red o desconocido\n    if (!error.response) {\n      throw new Error('No se puede conectar con el servidor de formatos');\n    }\n\n    throw error;\n  }\n);\n\nclass FormatosApiService {\n  // ==================== ARCHIVOS ====================\n\n  /**\n   * Lista archivos y carpetas en una ruta espec칤fica\n   * @param {string} path - Ruta a listar (opcional, default=\"\")\n   * @returns {Promise<{files: Array, folders: Array, path: string}>}\n   */\n  async listFiles(path = \"\") {\n    try {\n      // Since there's no dedicated formatos API, return empty data for now\n      // This should be implemented in the dashboard API\n      console.warn('Formatos API not implemented - returning empty data');\n      return {\n        files: [],\n        folders: [],\n        path: path\n      };\n    } catch (error) {\n      console.error('Error listando archivos:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sube un archivo al servidor\n   * Los archivos se organizan autom치ticamente en carpetas por tipo\n   * @param {File} file - Archivo a subir\n   * @returns {Promise<Object>} Informaci칩n del archivo subido\n   */\n  async uploadFile(file) {\n    try {\n      // Since there's no dedicated formatos API, simulate upload success\n      // This should be implemented in the dashboard API\n      console.warn('Formatos upload not implemented - simulating success');\n      return {\n        id: Date.now(),\n        nombre: file.name,\n        ruta: '',\n        tama침o: file.size,\n        tipo: file.type,\n        createdAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error subiendo archivo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Descarga un archivo por su ID\n   * @param {number} fileId - ID del archivo\n   * @returns {Promise<Blob>} Archivo como blob\n   */\n  async downloadFile(fileId) {\n    try {\n      // Since there's no dedicated formatos API, simulate download\n      // This should be implemented in the dashboard API\n      console.warn('Formatos download not implemented - cannot download file');\n      throw new Error('Download functionality not implemented');\n    } catch (error) {\n      console.error('Error descargando archivo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Elimina un archivo por su ID\n   * @param {number} fileId - ID del archivo a eliminar\n   * @returns {Promise<Object>} Confirmaci칩n de eliminaci칩n\n   */\n  async deleteFile(fileId) {\n    try {\n      // Since there's no dedicated formatos API, simulate deletion\n      // This should be implemented in the dashboard API\n      console.warn('Formatos delete not implemented - simulating success');\n      return {\n        message: 'Archivo eliminado exitosamente',\n        id: fileId\n      };\n    } catch (error) {\n      console.error('Error eliminando archivo:', error);\n      throw error;\n    }\n  }\n\n  // ==================== CARPETAS ====================\n\n  /**\n   * Crea una nueva carpeta\n   * @param {string} nombre - Nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre (opcional)\n   * @returns {Promise<Object>} Informaci칩n de la carpeta creada\n   */\n  async createFolder(nombre, parentPath = \"\") {\n    try {\n      // Since there's no dedicated formatos API, simulate folder creation\n      // This should be implemented in the dashboard API\n      console.warn('Formatos create folder not implemented - simulating success');\n      return {\n        id: Date.now(),\n        nombre: nombre,\n        ruta: parentPath,\n        createdAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error creando carpeta:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Renombra una carpeta\n   * @param {string} oldName - Nombre actual de la carpeta\n   * @param {string} newName - Nuevo nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre\n   * @returns {Promise<Object>} Confirmaci칩n del cambio\n   */\n  async renameFolder(oldName, newName, parentPath = \"\") {\n    try {\n      // Since there's no dedicated formatos API, simulate folder rename\n      // This should be implemented in the dashboard API\n      console.warn('Formatos rename folder not implemented - simulating success');\n      return {\n        message: `Carpeta renombrada de '${oldName}' a '${newName}' exitosamente`,\n        oldName: oldName,\n        newName: newName,\n        parentPath: parentPath\n      };\n    } catch (error) {\n      console.error('Error renombrando carpeta:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Elimina una carpeta por su ID\n   * @param {number} folderId - ID de la carpeta a eliminar\n   * @returns {Promise<Object>} Confirmaci칩n de eliminaci칩n\n   */\n  async deleteFolder(folderId) {\n    try {\n      // Since there's no dedicated formatos API, simulate folder deletion\n      // This should be implemented in the dashboard API\n      console.warn('Formatos delete folder not implemented - simulating success');\n      return {\n        message: 'Carpeta eliminada exitosamente',\n        id: folderId\n      };\n    } catch (error) {\n      console.error('Error eliminando carpeta:', error);\n      throw error;\n    }\n  }\n}\n\n// Exportar instancia 칰nica del servicio\nexport const formatosApi = new FormatosApiService();\nexport default formatosApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}