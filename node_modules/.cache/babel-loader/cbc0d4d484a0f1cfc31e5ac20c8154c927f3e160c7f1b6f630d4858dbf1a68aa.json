{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\n\n/**\n * Hook for managing global performance monitoring state\n * Provides toggle functionality and persistence via localStorage\n */\nconst usePerformanceMonitoring = () => {\n  _s();\n  const [isEnabled, setIsEnabled] = useState(() => {\n    if (process.env.NODE_ENV !== 'development') return false;\n\n    // Check environment variable first\n    if (process.env.REACT_APP_PERFORMANCE_MONITORING === 'true') return true;\n\n    // Check localStorage\n    return localStorage.getItem('enablePerformanceMonitoring') === 'true';\n  });\n  const [overlayVisible, setOverlayVisible] = useState(() => {\n    if (process.env.NODE_ENV !== 'development') return false;\n    return localStorage.getItem('performanceOverlayVisible') === 'true';\n  });\n\n  // Persist settings to localStorage\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      localStorage.setItem('enablePerformanceMonitoring', isEnabled.toString());\n    }\n  }, [isEnabled]);\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      localStorage.setItem('performanceOverlayVisible', overlayVisible.toString());\n    }\n  }, [overlayVisible]);\n  const toggleMonitoring = useCallback(() => {\n    setIsEnabled(prev => !prev);\n  }, []);\n  const toggleOverlay = useCallback(() => {\n    setOverlayVisible(prev => !prev);\n  }, []);\n  const enableMonitoring = useCallback(() => {\n    setIsEnabled(true);\n  }, []);\n  const disableMonitoring = useCallback(() => {\n    setIsEnabled(false);\n  }, []);\n  const showOverlay = useCallback(() => {\n    setOverlayVisible(true);\n  }, []);\n  const hideOverlay = useCallback(() => {\n    setOverlayVisible(false);\n  }, []);\n\n  // Global keyboard shortcuts\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'development') return;\n    const handleKeyPress = e => {\n      // Ctrl/Cmd + Shift + M to toggle monitoring\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'M') {\n        e.preventDefault();\n        toggleMonitoring();\n        console.log(`Performance monitoring ${!isEnabled ? 'enabled' : 'disabled'}`);\n      }\n\n      // Ctrl/Cmd + Shift + O to toggle overlay\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'O') {\n        e.preventDefault();\n        toggleOverlay();\n        console.log(`Performance overlay ${!overlayVisible ? 'shown' : 'hidden'}`);\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isEnabled, overlayVisible, toggleMonitoring, toggleOverlay]);\n\n  // Console commands for debugging\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      // Make functions available globally for console debugging\n      window.performanceMonitoring = {\n        toggle: toggleMonitoring,\n        enable: enableMonitoring,\n        disable: disableMonitoring,\n        showOverlay,\n        hideOverlay,\n        isEnabled,\n        overlayVisible\n      };\n    }\n    return () => {\n      if (window.performanceMonitoring) {\n        delete window.performanceMonitoring;\n      }\n    };\n  }, [toggleMonitoring, enableMonitoring, disableMonitoring, showOverlay, hideOverlay, isEnabled, overlayVisible]);\n  return {\n    isEnabled,\n    overlayVisible,\n    toggleMonitoring,\n    toggleOverlay,\n    enableMonitoring,\n    disableMonitoring,\n    showOverlay,\n    hideOverlay\n  };\n};\n_s(usePerformanceMonitoring, \"2TNRqDgjTorVSZU8pwFYGGlh6a8=\");\nexport default usePerformanceMonitoring;","map":{"version":3,"names":["useState","useEffect","useCallback","usePerformanceMonitoring","_s","isEnabled","setIsEnabled","process","env","NODE_ENV","REACT_APP_PERFORMANCE_MONITORING","localStorage","getItem","overlayVisible","setOverlayVisible","setItem","toString","toggleMonitoring","prev","toggleOverlay","enableMonitoring","disableMonitoring","showOverlay","hideOverlay","handleKeyPress","e","ctrlKey","metaKey","shiftKey","key","preventDefault","console","log","window","addEventListener","removeEventListener","performanceMonitoring","toggle","enable","disable"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/hooks/usePerformanceMonitoring.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n/**\n * Hook for managing global performance monitoring state\n * Provides toggle functionality and persistence via localStorage\n */\nconst usePerformanceMonitoring = () => {\n  const [isEnabled, setIsEnabled] = useState(() => {\n    if (process.env.NODE_ENV !== 'development') return false;\n    \n    // Check environment variable first\n    if (process.env.REACT_APP_PERFORMANCE_MONITORING === 'true') return true;\n    \n    // Check localStorage\n    return localStorage.getItem('enablePerformanceMonitoring') === 'true';\n  });\n\n  const [overlayVisible, setOverlayVisible] = useState(() => {\n    if (process.env.NODE_ENV !== 'development') return false;\n    return localStorage.getItem('performanceOverlayVisible') === 'true';\n  });\n\n  // Persist settings to localStorage\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      localStorage.setItem('enablePerformanceMonitoring', isEnabled.toString());\n    }\n  }, [isEnabled]);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      localStorage.setItem('performanceOverlayVisible', overlayVisible.toString());\n    }\n  }, [overlayVisible]);\n\n  const toggleMonitoring = useCallback(() => {\n    setIsEnabled(prev => !prev);\n  }, []);\n\n  const toggleOverlay = useCallback(() => {\n    setOverlayVisible(prev => !prev);\n  }, []);\n\n  const enableMonitoring = useCallback(() => {\n    setIsEnabled(true);\n  }, []);\n\n  const disableMonitoring = useCallback(() => {\n    setIsEnabled(false);\n  }, []);\n\n  const showOverlay = useCallback(() => {\n    setOverlayVisible(true);\n  }, []);\n\n  const hideOverlay = useCallback(() => {\n    setOverlayVisible(false);\n  }, []);\n\n  // Global keyboard shortcuts\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'development') return;\n\n    const handleKeyPress = (e) => {\n      // Ctrl/Cmd + Shift + M to toggle monitoring\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'M') {\n        e.preventDefault();\n        toggleMonitoring();\n        console.log(`Performance monitoring ${!isEnabled ? 'enabled' : 'disabled'}`);\n      }\n      \n      // Ctrl/Cmd + Shift + O to toggle overlay\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'O') {\n        e.preventDefault();\n        toggleOverlay();\n        console.log(`Performance overlay ${!overlayVisible ? 'shown' : 'hidden'}`);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isEnabled, overlayVisible, toggleMonitoring, toggleOverlay]);\n\n  // Console commands for debugging\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      // Make functions available globally for console debugging\n      window.performanceMonitoring = {\n        toggle: toggleMonitoring,\n        enable: enableMonitoring,\n        disable: disableMonitoring,\n        showOverlay,\n        hideOverlay,\n        isEnabled,\n        overlayVisible\n      };\n    }\n\n    return () => {\n      if (window.performanceMonitoring) {\n        delete window.performanceMonitoring;\n      }\n    };\n  }, [\n    toggleMonitoring, \n    enableMonitoring, \n    disableMonitoring, \n    showOverlay, \n    hideOverlay, \n    isEnabled, \n    overlayVisible\n  ]);\n\n  return {\n    isEnabled,\n    overlayVisible,\n    toggleMonitoring,\n    toggleOverlay,\n    enableMonitoring,\n    disableMonitoring,\n    showOverlay,\n    hideOverlay\n  };\n};\n\nexport default usePerformanceMonitoring;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}