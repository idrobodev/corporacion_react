{"ast":null,"code":"import{ROLES,dashboardClient}from'./api';import{dbService}from'./database';const STORAGE_BASE_URL=process.env.REACT_APP_STORAGE_BASE_URL;class StorageService{async isAdmin(){return await dbService.hasPermission(ROLES.ADMINISTRADOR);}async upload(file){let path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}if(file.size>10*1024*1024){throw new Error('File size exceeds 10MB limit');}try{// Get signed URL from backend\nconst response=await dashboardClient.post('/storage/upload-url',{path:path||'',fileName:file.name,contentType:file.type||'application/octet-stream'});const signedUrl=response.data.signedUrl;// Upload to signed URL\nconst uploadResponse=await fetch(signedUrl,{method:'PUT',body:file,headers:{'Content-Type':file.type||'application/octet-stream'}});if(!uploadResponse.ok){throw new Error('Upload failed');}const fullPath=(path?path+'/':'')+file.name;return{path:fullPath,publicUrl:STORAGE_BASE_URL+'/'+fullPath};}catch(error){var _error$response,_error$response$data;console.error('Error uploading file:',error);throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Error al subir archivo');}}async deleteFile(fullPath){if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}try{// Get signed URL from backend\nconst response=await dashboardClient.post('/storage/delete-url',{path:fullPath});const signedUrl=response.data.signedUrl;// Delete using signed URL\nconst deleteResponse=await fetch(signedUrl,{method:'DELETE'});if(!deleteResponse.ok){throw new Error('Delete failed');}}catch(error){var _error$response2,_error$response2$data;console.error('Error deleting file:',error);throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Error al eliminar archivo');}}async listFiles(){let path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';try{const response=await dashboardClient.get('/storage/list',{params:{path:path||''}});return{files:response.data.files||[],folders:response.data.folders||[]};}catch(error){var _error$response3,_error$response3$data;console.error('Error listing files:',error);throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Error al listar archivos');}}async deleteFolder(path){if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}try{await dashboardClient.post('/storage/delete-folder',{path});}catch(error){var _error$response4,_error$response4$data;console.error('Error deleting folder:',error);throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Error al eliminar carpeta');}}async createFolder(folderName){let parentPath=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}try{const response=await dashboardClient.post('/storage/create-folder',{name:folderName,parentPath:parentPath||''});return response.data;}catch(error){var _error$response5,_error$response5$data;console.error('Error creating folder:',error);throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Error al crear carpeta');}}async renameFolder(oldName,newName){let parentPath=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}try{await dashboardClient.post('/storage/rename-folder',{oldName,newName,parentPath:parentPath||''});}catch(error){var _error$response6,_error$response6$data;console.error('Error renaming folder:',error);throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Error al renombrar carpeta');}}async getDownloadUrl(path){// Return public URL\nreturn STORAGE_BASE_URL+'/'+path;}}export const storage=new StorageService();export default storage;","map":{"version":3,"names":["ROLES","dashboardClient","dbService","STORAGE_BASE_URL","process","env","REACT_APP_STORAGE_BASE_URL","StorageService","isAdmin","hasPermission","ADMINISTRADOR","upload","file","path","arguments","length","undefined","Error","size","response","post","fileName","name","contentType","type","signedUrl","data","uploadResponse","fetch","method","body","headers","ok","fullPath","publicUrl","error","_error$response","_error$response$data","console","message","deleteFile","deleteResponse","_error$response2","_error$response2$data","listFiles","get","params","files","folders","_error$response3","_error$response3$data","deleteFolder","_error$response4","_error$response4$data","createFolder","folderName","parentPath","_error$response5","_error$response5$data","renameFolder","oldName","newName","_error$response6","_error$response6$data","getDownloadUrl","storage"],"sources":["/Users/todoporunalma/Desktop/Corporacion/coptua_react/src/shared/services/storage.js"],"sourcesContent":["import { ROLES, dashboardClient } from './api';\nimport { dbService } from './database';\n\nconst STORAGE_BASE_URL = process.env.REACT_APP_STORAGE_BASE_URL;\n\nclass StorageService {\n  async isAdmin() {\n    return await dbService.hasPermission(ROLES.ADMINISTRADOR);\n  }\n\n  async upload(file, path = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    if (file.size > 10 * 1024 * 1024) {\n      throw new Error('File size exceeds 10MB limit');\n    }\n\n    try {\n      // Get signed URL from backend\n      const response = await dashboardClient.post('/storage/upload-url', {\n        path: path || '',\n        fileName: file.name,\n        contentType: file.type || 'application/octet-stream'\n      });\n\n      const signedUrl = response.data.signedUrl;\n\n      // Upload to signed URL\n      const uploadResponse = await fetch(signedUrl, {\n        method: 'PUT',\n        body: file,\n        headers: {\n          'Content-Type': file.type || 'application/octet-stream'\n        }\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const fullPath = (path ? path + '/' : '') + file.name;\n\n      return {\n        path: fullPath,\n        publicUrl: STORAGE_BASE_URL + '/' + fullPath\n      };\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw new Error(error.response?.data?.message || 'Error al subir archivo');\n    }\n  }\n\n  async deleteFile(fullPath) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    try {\n      // Get signed URL from backend\n      const response = await dashboardClient.post('/storage/delete-url', {\n        path: fullPath\n      });\n\n      const signedUrl = response.data.signedUrl;\n\n      // Delete using signed URL\n      const deleteResponse = await fetch(signedUrl, {\n        method: 'DELETE'\n      });\n\n      if (!deleteResponse.ok) {\n        throw new Error('Delete failed');\n      }\n    } catch (error) {\n      console.error('Error deleting file:', error);\n      throw new Error(error.response?.data?.message || 'Error al eliminar archivo');\n    }\n  }\n\n  async listFiles(path = '') {\n    try {\n      const response = await dashboardClient.get('/storage/list', {\n        params: { path: path || '' }\n      });\n\n      return {\n        files: response.data.files || [],\n        folders: response.data.folders || []\n      };\n    } catch (error) {\n      console.error('Error listing files:', error);\n      throw new Error(error.response?.data?.message || 'Error al listar archivos');\n    }\n  }\n\n  async deleteFolder(path) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    try {\n      await dashboardClient.post('/storage/delete-folder', {\n        path\n      });\n    } catch (error) {\n      console.error('Error deleting folder:', error);\n      throw new Error(error.response?.data?.message || 'Error al eliminar carpeta');\n    }\n  }\n\n  async createFolder(folderName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    try {\n      const response = await dashboardClient.post('/storage/create-folder', {\n        name: folderName,\n        parentPath: parentPath || ''\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('Error creating folder:', error);\n      throw new Error(error.response?.data?.message || 'Error al crear carpeta');\n    }\n  }\n\n  async renameFolder(oldName, newName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    try {\n      await dashboardClient.post('/storage/rename-folder', {\n        oldName,\n        newName,\n        parentPath: parentPath || ''\n      });\n    } catch (error) {\n      console.error('Error renaming folder:', error);\n      throw new Error(error.response?.data?.message || 'Error al renombrar carpeta');\n    }\n  }\n\n  async getDownloadUrl(path) {\n    // Return public URL\n    return STORAGE_BASE_URL + '/' + path;\n  }\n}\n\nexport const storage = new StorageService();\nexport default storage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}