{"ast":null,"code":"import _objectSpread from\"/Users/todoporunalma/Desktop/ol/corporacion_react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Servicio API   \nimport axios from'axios';// Configuración base de las APIs\n// URLs para servicios separados - FastAPI backend con auth y dashboard\nconst AUTH_API_BASE_URL=process.env.REACT_APP_AUTH_API_BASE_URL||\"\".concat(window.location.protocol,\"//\").concat(window.location.hostname,\"/auth\");const DASHBOARD_API_BASE_URL=process.env.REACT_APP_DASHBOARD_API_BASE_URL||\"\".concat(window.location.protocol,\"//\").concat(window.location.hostname,\"/dashboard\");console.log('🔧 AUTH_API_BASE_URL configurada como:',AUTH_API_BASE_URL);console.log('🔧 DASHBOARD_API_BASE_URL configurada como:',DASHBOARD_API_BASE_URL);// Additional diagnostic logging\nconsole.log('🔧 API CONFIGURATION DIAGNOSTICS:');console.log('  - REACT_APP_AUTH_API_BASE_URL:',process.env.REACT_APP_AUTH_API_BASE_URL);console.log('  - REACT_APP_DASHBOARD_API_BASE_URL:',process.env.REACT_APP_DASHBOARD_API_BASE_URL);console.log('  - REACT_APP_API_BASE_URL:',process.env.REACT_APP_API_BASE_URL);console.log('  - REACT_APP_FORMATOS_API_URL:',process.env.REACT_APP_FORMATOS_API_URL);console.log('  - NODE_ENV:',process.env.NODE_ENV);console.log('  - Current hostname:',window.location.hostname);console.log('  - Current protocol:',window.location.protocol);// Crear instancia de axios para autenticación\nconst authClient=axios.create({baseURL:AUTH_API_BASE_URL,timeout:30000,withCredentials:false,headers:{'Content-Type':'application/json','Accept':'application/json'}});// Crear instancia de axios para dashboard\nconst dashboardClient=axios.create({baseURL:DASHBOARD_API_BASE_URL,timeout:30000,withCredentials:false,headers:{'Content-Type':'application/json','Accept':'application/json'}});// Función helper para configurar interceptors\nconst setupInterceptors=(client,serviceName)=>{// Interceptor para agregar token de autenticación\nclient.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{console.error(\"Error en \".concat(serviceName,\" request interceptor:\"),error);return Promise.reject(error);});// Interceptor para manejar respuestas y errores\nclient.interceptors.response.use(response=>response,error=>{var _error$response,_error$response2,_error$response2$data;const errorInfo=generateErrorMessage(error);// Solo log crítico de errores\nif(errorInfo.isCorsError){var _error$config;console.error(\"CORS ERROR (\".concat(serviceName,\"):\"),(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url);}else if(errorInfo.isNetworkError){console.error(\"Network error (\".concat(serviceName,\"):\"),error.message);}else if(error.response){console.error(\"HTTP \".concat(error.response.status,\" (\").concat(serviceName,\"):\"),error.response.data);}// Manejar errores de autenticación\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!errorInfo.isNetworkError){localStorage.removeItem('authToken');localStorage.removeItem('currentUser');window.location.href='/login';}const enhancedError={message:errorInfo.message,type:errorInfo.type,status:errorInfo.status,isCorsError:errorInfo.isCorsError,isNetworkError:errorInfo.isNetworkError,suggestions:errorInfo.suggestions,serverMessage:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||null,originalError:error,response:error.response};return Promise.reject(enhancedError);});};// Configurar interceptors para ambos clientes\nsetupInterceptors(authClient,'AUTH');setupInterceptors(dashboardClient,'DASHBOARD');// Definición de roles del sistema\nexport const ROLES={CONSULTA:'CONSULTA',ADMINISTRADOR:'ADMINISTRADOR'};// ==================== CORS ERROR DETECTION ====================\n/**\n * Detecta si un error de axios es causado por CORS\n * @param {Error} error - El objeto de error de axios\n * @returns {boolean} true si es un error de CORS, false en caso contrario\n */export const detectCorsError=error=>{var _error$message;// CORS errors typically have these characteristics:\n// 1. No response object (preflight or actual request blocked)\n// 2. Network Error message\n// 3. Error code ERR_NETWORK\n// 4. Request was made but no response received\n// Check if there's no response (most common CORS indicator)\nif(!error.response){// Check for network error patterns\nconst isNetworkError=error.message==='Network Error'||error.code==='ERR_NETWORK';// Check if request was configured (means axios tried to send it)\nconst hasRequestConfig=!!error.config;// CORS errors occur when:\n// - There's a network error\n// - Request was configured and attempted\n// - No response was received (blocked by browser)\nif(isNetworkError&&hasRequestConfig){var _error$config2,_error$config3;// Additional check: if the URL is cross-origin\nconst requestUrl=((_error$config2=error.config)===null||_error$config2===void 0?void 0:_error$config2.url)||'';const baseURL=((_error$config3=error.config)===null||_error$config3===void 0?void 0:_error$config3.baseURL)||'';const fullUrl=requestUrl.startsWith('http')?requestUrl:baseURL+requestUrl;// If we're making a request to a different origin, it's likely CORS\nif(fullUrl.startsWith('http')){const currentOrigin=\"\".concat(window.location.protocol,\"//\").concat(window.location.host);const requestOrigin=new URL(fullUrl).origin;// Different origins = likely CORS issue\nif(currentOrigin!==requestOrigin){return true;}}// Even same origin can have CORS issues in some cases\n// If it's a network error with no response, assume CORS\nreturn true;}}// Check for specific CORS-related error messages\nconst errorMessage=((_error$message=error.message)===null||_error$message===void 0?void 0:_error$message.toLowerCase())||'';const corsKeywords=['cors','cross-origin','preflight'];if(corsKeywords.some(keyword=>errorMessage.includes(keyword))){return true;}// Not a CORS error\nreturn false;};// ==================== ERROR MESSAGE GENERATOR ====================\n/**\n * Genera mensajes de error amigables y accionables para diferentes tipos de errores\n * @param {Error} error - El objeto de error original\n * @returns {Object} Objeto con mensaje, sugerencias y tipo de error\n */export const generateErrorMessage=error=>{var _error$response3,_error$message2;const errorInfo={message:'',suggestions:[],type:'unknown',isNetworkError:false,isCorsError:false,status:((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)||0,originalError:error};// Usar la función de detección de CORS\nconst isCorsError=detectCorsError(error);// Detectar si es un error de red (sin respuesta del servidor)\nconst isNetworkError=!error.response&&(error.message==='Network Error'||error.code==='ERR_NETWORK'||error.code==='ECONNABORTED'||!error.status);if(isCorsError){// Error de CORS\nerrorInfo.type='cors';errorInfo.isCorsError=true;errorInfo.isNetworkError=true;errorInfo.message='No se puede conectar con el servidor debido a restricciones de CORS';errorInfo.suggestions=['🔧 Verifica que el servidor backend esté ejecutándose en http://localhost:8080','🔧 Asegúrate de que el backend tenga configurado CORS correctamente','🔍 Revisa la consola del navegador para ver detalles específicos del error CORS','⚙️ Si eres desarrollador, verifica la configuración de CORS en el backend (WebMvcConfigurer o SecurityFilterChain)','🔄 Intenta reiniciar tanto el frontend como el backend','📝 Verifica que el backend permita el origen: '+window.location.origin];}else if(error.code==='ECONNABORTED'||(_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes('timeout')){// Error de timeout\nerrorInfo.type='timeout';errorInfo.isNetworkError=true;errorInfo.message='La solicitud al servidor tardó demasiado tiempo (timeout después de 30 segundos)';errorInfo.suggestions=['🌐 Verifica tu conexión a internet','⏱️ El servidor puede estar experimentando alta carga o procesando una operación pesada','🔄 Intenta nuevamente en unos momentos','📊 Si trabajas con grandes volúmenes de datos, considera filtrar o paginar los resultados','🔧 Si el problema persiste, contacta al administrador del sistema'];}else if(isNetworkError){var _error$config4;// Error de red general (backend no disponible)\nerrorInfo.type='network';errorInfo.isNetworkError=true;errorInfo.message='No se puede conectar con el servidor - Backend no disponible';errorInfo.suggestions=['🚀 Verifica que el servidor backend esté ejecutándose en '+(((_error$config4=error.config)===null||_error$config4===void 0?void 0:_error$config4.baseURL)||'http://localhost:8080'),'🌐 Comprueba tu conexión a internet','🔍 Asegúrate de que la URL del servidor sea correcta','🛡️ Verifica que no haya un firewall bloqueando la conexión','🔧 Si eres desarrollador, inicia el backend con: ./mvnw spring-boot:run','📞 Si el problema persiste, contacta al administrador del sistema'];}else if(error.response){var _error$response$data;// Error HTTP con respuesta del servidor\nconst status=error.response.status;switch(status){case 400:errorInfo.type='validation';errorInfo.message='Los datos enviados no son válidos (Error 400)';errorInfo.suggestions=['📝 Verifica que todos los campos requeridos estén completos','✅ Asegúrate de que los datos tengan el formato correcto (emails, teléfonos, fechas, etc.)','🔍 Revisa los mensajes de validación específicos del servidor','📋 Verifica que no haya campos con valores inválidos o fuera de rango'];break;case 401:errorInfo.type='authentication';errorInfo.message='No estás autenticado o tu sesión ha expirado (Error 401)';errorInfo.suggestions=['🔐 Inicia sesión nuevamente','✅ Verifica que tus credenciales sean correctas','⏱️ Tu sesión puede haber expirado por inactividad','🔄 Intenta cerrar sesión y volver a iniciar sesión'];break;case 403:errorInfo.type='authorization';errorInfo.message='No tienes permisos para realizar esta acción (Error 403)';errorInfo.suggestions=['👤 Contacta al administrador para solicitar los permisos necesarios','🔑 Verifica que tu cuenta tenga el rol adecuado','⚙️ Puede que necesites permisos de ADMINISTRADOR para esta operación','📋 Revisa qué acciones están permitidas para tu rol actual'];break;case 404:errorInfo.type='notFound';errorInfo.message='El recurso solicitado no fue encontrado (Error 404)';errorInfo.suggestions=['🔍 Verifica que el recurso exista en el sistema','🗑️ Puede que el recurso haya sido eliminado recientemente','🔄 Intenta refrescar la página y volver a intentar','📋 Verifica que el ID o identificador sea correcto'];break;case 409:errorInfo.type='conflict';errorInfo.message='Ya existe un recurso con estos datos (Error 409)';errorInfo.suggestions=['🔍 Verifica que no estés duplicando información','📝 Puede que ya exista un registro con el mismo identificador único','✏️ Intenta con datos diferentes o actualiza el registro existente','🔄 Refresca la lista para ver los datos actuales'];break;case 500:case 502:case 503:case 504:errorInfo.type='serverError';errorInfo.message=\"Error interno del servidor (Error \".concat(status,\")\");errorInfo.suggestions=['🔥 El servidor está experimentando problemas técnicos','⏱️ Intenta nuevamente en unos momentos','🔧 Si el problema persiste, contacta al administrador del sistema','📝 Este error ha sido registrado automáticamente para su revisión','💾 Verifica que la base de datos esté disponible (si eres administrador)'];break;default:errorInfo.type='http';errorInfo.message=\"Error del servidor (c\\xF3digo \".concat(status,\")\");errorInfo.suggestions=['❌ Ocurrió un error inesperado en el servidor','🔄 Intenta nuevamente','📞 Si el problema persiste, contacta al soporte técnico','🔍 Código de error: '+status];}// Agregar mensaje específico del servidor si está disponible\nif((_error$response$data=error.response.data)!==null&&_error$response$data!==void 0&&_error$response$data.message){errorInfo.serverMessage=error.response.data.message;}}else{// Error desconocido\nerrorInfo.type='unknown';errorInfo.message='Ocurrió un error inesperado';errorInfo.suggestions=['🔄 Intenta refrescar la página','🌐 Verifica tu conexión a internet','💾 Limpia la caché del navegador si el problema persiste','🔧 Intenta cerrar y volver a abrir la aplicación','📞 Si el problema persiste, contacta al soporte técnico con detalles del error'];}return errorInfo;};class ApiService{// ==================== AUTENTICACIÓN ====================\nasync login(email,password){console.log('🔐 Starting login request...');console.log('📧 Email:',email);console.log('🌐 Auth API URL:',AUTH_API_BASE_URL);console.log('🔗 Full login URL:',AUTH_API_BASE_URL+'/login');const startTime=Date.now();try{console.log('📤 Sending login request...');const response=await authClient.post('/login',{email,password});const responseTime=Date.now()-startTime;console.log('✅ Login request completed in',responseTime,'ms');console.log('📊 Response status:',response.status);// FastAPI returns data directly in response.data, not nested\nconst responseData=response.data;console.log('📦 Response data:',responseData);// Check for error in FastAPI response format\nif(responseData.error){console.error('❌ Server error in response:',responseData.error);throw new Error(responseData.error.message||'Error en el servidor');}if(!responseData.data){console.error('❌ Invalid server response: no data field');throw new Error('Respuesta del servidor inválida');}const{token,user}=responseData.data;console.log('🔑 Token received:',!!token);console.log('👤 User received:',!!user);if(!token||!user){console.error('❌ Incomplete server response - missing token or user');throw new Error('Respuesta del servidor incompleta');}console.log('💾 Storing auth data in localStorage...');localStorage.setItem('authToken',token);localStorage.setItem('currentUser',JSON.stringify(user));console.log('🎉 Login successful!');return{data:{user,token},error:null};}catch(error){const responseTime=Date.now()-startTime;console.error('💥 Login failed after',responseTime,'ms');console.error('❌ Error details:',error);if(error.response){var _error$response$data2,_error$response$data3,_error$response$data4,_error$response$data5;console.error('📊 HTTP Error Response:');console.error('   Status:',error.response.status);console.error('   Status Text:',error.response.statusText);console.error('   Headers:',error.response.headers);console.error('   Data:',error.response.data);// Handle FastAPI error format\nconst serverMessage=((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.detail)||((_error$response$data3=error.response.data)===null||_error$response$data3===void 0?void 0:_error$response$data3.message)||((_error$response$data4=error.response.data)===null||_error$response$data4===void 0?void 0:(_error$response$data5=_error$response$data4.error)===null||_error$response$data5===void 0?void 0:_error$response$data5.message);throw new Error(serverMessage||'Error del servidor');}else if(error.request){var _error$config5;console.error('🌐 Network Error - No response received:');console.error('   Request config:',error.config);console.error('   Timeout was set to:',(_error$config5=error.config)===null||_error$config5===void 0?void 0:_error$config5.timeout,'ms');throw new Error('No se pudo conectar con el servidor. Verifica que el backend esté corriendo.');}else{console.error('⚠️ Unexpected error:',error.message);throw error;}}}// Cerrar sesión\nasync logout(){try{await authClient.post('/logout');// Limpiar localStorage\nlocalStorage.removeItem('authToken');localStorage.removeItem('currentUser');return{success:true,error:null};}catch(error){console.error('Error en logout:',error);// Limpiar localStorage aunque falle la petición\nlocalStorage.removeItem('authToken');localStorage.removeItem('currentUser');return{success:true,error:null};}}// Restablecer contraseña\nasync resetPassword(email){try{const response=await authClient.post('/reset-password',{email});return{data:response.data,error:null};}catch(error){console.error('Error en reset password:',error);return{data:null,error:{message:error.message||'Error al restablecer contraseña'}};}}async getCurrentUser(){try{const storedUser=localStorage.getItem('currentUser');const storedToken=localStorage.getItem('authToken');if(storedUser&&storedToken){try{const user=JSON.parse(storedUser);if(user&&user.email&&user.id){return{data:user,error:null};}else{localStorage.removeItem('currentUser');localStorage.removeItem('authToken');return{data:null,error:null};}}catch(parseError){console.error('Error parseando usuario:',parseError);localStorage.removeItem('currentUser');localStorage.removeItem('authToken');return{data:null,error:null};}}return{data:null,error:null};}catch(error){console.error('Error obteniendo usuario actual:',error);return{data:null,error};}}// Actualizar perfil de usuario\nasync updateProfile(profileData){try{const response=await authClient.put('/profile',profileData);// Actualizar usuario en localStorage\nconst currentUser=JSON.parse(localStorage.getItem('currentUser')||'{}');const updatedUser=_objectSpread(_objectSpread({},currentUser),response.data);localStorage.setItem('currentUser',JSON.stringify(updatedUser));return{data:response.data,error:null};}catch(error){console.error('Error actualizando perfil:',error);return{data:null,error:{message:error.message||'Error al actualizar perfil'}};}}// Verificar permisos del usuario\nasync hasPermission(requiredRole){try{// Consultar endpoint real en backend FastAPI\nconst response=await authClient.get('/permission',{params:{role:requiredRole}});return response.data.hasPermission||false;}catch(error){console.error('Error verificando permisos:',error);// Fallback temporal a verificación local si el endpoint no existe\ntry{const{data:user}=await this.getCurrentUser();if(!user)return false;const userRole=user.rol||user.role||ROLES.CONSULTA;// Jerarquía de roles: ADMINISTRADOR > CONSULTA\nconst roleHierarchy={[ROLES.ADMINISTRADOR]:2,[ROLES.CONSULTA]:1};const userLevel=roleHierarchy[userRole]||1;const requiredLevel=roleHierarchy[requiredRole]||1;return userLevel>=requiredLevel;}catch(fallbackError){console.error('Fallback también falló:',fallbackError);return false;}}}// ==================== DASHBOARD ====================\n// Obtener datos del dashboard\nasync getDashboardData(){try{const response=await dashboardClient.get('/stats');return{data:response.data,error:null};}catch(error){console.error('Error obteniendo datos del dashboard:',error);return{data:{participantes:0,mensualidades:0,total_users:0,admin_users:0,consulta_users:0},error};}}// ==================== PARTICIPANTES ====================\n// Obtener participantes\nasync getParticipantes(){try{const response=await dashboardClient.get('/participantes');return{data:response.data||[],error:null};}catch(error){console.error('Error obteniendo participantes:',error);return{data:[],error:{message:'Error al cargar participantes'}};}}async createParticipante(participanteData){try{if(!participanteData.nombre||!participanteData.telefono){return{data:null,error:{message:'Nombre y teléfono son campos obligatorios'}};}const response=await dashboardClient.post('/participantes',participanteData);return{data:response.data,error:null};}catch(error){var _error$response4,_error$response4$data;console.error('Error creando participante:',error);return{data:null,error:{message:((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||error.message||'Error al crear participante'}};}}// Actualizar participante\nasync updateParticipante(id,participanteData){try{if(!id){return{data:null,error:{message:'ID de participante requerido'}};}const response=await dashboardClient.put(\"/participantes/\".concat(id),participanteData);return{data:response.data,error:null};}catch(error){console.error('Error actualizando participante:',error);return{data:null,error:{message:error.message||'Error al actualizar participante'}};}}// Eliminar participante\nasync deleteParticipante(id){try{await dashboardClient.delete(\"/participantes/\".concat(id));return{error:null};}catch(error){console.error('Error eliminando participante:',error);return{error:{message:error.message||'Error al eliminar participante'}};}}// ==================== MENSUALIDADES ====================\n// Obtener mensualidades\nasync getMensualidades(){try{const response=await dashboardClient.get('/mensualidades');return{data:response.data||[],error:null};}catch(error){console.error('Error obteniendo mensualidades:',error);return{data:[],error:{message:'Error al cargar mensualidades'}};}}// Crear nueva mensualidad\nasync createMensualidad(mensualidadData){try{if(!mensualidadData.participante_id||!mensualidadData.valor){return{data:null,error:{message:'Participante y valor son campos obligatorios'}};}const response=await dashboardClient.post('/mensualidades',mensualidadData);return{data:response.data,error:null};}catch(error){console.error('Error creando mensualidad:',error);return{data:null,error:{message:error.message||'Error al crear mensualidad'}};}}// Actualizar mensualidad\nasync updateMensualidad(id,mensualidadData){try{if(!id){return{data:null,error:{message:'ID de mensualidad requerido'}};}const response=await dashboardClient.put(\"/mensualidades/\".concat(id),mensualidadData);return{data:response.data,error:null};}catch(error){console.error('Error actualizando mensualidad:',error);return{data:null,error:{message:error.message||'Error al actualizar mensualidad'}};}}// ==================== SEDES ====================\n// Obtener sedes\nasync getSedes(){try{const response=await dashboardClient.get('/sedes');return{data:response.data||[],error:null};}catch(error){console.error('Error obteniendo sedes:',error);return{data:[],error:{message:'Error al cargar sedes'}};}}async createSede(sedeData){try{const response=await dashboardClient.post('/sedes',sedeData);return{data:response.data,error:null};}catch(error){var _error$response5,_error$response5$data;console.error('Error creando sede:',error);return{data:null,error:{message:((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||error.message||'Error al crear sede'}};}}// Actualizar sede\nasync updateSede(id,sedeData){try{if(!id){return{data:null,error:{message:'ID de sede requerido'}};}const response=await dashboardClient.put(\"/sedes/\".concat(id),sedeData);return{data:response.data,error:null};}catch(error){console.error('Error actualizando sede:',error);return{data:null,error:{message:error.message||'Error al actualizar sede'}};}}// Eliminar sede\nasync deleteSede(id){try{if(!id){return{error:{message:'ID de sede requerido'}};}await dashboardClient.delete(\"/sedes/\".concat(id));return{error:null};}catch(error){var _error$response6,_error$response6$data;console.error('Error eliminando sede:',error);return{error:{message:((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||error.message||'Error al eliminar sede'}};}}// ==================== USUARIOS ====================\n/**\n   * Obtener lista de usuarios\n   * @returns {Promise<{data: Array, error: Object|null}>}\n   */async getUsuarios(){try{const response=await dashboardClient.get('/usuarios');return{data:response.data||[],error:null};}catch(error){console.error('Error obteniendo usuarios:',error);return{data:[],error:{message:'Error al cargar usuarios'}};}}/**\n   * Crear nuevo usuario\n   * @param {Object} usuarioData - {email, password, rol}\n   * @returns {Promise<{data: Object, error: Object|null}>}\n   */async createUsuario(usuarioData){try{if(!usuarioData.email||!usuarioData.password||!usuarioData.rol){return{data:null,error:{message:'Email, contraseña y rol son campos obligatorios'}};}const response=await dashboardClient.post('/usuarios',usuarioData);return{data:response.data,error:null};}catch(error){var _error$response7,_error$response7$data;console.error('Error creando usuario:',error);return{data:null,error:{message:((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||error.message||'Error al crear usuario'}};}}/**\n   * Actualizar usuario existente\n   * @param {number} id - ID del usuario\n   * @param {Object} usuarioData - Datos a actualizar\n   * @returns {Promise<{data: Object, error: Object|null}>}\n   */async updateUsuario(id,usuarioData){try{if(!id){return{data:null,error:{message:'ID de usuario requerido'}};}const response=await dashboardClient.put(\"/usuarios/\".concat(id),usuarioData);return{data:response.data,error:null};}catch(error){console.error('Error actualizando usuario:',error);return{data:null,error:{message:error.message||'Error al actualizar usuario'}};}}/**\n   * Eliminar usuario\n   * @param {number} id - ID del usuario\n   * @returns {Promise<{error: Object|null}>}\n   */async deleteUsuario(id){try{if(!id){return{error:{message:'ID de usuario requerido'}};}await dashboardClient.delete(\"/usuarios/\".concat(id));return{error:null};}catch(error){console.error('Error eliminando usuario:',error);return{error:{message:error.message||'Error al eliminar usuario'}};}}// ==================== ACUDIENTES ====================\n/**\n   * Obtener lista de acudientes\n   * @param {Object} filters - Filtros opcionales {participante_id}\n   * @returns {Promise<{data: Array, error: Object|null}>}\n   */async getAcudientes(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await dashboardClient.get('/acudientes',{params:filters});return{data:response.data.data||[],error:null};}catch(error){console.error('Error obteniendo acudientes:',error);return{data:[],error:{message:'Error al cargar acudientes'}};}}/**\n   * Obtener acudientes de un participante específico\n   * @param {number} participanteId - ID del participante\n   * @returns {Promise<{data: Array, error: Object|null}>}\n   */async getAcudientesByParticipante(participanteId){try{if(!participanteId){return{data:[],error:{message:'ID de participante requerido'}};}const response=await dashboardClient.get(\"/participantes/\".concat(participanteId,\"/acudientes\"));return{data:response.data||[],error:null};}catch(error){console.error('Error obteniendo acudientes del participante:',error);return{data:[],error:{message:'Error al cargar acudientes del participante'}};}}/**\n   * Crear nuevo acudiente\n   * @param {Object} acudienteData - Datos del acudiente\n   * @returns {Promise<{data: Object, error: Object|null}>}\n   */async createAcudiente(acudienteData){try{if(!acudienteData.id_participante||!acudienteData.numero_documento||!acudienteData.nombres||!acudienteData.apellidos){return{data:null,error:{message:'Participante, documento, nombres y apellidos son campos obligatorios'}};}const response=await dashboardClient.post('/acudientes',acudienteData);return{data:response.data,error:null};}catch(error){var _error$response8,_error$response8$data;console.error('Error creando acudiente:',error);return{data:null,error:{message:((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.message)||error.message||'Error al crear acudiente'}};}}/**\n   * Actualizar acudiente existente\n   * @param {number} id - ID del acudiente\n   * @param {Object} acudienteData - Datos a actualizar\n   * @returns {Promise<{data: Object, error: Object|null}>}\n   */async updateAcudiente(id,acudienteData){try{if(!id){return{data:null,error:{message:'ID de acudiente requerido'}};}const response=await dashboardClient.put(\"/acudientes/\".concat(id),acudienteData);return{data:response.data,error:null};}catch(error){console.error('Error actualizando acudiente:',error);return{data:null,error:{message:error.message||'Error al actualizar acudiente'}};}}/**\n   * Eliminar acudiente\n   * @param {number} id - ID del acudiente\n   * @returns {Promise<{error: Object|null}>}\n   */async deleteAcudiente(id){try{if(!id){return{error:{message:'ID de acudiente requerido'}};}await dashboardClient.delete(\"/acudientes/\".concat(id));return{error:null};}catch(error){console.error('Error eliminando acudiente:',error);return{error:{message:error.message||'Error al eliminar acudiente'}};}}// ==================== UTILIDADES ====================\n/**\n   * Verifica la conexión con ambos backends y proporciona estado detallado\n   * @returns {Promise<Object>} Objeto con información detallada de la conexión\n   */async testConnection(){const startTime=Date.now();const results={auth:null,dashboard:null,overall:{success:false,message:'Conexión fallida'}};// Test auth service\ntry{const authResponse=await authClient.get('/health');results.auth={success:true,connected:true,responseTime:Date.now()-startTime,status:authResponse.status,baseURL:AUTH_API_BASE_URL,data:authResponse.data,message:'Conexión exitosa con auth service'};}catch(error){const errorInfo=generateErrorMessage(error);results.auth={success:false,connected:false,responseTime:Date.now()-startTime,baseURL:AUTH_API_BASE_URL,error:error.message||'Error de conexión',errorType:errorInfo.type,isCorsError:errorInfo.isCorsError,isNetworkError:errorInfo.isNetworkError,suggestions:errorInfo.suggestions,message:errorInfo.message};}// Test dashboard service\ntry{const dashboardResponse=await dashboardClient.get('/health');results.dashboard={success:true,connected:true,responseTime:Date.now()-startTime,status:dashboardResponse.status,baseURL:DASHBOARD_API_BASE_URL,data:dashboardResponse.data,message:'Conexión exitosa con dashboard service'};}catch(error){const errorInfo=generateErrorMessage(error);results.dashboard={success:false,connected:false,responseTime:Date.now()-startTime,baseURL:DASHBOARD_API_BASE_URL,error:error.message||'Error de conexión',errorType:errorInfo.type,isCorsError:errorInfo.isCorsError,isNetworkError:errorInfo.isNetworkError,suggestions:errorInfo.suggestions,message:errorInfo.message};}// Overall result\nconst authSuccess=results.auth.success;const dashboardSuccess=results.dashboard.success;if(authSuccess&&dashboardSuccess){results.overall={success:true,message:'Conexión exitosa con ambos servicios'};}else if(authSuccess){results.overall={success:false,message:'Auth service OK, pero dashboard service falló'};}else if(dashboardSuccess){results.overall={success:false,message:'Dashboard service OK, pero auth service falló'};}else{results.overall={success:false,message:'Ambos servicios no están disponibles'};}return results;}/**\n   * Verifica si los backends están disponibles antes de operaciones críticas\n   * @param {number} timeout - Timeout en milisegundos (por defecto 5000ms)\n   * @returns {Promise<Object>} Objeto con estado de ambos servicios\n   */async isBackendReachable(){let timeout=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5000;const results={auth:false,dashboard:false};// Check auth service\ntry{const authCheck=axios.create({baseURL:AUTH_API_BASE_URL,timeout:timeout,headers:{'Accept':'application/json'}});await authCheck.get('/health');results.auth=true;}catch(error){console.warn('Auth service no disponible:',error.message);}// Check dashboard service\ntry{const dashboardCheck=axios.create({baseURL:DASHBOARD_API_BASE_URL,timeout:timeout,headers:{'Accept':'application/json'}});await dashboardCheck.get('/health');results.dashboard=true;}catch(error){console.warn('Dashboard service no disponible:',error.message);}return results;}// Obtener configuración de la API\ngetApiConfig(){return{authBaseURL:AUTH_API_BASE_URL,dashboardBaseURL:DASHBOARD_API_BASE_URL,hasToken:!!localStorage.getItem('authToken'),environment:process.env.NODE_ENV,isConfigured:!!(AUTH_API_BASE_URL&&DASHBOARD_API_BASE_URL)};}}// Exportar instancia única del servicio\nexport const api=new ApiService();export default api;// Exportar clientes axios para uso directo si es necesario\nexport{authClient,dashboardClient};","map":{"version":3,"names":["axios","AUTH_API_BASE_URL","process","env","REACT_APP_AUTH_API_BASE_URL","concat","window","location","protocol","hostname","DASHBOARD_API_BASE_URL","REACT_APP_DASHBOARD_API_BASE_URL","console","log","REACT_APP_API_BASE_URL","REACT_APP_FORMATOS_API_URL","NODE_ENV","authClient","create","baseURL","timeout","withCredentials","headers","dashboardClient","setupInterceptors","client","serviceName","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response2$data","errorInfo","generateErrorMessage","isCorsError","_error$config","url","isNetworkError","message","status","data","removeItem","href","enhancedError","type","suggestions","serverMessage","originalError","ROLES","CONSULTA","ADMINISTRADOR","detectCorsError","_error$message","code","hasRequestConfig","_error$config2","_error$config3","requestUrl","fullUrl","startsWith","currentOrigin","host","requestOrigin","URL","origin","errorMessage","toLowerCase","corsKeywords","some","keyword","includes","_error$response3","_error$message2","_error$config4","_error$response$data","ApiService","login","email","password","startTime","Date","now","post","responseTime","responseData","Error","user","setItem","JSON","stringify","_error$response$data2","_error$response$data3","_error$response$data4","_error$response$data5","statusText","detail","_error$config5","logout","success","resetPassword","getCurrentUser","storedUser","storedToken","parse","id","parseError","updateProfile","profileData","put","currentUser","updatedUser","_objectSpread","hasPermission","requiredRole","get","params","role","userRole","rol","roleHierarchy","userLevel","requiredLevel","fallbackError","getDashboardData","participantes","mensualidades","total_users","admin_users","consulta_users","getParticipantes","createParticipante","participanteData","nombre","telefono","_error$response4","_error$response4$data","updateParticipante","deleteParticipante","delete","getMensualidades","createMensualidad","mensualidadData","participante_id","valor","updateMensualidad","getSedes","createSede","sedeData","_error$response5","_error$response5$data","updateSede","deleteSede","_error$response6","_error$response6$data","getUsuarios","createUsuario","usuarioData","_error$response7","_error$response7$data","updateUsuario","deleteUsuario","getAcudientes","filters","arguments","length","undefined","getAcudientesByParticipante","participanteId","createAcudiente","acudienteData","id_participante","numero_documento","nombres","apellidos","_error$response8","_error$response8$data","updateAcudiente","deleteAcudiente","testConnection","results","auth","dashboard","overall","authResponse","connected","errorType","dashboardResponse","authSuccess","dashboardSuccess","isBackendReachable","authCheck","warn","dashboardCheck","getApiConfig","authBaseURL","dashboardBaseURL","hasToken","environment","isConfigured","api"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/services/api.js"],"sourcesContent":["// Servicio API   \nimport axios from 'axios';\n\n// Configuración base de las APIs\n// URLs para servicios separados - FastAPI backend con auth y dashboard\nconst AUTH_API_BASE_URL = process.env.REACT_APP_AUTH_API_BASE_URL ||\n  `${window.location.protocol}//${window.location.hostname}/auth`;\n\nconst DASHBOARD_API_BASE_URL = process.env.REACT_APP_DASHBOARD_API_BASE_URL ||\n  `${window.location.protocol}//${window.location.hostname}/dashboard`;\n\nconsole.log('🔧 AUTH_API_BASE_URL configurada como:', AUTH_API_BASE_URL);\nconsole.log('🔧 DASHBOARD_API_BASE_URL configurada como:', DASHBOARD_API_BASE_URL);\n\n// Additional diagnostic logging\nconsole.log('🔧 API CONFIGURATION DIAGNOSTICS:');\nconsole.log('  - REACT_APP_AUTH_API_BASE_URL:', process.env.REACT_APP_AUTH_API_BASE_URL);\nconsole.log('  - REACT_APP_DASHBOARD_API_BASE_URL:', process.env.REACT_APP_DASHBOARD_API_BASE_URL);\nconsole.log('  - REACT_APP_API_BASE_URL:', process.env.REACT_APP_API_BASE_URL);\nconsole.log('  - REACT_APP_FORMATOS_API_URL:', process.env.REACT_APP_FORMATOS_API_URL);\nconsole.log('  - NODE_ENV:', process.env.NODE_ENV);\nconsole.log('  - Current hostname:', window.location.hostname);\nconsole.log('  - Current protocol:', window.location.protocol);\n\n// Crear instancia de axios para autenticación\nconst authClient = axios.create({\n  baseURL: AUTH_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Crear instancia de axios para dashboard\nconst dashboardClient = axios.create({\n  baseURL: DASHBOARD_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Función helper para configurar interceptors\nconst setupInterceptors = (client, serviceName) => {\n  // Interceptor para agregar token de autenticación\n  client.interceptors.request.use(\n    (config) => {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    },\n    (error) => {\n      console.error(`Error en ${serviceName} request interceptor:`, error);\n      return Promise.reject(error);\n    }\n  );\n\n  // Interceptor para manejar respuestas y errores\n  client.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      const errorInfo = generateErrorMessage(error);\n\n      // Solo log crítico de errores\n      if (errorInfo.isCorsError) {\n        console.error(`CORS ERROR (${serviceName}):`, error.config?.url);\n      } else if (errorInfo.isNetworkError) {\n        console.error(`Network error (${serviceName}):`, error.message);\n      } else if (error.response) {\n        console.error(`HTTP ${error.response.status} (${serviceName}):`, error.response.data);\n      }\n\n      // Manejar errores de autenticación\n      if (error.response?.status === 401 && !errorInfo.isNetworkError) {\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('currentUser');\n        window.location.href = '/login';\n      }\n\n      const enhancedError = {\n        message: errorInfo.message,\n        type: errorInfo.type,\n        status: errorInfo.status,\n        isCorsError: errorInfo.isCorsError,\n        isNetworkError: errorInfo.isNetworkError,\n        suggestions: errorInfo.suggestions,\n        serverMessage: error.response?.data?.message || null,\n        originalError: error,\n        response: error.response\n      };\n\n      return Promise.reject(enhancedError);\n    }\n  );\n};\n\n// Configurar interceptors para ambos clientes\nsetupInterceptors(authClient, 'AUTH');\nsetupInterceptors(dashboardClient, 'DASHBOARD');\n\n// Definición de roles del sistema\nexport const ROLES = {\n  CONSULTA: 'CONSULTA',\n  ADMINISTRADOR: 'ADMINISTRADOR'\n};\n\n// ==================== CORS ERROR DETECTION ====================\n\n/**\n * Detecta si un error de axios es causado por CORS\n * @param {Error} error - El objeto de error de axios\n * @returns {boolean} true si es un error de CORS, false en caso contrario\n */\nexport const detectCorsError = (error) => {\n  // CORS errors typically have these characteristics:\n  // 1. No response object (preflight or actual request blocked)\n  // 2. Network Error message\n  // 3. Error code ERR_NETWORK\n  // 4. Request was made but no response received\n\n  // Check if there's no response (most common CORS indicator)\n  if (!error.response) {\n    // Check for network error patterns\n    const isNetworkError = error.message === 'Network Error' ||\n      error.code === 'ERR_NETWORK';\n\n    // Check if request was configured (means axios tried to send it)\n    const hasRequestConfig = !!error.config;\n\n    // CORS errors occur when:\n    // - There's a network error\n    // - Request was configured and attempted\n    // - No response was received (blocked by browser)\n    if (isNetworkError && hasRequestConfig) {\n      // Additional check: if the URL is cross-origin\n      const requestUrl = error.config?.url || '';\n      const baseURL = error.config?.baseURL || '';\n      const fullUrl = requestUrl.startsWith('http') ? requestUrl : baseURL + requestUrl;\n\n      // If we're making a request to a different origin, it's likely CORS\n      if (fullUrl.startsWith('http')) {\n        const currentOrigin = `${window.location.protocol}//${window.location.host}`;\n        const requestOrigin = new URL(fullUrl).origin;\n\n        // Different origins = likely CORS issue\n        if (currentOrigin !== requestOrigin) {\n          return true;\n        }\n      }\n\n      // Even same origin can have CORS issues in some cases\n      // If it's a network error with no response, assume CORS\n      return true;\n    }\n  }\n\n  // Check for specific CORS-related error messages\n  const errorMessage = error.message?.toLowerCase() || '';\n  const corsKeywords = ['cors', 'cross-origin', 'preflight'];\n\n  if (corsKeywords.some(keyword => errorMessage.includes(keyword))) {\n    return true;\n  }\n\n  // Not a CORS error\n  return false;\n};\n\n// ==================== ERROR MESSAGE GENERATOR ====================\n\n/**\n * Genera mensajes de error amigables y accionables para diferentes tipos de errores\n * @param {Error} error - El objeto de error original\n * @returns {Object} Objeto con mensaje, sugerencias y tipo de error\n */\nexport const generateErrorMessage = (error) => {\n  const errorInfo = {\n    message: '',\n    suggestions: [],\n    type: 'unknown',\n    isNetworkError: false,\n    isCorsError: false,\n    status: error.response?.status || 0,\n    originalError: error\n  };\n\n  // Usar la función de detección de CORS\n  const isCorsError = detectCorsError(error);\n\n  // Detectar si es un error de red (sin respuesta del servidor)\n  const isNetworkError = !error.response && (\n    error.message === 'Network Error' ||\n    error.code === 'ERR_NETWORK' ||\n    error.code === 'ECONNABORTED' ||\n    !error.status\n  );\n\n  if (isCorsError) {\n    // Error de CORS\n    errorInfo.type = 'cors';\n    errorInfo.isCorsError = true;\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'No se puede conectar con el servidor debido a restricciones de CORS';\n    errorInfo.suggestions = [\n      '🔧 Verifica que el servidor backend esté ejecutándose en http://localhost:8080',\n      '🔧 Asegúrate de que el backend tenga configurado CORS correctamente',\n      '🔍 Revisa la consola del navegador para ver detalles específicos del error CORS',\n      '⚙️ Si eres desarrollador, verifica la configuración de CORS en el backend (WebMvcConfigurer o SecurityFilterChain)',\n      '🔄 Intenta reiniciar tanto el frontend como el backend',\n      '📝 Verifica que el backend permita el origen: ' + window.location.origin\n    ];\n  } else if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\n    // Error de timeout\n    errorInfo.type = 'timeout';\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'La solicitud al servidor tardó demasiado tiempo (timeout después de 30 segundos)';\n    errorInfo.suggestions = [\n      '🌐 Verifica tu conexión a internet',\n      '⏱️ El servidor puede estar experimentando alta carga o procesando una operación pesada',\n      '🔄 Intenta nuevamente en unos momentos',\n      '📊 Si trabajas con grandes volúmenes de datos, considera filtrar o paginar los resultados',\n      '🔧 Si el problema persiste, contacta al administrador del sistema'\n    ];\n  } else if (isNetworkError) {\n    // Error de red general (backend no disponible)\n    errorInfo.type = 'network';\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'No se puede conectar con el servidor - Backend no disponible';\n    errorInfo.suggestions = [\n      '🚀 Verifica que el servidor backend esté ejecutándose en ' + (error.config?.baseURL || 'http://localhost:8080'),\n      '🌐 Comprueba tu conexión a internet',\n      '🔍 Asegúrate de que la URL del servidor sea correcta',\n      '🛡️ Verifica que no haya un firewall bloqueando la conexión',\n      '🔧 Si eres desarrollador, inicia el backend con: ./mvnw spring-boot:run',\n      '📞 Si el problema persiste, contacta al administrador del sistema'\n    ];\n  } else if (error.response) {\n    // Error HTTP con respuesta del servidor\n    const status = error.response.status;\n\n    switch (status) {\n      case 400:\n        errorInfo.type = 'validation';\n        errorInfo.message = 'Los datos enviados no son válidos (Error 400)';\n        errorInfo.suggestions = [\n          '📝 Verifica que todos los campos requeridos estén completos',\n          '✅ Asegúrate de que los datos tengan el formato correcto (emails, teléfonos, fechas, etc.)',\n          '🔍 Revisa los mensajes de validación específicos del servidor',\n          '📋 Verifica que no haya campos con valores inválidos o fuera de rango'\n        ];\n        break;\n\n      case 401:\n        errorInfo.type = 'authentication';\n        errorInfo.message = 'No estás autenticado o tu sesión ha expirado (Error 401)';\n        errorInfo.suggestions = [\n          '🔐 Inicia sesión nuevamente',\n          '✅ Verifica que tus credenciales sean correctas',\n          '⏱️ Tu sesión puede haber expirado por inactividad',\n          '🔄 Intenta cerrar sesión y volver a iniciar sesión'\n        ];\n        break;\n\n      case 403:\n        errorInfo.type = 'authorization';\n        errorInfo.message = 'No tienes permisos para realizar esta acción (Error 403)';\n        errorInfo.suggestions = [\n          '👤 Contacta al administrador para solicitar los permisos necesarios',\n          '🔑 Verifica que tu cuenta tenga el rol adecuado',\n          '⚙️ Puede que necesites permisos de ADMINISTRADOR para esta operación',\n          '📋 Revisa qué acciones están permitidas para tu rol actual'\n        ];\n        break;\n\n      case 404:\n        errorInfo.type = 'notFound';\n        errorInfo.message = 'El recurso solicitado no fue encontrado (Error 404)';\n        errorInfo.suggestions = [\n          '🔍 Verifica que el recurso exista en el sistema',\n          '🗑️ Puede que el recurso haya sido eliminado recientemente',\n          '🔄 Intenta refrescar la página y volver a intentar',\n          '📋 Verifica que el ID o identificador sea correcto'\n        ];\n        break;\n\n      case 409:\n        errorInfo.type = 'conflict';\n        errorInfo.message = 'Ya existe un recurso con estos datos (Error 409)';\n        errorInfo.suggestions = [\n          '🔍 Verifica que no estés duplicando información',\n          '📝 Puede que ya exista un registro con el mismo identificador único',\n          '✏️ Intenta con datos diferentes o actualiza el registro existente',\n          '🔄 Refresca la lista para ver los datos actuales'\n        ];\n        break;\n\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        errorInfo.type = 'serverError';\n        errorInfo.message = `Error interno del servidor (Error ${status})`;\n        errorInfo.suggestions = [\n          '🔥 El servidor está experimentando problemas técnicos',\n          '⏱️ Intenta nuevamente en unos momentos',\n          '🔧 Si el problema persiste, contacta al administrador del sistema',\n          '📝 Este error ha sido registrado automáticamente para su revisión',\n          '💾 Verifica que la base de datos esté disponible (si eres administrador)'\n        ];\n        break;\n\n      default:\n        errorInfo.type = 'http';\n        errorInfo.message = `Error del servidor (código ${status})`;\n        errorInfo.suggestions = [\n          '❌ Ocurrió un error inesperado en el servidor',\n          '🔄 Intenta nuevamente',\n          '📞 Si el problema persiste, contacta al soporte técnico',\n          '🔍 Código de error: ' + status\n        ];\n    }\n\n    // Agregar mensaje específico del servidor si está disponible\n    if (error.response.data?.message) {\n      errorInfo.serverMessage = error.response.data.message;\n    }\n  } else {\n    // Error desconocido\n    errorInfo.type = 'unknown';\n    errorInfo.message = 'Ocurrió un error inesperado';\n    errorInfo.suggestions = [\n      '🔄 Intenta refrescar la página',\n      '🌐 Verifica tu conexión a internet',\n      '💾 Limpia la caché del navegador si el problema persiste',\n      '🔧 Intenta cerrar y volver a abrir la aplicación',\n      '📞 Si el problema persiste, contacta al soporte técnico con detalles del error'\n    ];\n  }\n\n  return errorInfo;\n};\n\nclass ApiService {\n  // ==================== AUTENTICACIÓN ====================\n\n  async login(email, password) {\n    console.log('🔐 Starting login request...');\n    console.log('📧 Email:', email);\n    console.log('🌐 Auth API URL:', AUTH_API_BASE_URL);\n    console.log('🔗 Full login URL:', AUTH_API_BASE_URL + '/login');\n\n    const startTime = Date.now();\n\n    try {\n      console.log('📤 Sending login request...');\n      const response = await authClient.post('/login', { email, password });\n      const responseTime = Date.now() - startTime;\n      console.log('✅ Login request completed in', responseTime, 'ms');\n      console.log('📊 Response status:', response.status);\n\n      // FastAPI returns data directly in response.data, not nested\n      const responseData = response.data;\n      console.log('📦 Response data:', responseData);\n\n      // Check for error in FastAPI response format\n      if (responseData.error) {\n        console.error('❌ Server error in response:', responseData.error);\n        throw new Error(responseData.error.message || 'Error en el servidor');\n      }\n\n      if (!responseData.data) {\n        console.error('❌ Invalid server response: no data field');\n        throw new Error('Respuesta del servidor inválida');\n      }\n\n      const { token, user } = responseData.data;\n      console.log('🔑 Token received:', !!token);\n      console.log('👤 User received:', !!user);\n\n      if (!token || !user) {\n        console.error('❌ Incomplete server response - missing token or user');\n        throw new Error('Respuesta del servidor incompleta');\n      }\n\n      console.log('💾 Storing auth data in localStorage...');\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n\n      console.log('🎉 Login successful!');\n      return { data: { user, token }, error: null };\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      console.error('💥 Login failed after', responseTime, 'ms');\n      console.error('❌ Error details:', error);\n\n      if (error.response) {\n        console.error('📊 HTTP Error Response:');\n        console.error('   Status:', error.response.status);\n        console.error('   Status Text:', error.response.statusText);\n        console.error('   Headers:', error.response.headers);\n        console.error('   Data:', error.response.data);\n\n        // Handle FastAPI error format\n        const serverMessage = error.response.data?.detail ||\n                            error.response.data?.message ||\n                            error.response.data?.error?.message;\n        throw new Error(serverMessage || 'Error del servidor');\n      } else if (error.request) {\n        console.error('🌐 Network Error - No response received:');\n        console.error('   Request config:', error.config);\n        console.error('   Timeout was set to:', error.config?.timeout, 'ms');\n        throw new Error('No se pudo conectar con el servidor. Verifica que el backend esté corriendo.');\n      } else {\n        console.error('⚠️ Unexpected error:', error.message);\n        throw error;\n      }\n    }\n  }\n\n  // Cerrar sesión\n  async logout() {\n    try {\n      await authClient.post('/logout');\n\n      // Limpiar localStorage\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n\n      return { success: true, error: null };\n    } catch (error) {\n      console.error('Error en logout:', error);\n      // Limpiar localStorage aunque falle la petición\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      return { success: true, error: null };\n    }\n  }\n\n\n  // Restablecer contraseña\n  async resetPassword(email) {\n    try {\n      const response = await authClient.post('/reset-password', { email });\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error en reset password:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al restablecer contraseña'\n        }\n      };\n    }\n  }\n\n  async getCurrentUser() {\n    try {\n      const storedUser = localStorage.getItem('currentUser');\n      const storedToken = localStorage.getItem('authToken');\n\n      if (storedUser && storedToken) {\n        try {\n          const user = JSON.parse(storedUser);\n\n          if (user && user.email && user.id) {\n            return { data: user, error: null };\n          } else {\n            localStorage.removeItem('currentUser');\n            localStorage.removeItem('authToken');\n            return { data: null, error: null };\n          }\n        } catch (parseError) {\n          console.error('Error parseando usuario:', parseError);\n          localStorage.removeItem('currentUser');\n          localStorage.removeItem('authToken');\n          return { data: null, error: null };\n        }\n      }\n\n      return { data: null, error: null };\n    } catch (error) {\n      console.error('Error obteniendo usuario actual:', error);\n      return { data: null, error };\n    }\n  }\n\n  // Actualizar perfil de usuario\n  async updateProfile(profileData) {\n    try {\n      const response = await authClient.put('/profile', profileData);\n\n      // Actualizar usuario en localStorage\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n      const updatedUser = { ...currentUser, ...response.data };\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando perfil:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar perfil'\n        }\n      };\n    }\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    try {\n      // Consultar endpoint real en backend FastAPI\n      const response = await authClient.get('/permission', {\n        params: { role: requiredRole }\n      });\n\n      return response.data.hasPermission || false;\n    } catch (error) {\n      console.error('Error verificando permisos:', error);\n      // Fallback temporal a verificación local si el endpoint no existe\n      try {\n        const { data: user } = await this.getCurrentUser();\n\n        if (!user) return false;\n\n        const userRole = user.rol || user.role || ROLES.CONSULTA;\n\n        // Jerarquía de roles: ADMINISTRADOR > CONSULTA\n        const roleHierarchy = {\n          [ROLES.ADMINISTRADOR]: 2,\n          [ROLES.CONSULTA]: 1\n        };\n\n        const userLevel = roleHierarchy[userRole] || 1;\n        const requiredLevel = roleHierarchy[requiredRole] || 1;\n\n        return userLevel >= requiredLevel;\n      } catch (fallbackError) {\n        console.error('Fallback también falló:', fallbackError);\n        return false;\n      }\n    }\n  }\n\n  // ==================== DASHBOARD ====================\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    try {\n      const response = await dashboardClient.get('/stats');\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo datos del dashboard:', error);\n      return {\n        data: { participantes: 0, mensualidades: 0, total_users: 0, admin_users: 0, consulta_users: 0 },\n        error\n      };\n    }\n  }\n\n  // ==================== PARTICIPANTES ====================\n\n  // Obtener participantes\n  async getParticipantes() {\n    try {\n      const response = await dashboardClient.get('/participantes');\n      return { data: response.data || [], error: null };\n    } catch (error) {\n      console.error('Error obteniendo participantes:', error);\n      return {\n        data: [],\n        error: { message: 'Error al cargar participantes' }\n      };\n    }\n  }\n\n  async createParticipante(participanteData) {\n    try {\n      if (!participanteData.nombre || !participanteData.telefono) {\n        return {\n          data: null,\n          error: { message: 'Nombre y teléfono son campos obligatorios' }\n        };\n      }\n\n      const response = await dashboardClient.post('/participantes', participanteData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error creando participante:', error);\n      return {\n        data: null,\n        error: {\n          message: error.response?.data?.message || error.message || 'Error al crear participante'\n        }\n      };\n    }\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    try {\n      if (!id) {\n        return {\n          data: null,\n          error: { message: 'ID de participante requerido' }\n        };\n      }\n\n      const response = await dashboardClient.put(`/participantes/${id}`, participanteData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando participante:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar participante'\n        }\n      };\n    }\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    try {\n      await dashboardClient.delete(`/participantes/${id}`);\n      return { error: null };\n    } catch (error) {\n      console.error('Error eliminando participante:', error);\n      return {\n        error: {\n          message: error.message || 'Error al eliminar participante'\n        }\n      };\n    }\n  }\n\n  // ==================== MENSUALIDADES ====================\n\n  // Obtener mensualidades\n  async getMensualidades() {\n    try {\n      const response = await dashboardClient.get('/mensualidades');\n      return { data: response.data || [], error: null };\n    } catch (error) {\n      console.error('Error obteniendo mensualidades:', error);\n      return {\n        data: [],\n        error: { message: 'Error al cargar mensualidades' }\n      };\n    }\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    try {\n      if (!mensualidadData.participante_id || !mensualidadData.valor) {\n        return {\n          data: null,\n          error: { message: 'Participante y valor son campos obligatorios' }\n        };\n      }\n\n      const response = await dashboardClient.post('/mensualidades', mensualidadData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error creando mensualidad:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al crear mensualidad'\n        }\n      };\n    }\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    try {\n      if (!id) {\n        return {\n          data: null,\n          error: { message: 'ID de mensualidad requerido' }\n        };\n      }\n\n      const response = await dashboardClient.put(`/mensualidades/${id}`, mensualidadData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando mensualidad:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar mensualidad'\n        }\n      };\n    }\n  }\n\n  // ==================== SEDES ====================\n\n  // Obtener sedes\n  async getSedes() {\n    try {\n      const response = await dashboardClient.get('/sedes');\n      return { data: response.data || [], error: null };\n    } catch (error) {\n      console.error('Error obteniendo sedes:', error);\n      return {\n        data: [],\n        error: { message: 'Error al cargar sedes' }\n      };\n    }\n  }\n\n  async createSede(sedeData) {\n    try {\n      const response = await dashboardClient.post('/sedes', sedeData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error creando sede:', error);\n      return {\n        data: null,\n        error: {\n          message: error.response?.data?.message || error.message || 'Error al crear sede'\n        }\n      };\n    }\n  }\n\n  // Actualizar sede\n  async updateSede(id, sedeData) {\n    try {\n      if (!id) {\n        return {\n          data: null,\n          error: { message: 'ID de sede requerido' }\n        };\n      }\n\n      const response = await dashboardClient.put(`/sedes/${id}`, sedeData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando sede:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar sede'\n        }\n      };\n    }\n  }\n\n  // Eliminar sede\n  async deleteSede(id) {\n    try {\n      if (!id) {\n        return {\n          error: { message: 'ID de sede requerido' }\n        };\n      }\n\n      await dashboardClient.delete(`/sedes/${id}`);\n      return { error: null };\n    } catch (error) {\n      console.error('Error eliminando sede:', error);\n      return {\n        error: {\n          message: error.response?.data?.message || error.message || 'Error al eliminar sede'\n        }\n      };\n    }\n  }\n\n  // ==================== USUARIOS ====================\n\n  /**\n   * Obtener lista de usuarios\n   * @returns {Promise<{data: Array, error: Object|null}>}\n   */\n  async getUsuarios() {\n    try {\n      const response = await dashboardClient.get('/usuarios');\n      return { data: response.data || [], error: null };\n    } catch (error) {\n      console.error('Error obteniendo usuarios:', error);\n      return {\n        data: [],\n        error: { message: 'Error al cargar usuarios' }\n      };\n    }\n  }\n\n  /**\n   * Crear nuevo usuario\n   * @param {Object} usuarioData - {email, password, rol}\n   * @returns {Promise<{data: Object, error: Object|null}>}\n   */\n  async createUsuario(usuarioData) {\n    try {\n      if (!usuarioData.email || !usuarioData.password || !usuarioData.rol) {\n        return {\n          data: null,\n          error: { message: 'Email, contraseña y rol son campos obligatorios' }\n        };\n      }\n\n      const response = await dashboardClient.post('/usuarios', usuarioData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error creando usuario:', error);\n      return {\n        data: null,\n        error: {\n          message: error.response?.data?.message || error.message || 'Error al crear usuario'\n        }\n      };\n    }\n  }\n\n  /**\n   * Actualizar usuario existente\n   * @param {number} id - ID del usuario\n   * @param {Object} usuarioData - Datos a actualizar\n   * @returns {Promise<{data: Object, error: Object|null}>}\n   */\n  async updateUsuario(id, usuarioData) {\n    try {\n      if (!id) {\n        return {\n          data: null,\n          error: { message: 'ID de usuario requerido' }\n        };\n      }\n\n      const response = await dashboardClient.put(`/usuarios/${id}`, usuarioData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando usuario:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar usuario'\n        }\n      };\n    }\n  }\n\n  /**\n   * Eliminar usuario\n   * @param {number} id - ID del usuario\n   * @returns {Promise<{error: Object|null}>}\n   */\n  async deleteUsuario(id) {\n    try {\n      if (!id) {\n        return {\n          error: { message: 'ID de usuario requerido' }\n        };\n      }\n\n      await dashboardClient.delete(`/usuarios/${id}`);\n      return { error: null };\n    } catch (error) {\n      console.error('Error eliminando usuario:', error);\n      return {\n        error: {\n          message: error.message || 'Error al eliminar usuario'\n        }\n      };\n    }\n  }\n\n  // ==================== ACUDIENTES ====================\n\n  /**\n   * Obtener lista de acudientes\n   * @param {Object} filters - Filtros opcionales {participante_id}\n   * @returns {Promise<{data: Array, error: Object|null}>}\n   */\n  async getAcudientes(filters = {}) {\n    try {\n      const response = await dashboardClient.get('/acudientes', { params: filters });\n      return { data: response.data.data || [], error: null };\n    } catch (error) {\n      console.error('Error obteniendo acudientes:', error);\n      return {\n        data: [],\n        error: { message: 'Error al cargar acudientes' }\n      };\n    }\n  }\n\n  /**\n   * Obtener acudientes de un participante específico\n   * @param {number} participanteId - ID del participante\n   * @returns {Promise<{data: Array, error: Object|null}>}\n   */\n  async getAcudientesByParticipante(participanteId) {\n    try {\n      if (!participanteId) {\n        return {\n          data: [],\n          error: { message: 'ID de participante requerido' }\n        };\n      }\n\n      const response = await dashboardClient.get(`/participantes/${participanteId}/acudientes`);\n      return { data: response.data || [], error: null };\n    } catch (error) {\n      console.error('Error obteniendo acudientes del participante:', error);\n      return {\n        data: [],\n        error: { message: 'Error al cargar acudientes del participante' }\n      };\n    }\n  }\n\n  /**\n   * Crear nuevo acudiente\n   * @param {Object} acudienteData - Datos del acudiente\n   * @returns {Promise<{data: Object, error: Object|null}>}\n   */\n  async createAcudiente(acudienteData) {\n    try {\n      if (!acudienteData.id_participante || !acudienteData.numero_documento ||\n          !acudienteData.nombres || !acudienteData.apellidos) {\n        return {\n          data: null,\n          error: { message: 'Participante, documento, nombres y apellidos son campos obligatorios' }\n        };\n      }\n\n      const response = await dashboardClient.post('/acudientes', acudienteData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error creando acudiente:', error);\n      return {\n        data: null,\n        error: {\n          message: error.response?.data?.message || error.message || 'Error al crear acudiente'\n        }\n      };\n    }\n  }\n\n  /**\n   * Actualizar acudiente existente\n   * @param {number} id - ID del acudiente\n   * @param {Object} acudienteData - Datos a actualizar\n   * @returns {Promise<{data: Object, error: Object|null}>}\n   */\n  async updateAcudiente(id, acudienteData) {\n    try {\n      if (!id) {\n        return {\n          data: null,\n          error: { message: 'ID de acudiente requerido' }\n        };\n      }\n\n      const response = await dashboardClient.put(`/acudientes/${id}`, acudienteData);\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando acudiente:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar acudiente'\n        }\n      };\n    }\n  }\n\n  /**\n   * Eliminar acudiente\n   * @param {number} id - ID del acudiente\n   * @returns {Promise<{error: Object|null}>}\n   */\n  async deleteAcudiente(id) {\n    try {\n      if (!id) {\n        return {\n          error: { message: 'ID de acudiente requerido' }\n        };\n      }\n\n      await dashboardClient.delete(`/acudientes/${id}`);\n      return { error: null };\n    } catch (error) {\n      console.error('Error eliminando acudiente:', error);\n      return {\n        error: {\n          message: error.message || 'Error al eliminar acudiente'\n        }\n      };\n    }\n  }\n\n  // ==================== UTILIDADES ====================\n\n  /**\n   * Verifica la conexión con ambos backends y proporciona estado detallado\n   * @returns {Promise<Object>} Objeto con información detallada de la conexión\n   */\n  async testConnection() {\n    const startTime = Date.now();\n    const results = {\n      auth: null,\n      dashboard: null,\n      overall: { success: false, message: 'Conexión fallida' }\n    };\n\n    // Test auth service\n    try {\n      const authResponse = await authClient.get('/health');\n      results.auth = {\n        success: true,\n        connected: true,\n        responseTime: Date.now() - startTime,\n        status: authResponse.status,\n        baseURL: AUTH_API_BASE_URL,\n        data: authResponse.data,\n        message: 'Conexión exitosa con auth service'\n      };\n    } catch (error) {\n      const errorInfo = generateErrorMessage(error);\n      results.auth = {\n        success: false,\n        connected: false,\n        responseTime: Date.now() - startTime,\n        baseURL: AUTH_API_BASE_URL,\n        error: error.message || 'Error de conexión',\n        errorType: errorInfo.type,\n        isCorsError: errorInfo.isCorsError,\n        isNetworkError: errorInfo.isNetworkError,\n        suggestions: errorInfo.suggestions,\n        message: errorInfo.message\n      };\n    }\n\n    // Test dashboard service\n    try {\n      const dashboardResponse = await dashboardClient.get('/health');\n      results.dashboard = {\n        success: true,\n        connected: true,\n        responseTime: Date.now() - startTime,\n        status: dashboardResponse.status,\n        baseURL: DASHBOARD_API_BASE_URL,\n        data: dashboardResponse.data,\n        message: 'Conexión exitosa con dashboard service'\n      };\n    } catch (error) {\n      const errorInfo = generateErrorMessage(error);\n      results.dashboard = {\n        success: false,\n        connected: false,\n        responseTime: Date.now() - startTime,\n        baseURL: DASHBOARD_API_BASE_URL,\n        error: error.message || 'Error de conexión',\n        errorType: errorInfo.type,\n        isCorsError: errorInfo.isCorsError,\n        isNetworkError: errorInfo.isNetworkError,\n        suggestions: errorInfo.suggestions,\n        message: errorInfo.message\n      };\n    }\n\n    // Overall result\n    const authSuccess = results.auth.success;\n    const dashboardSuccess = results.dashboard.success;\n\n    if (authSuccess && dashboardSuccess) {\n      results.overall = {\n        success: true,\n        message: 'Conexión exitosa con ambos servicios'\n      };\n    } else if (authSuccess) {\n      results.overall = {\n        success: false,\n        message: 'Auth service OK, pero dashboard service falló'\n      };\n    } else if (dashboardSuccess) {\n      results.overall = {\n        success: false,\n        message: 'Dashboard service OK, pero auth service falló'\n      };\n    } else {\n      results.overall = {\n        success: false,\n        message: 'Ambos servicios no están disponibles'\n      };\n    }\n\n    return results;\n  }\n\n  /**\n   * Verifica si los backends están disponibles antes de operaciones críticas\n   * @param {number} timeout - Timeout en milisegundos (por defecto 5000ms)\n   * @returns {Promise<Object>} Objeto con estado de ambos servicios\n   */\n  async isBackendReachable(timeout = 5000) {\n    const results = { auth: false, dashboard: false };\n\n    // Check auth service\n    try {\n      const authCheck = axios.create({\n        baseURL: AUTH_API_BASE_URL,\n        timeout: timeout,\n        headers: { 'Accept': 'application/json' }\n      });\n      await authCheck.get('/health');\n      results.auth = true;\n    } catch (error) {\n      console.warn('Auth service no disponible:', error.message);\n    }\n\n    // Check dashboard service\n    try {\n      const dashboardCheck = axios.create({\n        baseURL: DASHBOARD_API_BASE_URL,\n        timeout: timeout,\n        headers: { 'Accept': 'application/json' }\n      });\n      await dashboardCheck.get('/health');\n      results.dashboard = true;\n    } catch (error) {\n      console.warn('Dashboard service no disponible:', error.message);\n    }\n\n    return results;\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return {\n      authBaseURL: AUTH_API_BASE_URL,\n      dashboardBaseURL: DASHBOARD_API_BASE_URL,\n      hasToken: !!localStorage.getItem('authToken'),\n      environment: process.env.NODE_ENV,\n      isConfigured: !!(AUTH_API_BASE_URL && DASHBOARD_API_BASE_URL)\n    };\n  }\n}\n\n// Exportar instancia única del servicio\nexport const api = new ApiService();\nexport default api;\n\n// Exportar clientes axios para uso directo si es necesario\nexport { authClient, dashboardClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}