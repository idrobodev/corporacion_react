{"ast":null,"code":"import{useState,useEffect}from'react';/**\n * useMediaQuery hook - Detect media query matches with window.matchMedia\n * \n * @param {string} query - Media query string (e.g., '(min-width: 768px)')\n * @returns {boolean} - Whether the media query matches\n */const useMediaQuery=query=>{const[matches,setMatches]=useState(()=>{// Check if window is available (SSR safety)\nif(typeof window!=='undefined'){return window.matchMedia(query).matches;}return false;});useEffect(()=>{// Check if window is available (SSR safety)\nif(typeof window==='undefined'){return;}const mediaQuery=window.matchMedia(query);// Update state with current match status\nsetMatches(mediaQuery.matches);// Event handler for media query changes\nconst handleChange=event=>{setMatches(event.matches);};// Add event listener\n// Use addEventListener for modern browsers, addListener for older ones\nif(mediaQuery.addEventListener){mediaQuery.addEventListener('change',handleChange);}else{// Fallback for older browsers\nmediaQuery.addListener(handleChange);}// Cleanup function to remove event listener\nreturn()=>{if(mediaQuery.removeEventListener){mediaQuery.removeEventListener('change',handleChange);}else{// Fallback for older browsers\nmediaQuery.removeListener(handleChange);}};},[query]);return matches;};/**\n * Common breakpoint hooks based on Tailwind CSS breakpoints\n *//**\n * useIsMobile - Detect if viewport is mobile (< 768px)\n * @returns {boolean} - True if viewport width is less than 768px\n */export const useIsMobile=()=>{return useMediaQuery('(max-width: 767px)');};/**\n * useIsTablet - Detect if viewport is tablet (768px - 1023px)\n * @returns {boolean} - True if viewport width is between 768px and 1023px\n */export const useIsTablet=()=>{return useMediaQuery('(min-width: 768px) and (max-width: 1023px)');};/**\n * useIsDesktop - Detect if viewport is desktop (>= 1024px)\n * @returns {boolean} - True if viewport width is 1024px or greater\n */export const useIsDesktop=()=>{return useMediaQuery('(min-width: 1024px)');};/**\n * useIsMobileOrTablet - Detect if viewport is mobile or tablet (< 1024px)\n * @returns {boolean} - True if viewport width is less than 1024px\n */export const useIsMobileOrTablet=()=>{return useMediaQuery('(max-width: 1023px)');};/**\n * useIsSmallMobile - Detect if viewport is small mobile (< 640px)\n * @returns {boolean} - True if viewport width is less than 640px\n */export const useIsSmallMobile=()=>{return useMediaQuery('(max-width: 639px)');};/**\n * useIsLargeDesktop - Detect if viewport is large desktop (>= 1280px)\n * @returns {boolean} - True if viewport width is 1280px or greater\n */export const useIsLargeDesktop=()=>{return useMediaQuery('(min-width: 1280px)');};/**\n * useBreakpoints - Get all breakpoint states at once\n * Useful when you need to check multiple breakpoints\n * \n * @returns {Object} Object with boolean properties for each breakpoint\n * \n * @example\n * const { isMobile, isTablet, isDesktop } = useBreakpoints();\n * if (isMobile) {\n *   // Render mobile view\n * }\n */export const useBreakpoints=()=>{const isMobile=useIsMobile();const isTablet=useIsTablet();const isDesktop=useIsDesktop();const isSmallMobile=useIsSmallMobile();const isLargeDesktop=useIsLargeDesktop();return{isMobile,isTablet,isDesktop,isSmallMobile,isLargeDesktop,// Convenience properties\nisMobileOrTablet:isMobile||isTablet,isTabletOrDesktop:isTablet||isDesktop};};export default useMediaQuery;","map":{"version":3,"names":["useState","useEffect","useMediaQuery","query","matches","setMatches","window","matchMedia","mediaQuery","handleChange","event","addEventListener","addListener","removeEventListener","removeListener","useIsMobile","useIsTablet","useIsDesktop","useIsMobileOrTablet","useIsSmallMobile","useIsLargeDesktop","useBreakpoints","isMobile","isTablet","isDesktop","isSmallMobile","isLargeDesktop","isMobileOrTablet","isTabletOrDesktop"],"sources":["/Users/todoporunalma/Desktop/Corporacion/coptua_react/src/shared/hooks/useMediaQuery.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * useMediaQuery hook - Detect media query matches with window.matchMedia\n * \n * @param {string} query - Media query string (e.g., '(min-width: 768px)')\n * @returns {boolean} - Whether the media query matches\n */\nconst useMediaQuery = (query) => {\n  const [matches, setMatches] = useState(() => {\n    // Check if window is available (SSR safety)\n    if (typeof window !== 'undefined') {\n      return window.matchMedia(query).matches;\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    // Check if window is available (SSR safety)\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const mediaQuery = window.matchMedia(query);\n    \n    // Update state with current match status\n    setMatches(mediaQuery.matches);\n\n    // Event handler for media query changes\n    const handleChange = (event) => {\n      setMatches(event.matches);\n    };\n\n    // Add event listener\n    // Use addEventListener for modern browsers, addListener for older ones\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n    }\n\n    // Cleanup function to remove event listener\n    return () => {\n      if (mediaQuery.removeEventListener) {\n        mediaQuery.removeEventListener('change', handleChange);\n      } else {\n        // Fallback for older browsers\n        mediaQuery.removeListener(handleChange);\n      }\n    };\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Common breakpoint hooks based on Tailwind CSS breakpoints\n */\n\n/**\n * useIsMobile - Detect if viewport is mobile (< 768px)\n * @returns {boolean} - True if viewport width is less than 768px\n */\nexport const useIsMobile = () => {\n  return useMediaQuery('(max-width: 767px)');\n};\n\n/**\n * useIsTablet - Detect if viewport is tablet (768px - 1023px)\n * @returns {boolean} - True if viewport width is between 768px and 1023px\n */\nexport const useIsTablet = () => {\n  return useMediaQuery('(min-width: 768px) and (max-width: 1023px)');\n};\n\n/**\n * useIsDesktop - Detect if viewport is desktop (>= 1024px)\n * @returns {boolean} - True if viewport width is 1024px or greater\n */\nexport const useIsDesktop = () => {\n  return useMediaQuery('(min-width: 1024px)');\n};\n\n/**\n * useIsMobileOrTablet - Detect if viewport is mobile or tablet (< 1024px)\n * @returns {boolean} - True if viewport width is less than 1024px\n */\nexport const useIsMobileOrTablet = () => {\n  return useMediaQuery('(max-width: 1023px)');\n};\n\n/**\n * useIsSmallMobile - Detect if viewport is small mobile (< 640px)\n * @returns {boolean} - True if viewport width is less than 640px\n */\nexport const useIsSmallMobile = () => {\n  return useMediaQuery('(max-width: 639px)');\n};\n\n/**\n * useIsLargeDesktop - Detect if viewport is large desktop (>= 1280px)\n * @returns {boolean} - True if viewport width is 1280px or greater\n */\nexport const useIsLargeDesktop = () => {\n  return useMediaQuery('(min-width: 1280px)');\n};\n\n/**\n * useBreakpoints - Get all breakpoint states at once\n * Useful when you need to check multiple breakpoints\n * \n * @returns {Object} Object with boolean properties for each breakpoint\n * \n * @example\n * const { isMobile, isTablet, isDesktop } = useBreakpoints();\n * if (isMobile) {\n *   // Render mobile view\n * }\n */\nexport const useBreakpoints = () => {\n  const isMobile = useIsMobile();\n  const isTablet = useIsTablet();\n  const isDesktop = useIsDesktop();\n  const isSmallMobile = useIsSmallMobile();\n  const isLargeDesktop = useIsLargeDesktop();\n\n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isSmallMobile,\n    isLargeDesktop,\n    // Convenience properties\n    isMobileOrTablet: isMobile || isTablet,\n    isTabletOrDesktop: isTablet || isDesktop,\n  };\n};\n\nexport default useMediaQuery;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}