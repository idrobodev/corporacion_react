{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n/**\n * useMediaQuery hook - Detect media query matches with window.matchMedia\n * \n * @param {string} query - Media query string (e.g., '(min-width: 768px)')\n * @returns {boolean} - Whether the media query matches\n */\nconst useMediaQuery = query => {\n  _s();\n  const [matches, setMatches] = useState(() => {\n    // Check if window is available (SSR safety)\n    if (typeof window !== 'undefined') {\n      return window.matchMedia(query).matches;\n    }\n    return false;\n  });\n  useEffect(() => {\n    // Check if window is available (SSR safety)\n    if (typeof window === 'undefined') {\n      return;\n    }\n    const mediaQuery = window.matchMedia(query);\n\n    // Update state with current match status\n    setMatches(mediaQuery.matches);\n\n    // Event handler for media query changes\n    const handleChange = event => {\n      setMatches(event.matches);\n    };\n\n    // Add event listener\n    // Use addEventListener for modern browsers, addListener for older ones\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n    }\n\n    // Cleanup function to remove event listener\n    return () => {\n      if (mediaQuery.removeEventListener) {\n        mediaQuery.removeEventListener('change', handleChange);\n      } else {\n        // Fallback for older browsers\n        mediaQuery.removeListener(handleChange);\n      }\n    };\n  }, [query]);\n  return matches;\n};\n\n/**\n * Common breakpoint hooks based on Tailwind CSS breakpoints\n */\n\n/**\n * useIsMobile - Detect if viewport is mobile (< 768px)\n * @returns {boolean} - True if viewport width is less than 768px\n */\n_s(useMediaQuery, \"ECJhHbKYst5Fan3WtU3f0YzJJjo=\");\nexport const useIsMobile = () => {\n  _s2();\n  return useMediaQuery('(max-width: 767px)');\n};\n\n/**\n * useIsTablet - Detect if viewport is tablet (768px - 1023px)\n * @returns {boolean} - True if viewport width is between 768px and 1023px\n */\n_s2(useIsMobile, \"AGUsWXV/IGWEYGrGyhqugaEb9zc=\", false, function () {\n  return [useMediaQuery];\n});\nexport const useIsTablet = () => {\n  _s3();\n  return useMediaQuery('(min-width: 768px) and (max-width: 1023px)');\n};\n\n/**\n * useIsDesktop - Detect if viewport is desktop (>= 1024px)\n * @returns {boolean} - True if viewport width is 1024px or greater\n */\n_s3(useIsTablet, \"AGUsWXV/IGWEYGrGyhqugaEb9zc=\", false, function () {\n  return [useMediaQuery];\n});\nexport const useIsDesktop = () => {\n  _s4();\n  return useMediaQuery('(min-width: 1024px)');\n};\n\n/**\n * useIsMobileOrTablet - Detect if viewport is mobile or tablet (< 1024px)\n * @returns {boolean} - True if viewport width is less than 1024px\n */\n_s4(useIsDesktop, \"AGUsWXV/IGWEYGrGyhqugaEb9zc=\", false, function () {\n  return [useMediaQuery];\n});\nexport const useIsMobileOrTablet = () => {\n  _s5();\n  return useMediaQuery('(max-width: 1023px)');\n};\n\n/**\n * useIsSmallMobile - Detect if viewport is small mobile (< 640px)\n * @returns {boolean} - True if viewport width is less than 640px\n */\n_s5(useIsMobileOrTablet, \"AGUsWXV/IGWEYGrGyhqugaEb9zc=\", false, function () {\n  return [useMediaQuery];\n});\nexport const useIsSmallMobile = () => {\n  _s6();\n  return useMediaQuery('(max-width: 639px)');\n};\n\n/**\n * useIsLargeDesktop - Detect if viewport is large desktop (>= 1280px)\n * @returns {boolean} - True if viewport width is 1280px or greater\n */\n_s6(useIsSmallMobile, \"AGUsWXV/IGWEYGrGyhqugaEb9zc=\", false, function () {\n  return [useMediaQuery];\n});\nexport const useIsLargeDesktop = () => {\n  _s7();\n  return useMediaQuery('(min-width: 1280px)');\n};\n\n/**\n * useBreakpoints - Get all breakpoint states at once\n * Useful when you need to check multiple breakpoints\n * \n * @returns {Object} Object with boolean properties for each breakpoint\n * \n * @example\n * const { isMobile, isTablet, isDesktop } = useBreakpoints();\n * if (isMobile) {\n *   // Render mobile view\n * }\n */\n_s7(useIsLargeDesktop, \"AGUsWXV/IGWEYGrGyhqugaEb9zc=\", false, function () {\n  return [useMediaQuery];\n});\nexport const useBreakpoints = () => {\n  _s8();\n  const isMobile = useIsMobile();\n  const isTablet = useIsTablet();\n  const isDesktop = useIsDesktop();\n  const isSmallMobile = useIsSmallMobile();\n  const isLargeDesktop = useIsLargeDesktop();\n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isSmallMobile,\n    isLargeDesktop,\n    // Convenience properties\n    isMobileOrTablet: isMobile || isTablet,\n    isTabletOrDesktop: isTablet || isDesktop\n  };\n};\n_s8(useBreakpoints, \"bLJEpGTzAulDex+3aF+dN9HxTV4=\", false, function () {\n  return [useIsMobile, useIsTablet, useIsDesktop, useIsSmallMobile, useIsLargeDesktop];\n});\nexport default useMediaQuery;","map":{"version":3,"names":["useState","useEffect","useMediaQuery","query","_s","matches","setMatches","window","matchMedia","mediaQuery","handleChange","event","addEventListener","addListener","removeEventListener","removeListener","useIsMobile","_s2","useIsTablet","_s3","useIsDesktop","_s4","useIsMobileOrTablet","_s5","useIsSmallMobile","_s6","useIsLargeDesktop","_s7","useBreakpoints","_s8","isMobile","isTablet","isDesktop","isSmallMobile","isLargeDesktop","isMobileOrTablet","isTabletOrDesktop"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/hooks/useMediaQuery.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * useMediaQuery hook - Detect media query matches with window.matchMedia\n * \n * @param {string} query - Media query string (e.g., '(min-width: 768px)')\n * @returns {boolean} - Whether the media query matches\n */\nconst useMediaQuery = (query) => {\n  const [matches, setMatches] = useState(() => {\n    // Check if window is available (SSR safety)\n    if (typeof window !== 'undefined') {\n      return window.matchMedia(query).matches;\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    // Check if window is available (SSR safety)\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const mediaQuery = window.matchMedia(query);\n    \n    // Update state with current match status\n    setMatches(mediaQuery.matches);\n\n    // Event handler for media query changes\n    const handleChange = (event) => {\n      setMatches(event.matches);\n    };\n\n    // Add event listener\n    // Use addEventListener for modern browsers, addListener for older ones\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n    } else {\n      // Fallback for older browsers\n      mediaQuery.addListener(handleChange);\n    }\n\n    // Cleanup function to remove event listener\n    return () => {\n      if (mediaQuery.removeEventListener) {\n        mediaQuery.removeEventListener('change', handleChange);\n      } else {\n        // Fallback for older browsers\n        mediaQuery.removeListener(handleChange);\n      }\n    };\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Common breakpoint hooks based on Tailwind CSS breakpoints\n */\n\n/**\n * useIsMobile - Detect if viewport is mobile (< 768px)\n * @returns {boolean} - True if viewport width is less than 768px\n */\nexport const useIsMobile = () => {\n  return useMediaQuery('(max-width: 767px)');\n};\n\n/**\n * useIsTablet - Detect if viewport is tablet (768px - 1023px)\n * @returns {boolean} - True if viewport width is between 768px and 1023px\n */\nexport const useIsTablet = () => {\n  return useMediaQuery('(min-width: 768px) and (max-width: 1023px)');\n};\n\n/**\n * useIsDesktop - Detect if viewport is desktop (>= 1024px)\n * @returns {boolean} - True if viewport width is 1024px or greater\n */\nexport const useIsDesktop = () => {\n  return useMediaQuery('(min-width: 1024px)');\n};\n\n/**\n * useIsMobileOrTablet - Detect if viewport is mobile or tablet (< 1024px)\n * @returns {boolean} - True if viewport width is less than 1024px\n */\nexport const useIsMobileOrTablet = () => {\n  return useMediaQuery('(max-width: 1023px)');\n};\n\n/**\n * useIsSmallMobile - Detect if viewport is small mobile (< 640px)\n * @returns {boolean} - True if viewport width is less than 640px\n */\nexport const useIsSmallMobile = () => {\n  return useMediaQuery('(max-width: 639px)');\n};\n\n/**\n * useIsLargeDesktop - Detect if viewport is large desktop (>= 1280px)\n * @returns {boolean} - True if viewport width is 1280px or greater\n */\nexport const useIsLargeDesktop = () => {\n  return useMediaQuery('(min-width: 1280px)');\n};\n\n/**\n * useBreakpoints - Get all breakpoint states at once\n * Useful when you need to check multiple breakpoints\n * \n * @returns {Object} Object with boolean properties for each breakpoint\n * \n * @example\n * const { isMobile, isTablet, isDesktop } = useBreakpoints();\n * if (isMobile) {\n *   // Render mobile view\n * }\n */\nexport const useBreakpoints = () => {\n  const isMobile = useIsMobile();\n  const isTablet = useIsTablet();\n  const isDesktop = useIsDesktop();\n  const isSmallMobile = useIsSmallMobile();\n  const isLargeDesktop = useIsLargeDesktop();\n\n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isSmallMobile,\n    isLargeDesktop,\n    // Convenience properties\n    isMobileOrTablet: isMobile || isTablet,\n    isTabletOrDesktop: isTablet || isDesktop,\n  };\n};\n\nexport default useMediaQuery;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}