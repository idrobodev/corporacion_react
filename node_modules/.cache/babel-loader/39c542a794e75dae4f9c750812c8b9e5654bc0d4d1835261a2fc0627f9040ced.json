{"ast":null,"code":"// Visitor Counter Service\nconst VisitorCounterService=class{constructor(){this.storageKey='todoporunalma_visitor_count';this.sessionKey='todoporunalma_session_visited';this.apiEndpoint=process.env.REACT_APP_API_URL||null;}// Check if this is a new session visit\nisNewVisit(){return!sessionStorage.getItem(this.sessionKey);}// Mark current session as visited\nmarkSessionVisited(){sessionStorage.setItem(this.sessionKey,'true');}// Get current visitor count from localStorage\ngetLocalCount(){const stored=localStorage.getItem(this.storageKey);return stored?parseInt(stored,10):1250;// Starting count\n}// Save visitor count to localStorage\nsaveLocalCount(count){localStorage.setItem(this.storageKey,count.toString());}// Increment visitor count\nincrementCount(){if(this.isNewVisit()){const currentCount=this.getLocalCount();const newCount=currentCount+1;this.saveLocalCount(newCount);this.markSessionVisited();// Try to sync with API if available\nthis.syncWithAPI(newCount);return newCount;}return this.getLocalCount();}// Sync with API (for future implementation)\nasync syncWithAPI(count){if(!this.apiEndpoint)return;try{await fetch(\"\".concat(this.apiEndpoint,\"/visitor-count\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({count,timestamp:new Date().toISOString()})});}catch(error){console.log('Visitor count sync failed (API not available):',error.message);}}// Get formatted count with separators\ngetFormattedCount(){const count=this.getLocalCount();return count.toLocaleString('es-CO');}// Simulate realistic visitor growth\nsimulateRealisticGrowth(){const now=new Date();const hour=now.getHours();const dayOfWeek=now.getDay();// Higher activity during business hours and weekdays\nconst isBusinessHours=hour>=8&&hour<=18;const isWeekday=dayOfWeek>=1&&dayOfWeek<=5;let growthFactor=1;if(isBusinessHours)growthFactor+=0.3;if(isWeekday)growthFactor+=0.2;// Random growth between 1-5 visitors per session\nconst randomGrowth=Math.floor(Math.random()*5*growthFactor)+1;const currentCount=this.getLocalCount();const newCount=currentCount+randomGrowth;this.saveLocalCount(newCount);return newCount;}};const visitorCounterServiceInstance=new VisitorCounterService();export default visitorCounterServiceInstance;","map":{"version":3,"names":["VisitorCounterService","constructor","storageKey","sessionKey","apiEndpoint","process","env","REACT_APP_API_URL","isNewVisit","sessionStorage","getItem","markSessionVisited","setItem","getLocalCount","stored","localStorage","parseInt","saveLocalCount","count","toString","incrementCount","currentCount","newCount","syncWithAPI","fetch","concat","method","headers","body","JSON","stringify","timestamp","Date","toISOString","error","console","log","message","getFormattedCount","toLocaleString","simulateRealisticGrowth","now","hour","getHours","dayOfWeek","getDay","isBusinessHours","isWeekday","growthFactor","randomGrowth","Math","floor","random","visitorCounterServiceInstance"],"sources":["/Users/todoporunalma/Desktop/corporacion_react/src/shared/services/visitorCounter.js"],"sourcesContent":["// Visitor Counter Service\nconst VisitorCounterService = class {\n  constructor() {\n    this.storageKey = 'todoporunalma_visitor_count';\n    this.sessionKey = 'todoporunalma_session_visited';\n    this.apiEndpoint = process.env.REACT_APP_API_URL || null;\n  }\n\n  // Check if this is a new session visit\n  isNewVisit() {\n    return !sessionStorage.getItem(this.sessionKey);\n  }\n\n  // Mark current session as visited\n  markSessionVisited() {\n    sessionStorage.setItem(this.sessionKey, 'true');\n  }\n\n  // Get current visitor count from localStorage\n  getLocalCount() {\n    const stored = localStorage.getItem(this.storageKey);\n    return stored ? parseInt(stored, 10) : 1250; // Starting count\n  }\n\n  // Save visitor count to localStorage\n  saveLocalCount(count) {\n    localStorage.setItem(this.storageKey, count.toString());\n  }\n\n  // Increment visitor count\n  incrementCount() {\n    if (this.isNewVisit()) {\n      const currentCount = this.getLocalCount();\n      const newCount = currentCount + 1;\n      this.saveLocalCount(newCount);\n      this.markSessionVisited();\n      \n      // Try to sync with API if available\n      this.syncWithAPI(newCount);\n      \n      return newCount;\n    }\n    return this.getLocalCount();\n  }\n\n  // Sync with API (for future implementation)\n  async syncWithAPI(count) {\n    if (!this.apiEndpoint) return;\n    \n    try {\n      await fetch(`${this.apiEndpoint}/visitor-count`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ count, timestamp: new Date().toISOString() }),\n      });\n    } catch (error) {\n      console.log('Visitor count sync failed (API not available):', error.message);\n    }\n  }\n\n  // Get formatted count with separators\n  getFormattedCount() {\n    const count = this.getLocalCount();\n    return count.toLocaleString('es-CO');\n  }\n\n  // Simulate realistic visitor growth\n  simulateRealisticGrowth() {\n    const now = new Date();\n    const hour = now.getHours();\n    const dayOfWeek = now.getDay();\n    \n    // Higher activity during business hours and weekdays\n    const isBusinessHours = hour >= 8 && hour <= 18;\n    const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5;\n    \n    let growthFactor = 1;\n    if (isBusinessHours) growthFactor += 0.3;\n    if (isWeekday) growthFactor += 0.2;\n    \n    // Random growth between 1-5 visitors per session\n    const randomGrowth = Math.floor(Math.random() * 5 * growthFactor) + 1;\n    \n    const currentCount = this.getLocalCount();\n    const newCount = currentCount + randomGrowth;\n    this.saveLocalCount(newCount);\n    \n    return newCount;\n  }\n}\n\nconst visitorCounterServiceInstance = new VisitorCounterService();\nexport default visitorCounterServiceInstance;\n"],"mappings":"AAAA;AACA,KAAM,CAAAA,qBAAqB,CAAG,KAAM,CAClCC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,UAAU,CAAG,6BAA6B,CAC/C,IAAI,CAACC,UAAU,CAAG,+BAA+B,CACjD,IAAI,CAACC,WAAW,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,IAAI,CAC1D,CAEA;AACAC,UAAUA,CAAA,CAAG,CACX,MAAO,CAACC,cAAc,CAACC,OAAO,CAAC,IAAI,CAACP,UAAU,CAAC,CACjD,CAEA;AACAQ,kBAAkBA,CAAA,CAAG,CACnBF,cAAc,CAACG,OAAO,CAAC,IAAI,CAACT,UAAU,CAAE,MAAM,CAAC,CACjD,CAEA;AACAU,aAAaA,CAAA,CAAG,CACd,KAAM,CAAAC,MAAM,CAAGC,YAAY,CAACL,OAAO,CAAC,IAAI,CAACR,UAAU,CAAC,CACpD,MAAO,CAAAY,MAAM,CAAGE,QAAQ,CAACF,MAAM,CAAE,EAAE,CAAC,CAAG,IAAI,CAAE;AAC/C,CAEA;AACAG,cAAcA,CAACC,KAAK,CAAE,CACpBH,YAAY,CAACH,OAAO,CAAC,IAAI,CAACV,UAAU,CAAEgB,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CACzD,CAEA;AACAC,cAAcA,CAAA,CAAG,CACf,GAAI,IAAI,CAACZ,UAAU,CAAC,CAAC,CAAE,CACrB,KAAM,CAAAa,YAAY,CAAG,IAAI,CAACR,aAAa,CAAC,CAAC,CACzC,KAAM,CAAAS,QAAQ,CAAGD,YAAY,CAAG,CAAC,CACjC,IAAI,CAACJ,cAAc,CAACK,QAAQ,CAAC,CAC7B,IAAI,CAACX,kBAAkB,CAAC,CAAC,CAEzB;AACA,IAAI,CAACY,WAAW,CAACD,QAAQ,CAAC,CAE1B,MAAO,CAAAA,QAAQ,CACjB,CACA,MAAO,KAAI,CAACT,aAAa,CAAC,CAAC,CAC7B,CAEA;AACA,KAAM,CAAAU,WAAWA,CAACL,KAAK,CAAE,CACvB,GAAI,CAAC,IAAI,CAACd,WAAW,CAAE,OAEvB,GAAI,CACF,KAAM,CAAAoB,KAAK,IAAAC,MAAA,CAAI,IAAI,CAACrB,WAAW,mBAAkB,CAC/CsB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEZ,KAAK,CAAEa,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAE,CAAC,CACrE,CAAC,CAAC,CACJ,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAEF,KAAK,CAACG,OAAO,CAAC,CAC9E,CACF,CAEA;AACAC,iBAAiBA,CAAA,CAAG,CAClB,KAAM,CAAApB,KAAK,CAAG,IAAI,CAACL,aAAa,CAAC,CAAC,CAClC,MAAO,CAAAK,KAAK,CAACqB,cAAc,CAAC,OAAO,CAAC,CACtC,CAEA;AACAC,uBAAuBA,CAAA,CAAG,CACxB,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAT,IAAI,CAAC,CAAC,CACtB,KAAM,CAAAU,IAAI,CAAGD,GAAG,CAACE,QAAQ,CAAC,CAAC,CAC3B,KAAM,CAAAC,SAAS,CAAGH,GAAG,CAACI,MAAM,CAAC,CAAC,CAE9B;AACA,KAAM,CAAAC,eAAe,CAAGJ,IAAI,EAAI,CAAC,EAAIA,IAAI,EAAI,EAAE,CAC/C,KAAM,CAAAK,SAAS,CAAGH,SAAS,EAAI,CAAC,EAAIA,SAAS,EAAI,CAAC,CAElD,GAAI,CAAAI,YAAY,CAAG,CAAC,CACpB,GAAIF,eAAe,CAAEE,YAAY,EAAI,GAAG,CACxC,GAAID,SAAS,CAAEC,YAAY,EAAI,GAAG,CAElC;AACA,KAAM,CAAAC,YAAY,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAGJ,YAAY,CAAC,CAAG,CAAC,CAErE,KAAM,CAAA3B,YAAY,CAAG,IAAI,CAACR,aAAa,CAAC,CAAC,CACzC,KAAM,CAAAS,QAAQ,CAAGD,YAAY,CAAG4B,YAAY,CAC5C,IAAI,CAAChC,cAAc,CAACK,QAAQ,CAAC,CAE7B,MAAO,CAAAA,QAAQ,CACjB,CACF,CAAC,CAED,KAAM,CAAA+B,6BAA6B,CAAG,GAAI,CAAArD,qBAAqB,CAAC,CAAC,CACjE,cAAe,CAAAqD,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}