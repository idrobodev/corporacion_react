{"ast":null,"code":"// Visitor Counter Service\nconst VisitorCounterService = class {\n  constructor() {\n    this.storageKey = 'todoporunalma_visitor_count';\n    this.sessionKey = 'todoporunalma_session_visited';\n    this.apiEndpoint = process.env.REACT_APP_API_URL || null;\n  }\n\n  // Check if this is a new session visit\n  isNewVisit() {\n    return !sessionStorage.getItem(this.sessionKey);\n  }\n\n  // Mark current session as visited\n  markSessionVisited() {\n    sessionStorage.setItem(this.sessionKey, 'true');\n  }\n\n  // Get current visitor count from localStorage\n  getLocalCount() {\n    const stored = localStorage.getItem(this.storageKey);\n    return stored ? parseInt(stored, 10) : 1250; // Starting count\n  }\n\n  // Save visitor count to localStorage\n  saveLocalCount(count) {\n    localStorage.setItem(this.storageKey, count.toString());\n  }\n\n  // Increment visitor count\n  incrementCount() {\n    if (this.isNewVisit()) {\n      const currentCount = this.getLocalCount();\n      const newCount = currentCount + 1;\n      this.saveLocalCount(newCount);\n      this.markSessionVisited();\n\n      // Try to sync with API if available\n      this.syncWithAPI(newCount);\n      return newCount;\n    }\n    return this.getLocalCount();\n  }\n\n  // Sync with API (for future implementation)\n  async syncWithAPI(count) {\n    if (!this.apiEndpoint) return;\n    try {\n      await fetch(`${this.apiEndpoint}/visitor-count`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          count,\n          timestamp: new Date().toISOString()\n        })\n      });\n    } catch (error) {\n      console.log('Visitor count sync failed (API not available):', error.message);\n    }\n  }\n\n  // Get formatted count with separators\n  getFormattedCount() {\n    const count = this.getLocalCount();\n    return count.toLocaleString('es-CO');\n  }\n\n  // Simulate realistic visitor growth\n  simulateRealisticGrowth() {\n    const now = new Date();\n    const hour = now.getHours();\n    const dayOfWeek = now.getDay();\n\n    // Higher activity during business hours and weekdays\n    const isBusinessHours = hour >= 8 && hour <= 18;\n    const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5;\n    let growthFactor = 1;\n    if (isBusinessHours) growthFactor += 0.3;\n    if (isWeekday) growthFactor += 0.2;\n\n    // Random growth between 1-5 visitors per session\n    const randomGrowth = Math.floor(Math.random() * 5 * growthFactor) + 1;\n    const currentCount = this.getLocalCount();\n    const newCount = currentCount + randomGrowth;\n    this.saveLocalCount(newCount);\n    return newCount;\n  }\n};\nconst visitorCounterServiceInstance = new VisitorCounterService();\nexport default visitorCounterServiceInstance;","map":{"version":3,"names":["VisitorCounterService","constructor","storageKey","sessionKey","apiEndpoint","process","env","REACT_APP_API_URL","isNewVisit","sessionStorage","getItem","markSessionVisited","setItem","getLocalCount","stored","localStorage","parseInt","saveLocalCount","count","toString","incrementCount","currentCount","newCount","syncWithAPI","fetch","method","headers","body","JSON","stringify","timestamp","Date","toISOString","error","console","log","message","getFormattedCount","toLocaleString","simulateRealisticGrowth","now","hour","getHours","dayOfWeek","getDay","isBusinessHours","isWeekday","growthFactor","randomGrowth","Math","floor","random","visitorCounterServiceInstance"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/services/visitorCounter.js"],"sourcesContent":["// Visitor Counter Service\nconst VisitorCounterService = class {\n  constructor() {\n    this.storageKey = 'todoporunalma_visitor_count';\n    this.sessionKey = 'todoporunalma_session_visited';\n    this.apiEndpoint = process.env.REACT_APP_API_URL || null;\n  }\n\n  // Check if this is a new session visit\n  isNewVisit() {\n    return !sessionStorage.getItem(this.sessionKey);\n  }\n\n  // Mark current session as visited\n  markSessionVisited() {\n    sessionStorage.setItem(this.sessionKey, 'true');\n  }\n\n  // Get current visitor count from localStorage\n  getLocalCount() {\n    const stored = localStorage.getItem(this.storageKey);\n    return stored ? parseInt(stored, 10) : 1250; // Starting count\n  }\n\n  // Save visitor count to localStorage\n  saveLocalCount(count) {\n    localStorage.setItem(this.storageKey, count.toString());\n  }\n\n  // Increment visitor count\n  incrementCount() {\n    if (this.isNewVisit()) {\n      const currentCount = this.getLocalCount();\n      const newCount = currentCount + 1;\n      this.saveLocalCount(newCount);\n      this.markSessionVisited();\n      \n      // Try to sync with API if available\n      this.syncWithAPI(newCount);\n      \n      return newCount;\n    }\n    return this.getLocalCount();\n  }\n\n  // Sync with API (for future implementation)\n  async syncWithAPI(count) {\n    if (!this.apiEndpoint) return;\n    \n    try {\n      await fetch(`${this.apiEndpoint}/visitor-count`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ count, timestamp: new Date().toISOString() }),\n      });\n    } catch (error) {\n      console.log('Visitor count sync failed (API not available):', error.message);\n    }\n  }\n\n  // Get formatted count with separators\n  getFormattedCount() {\n    const count = this.getLocalCount();\n    return count.toLocaleString('es-CO');\n  }\n\n  // Simulate realistic visitor growth\n  simulateRealisticGrowth() {\n    const now = new Date();\n    const hour = now.getHours();\n    const dayOfWeek = now.getDay();\n    \n    // Higher activity during business hours and weekdays\n    const isBusinessHours = hour >= 8 && hour <= 18;\n    const isWeekday = dayOfWeek >= 1 && dayOfWeek <= 5;\n    \n    let growthFactor = 1;\n    if (isBusinessHours) growthFactor += 0.3;\n    if (isWeekday) growthFactor += 0.2;\n    \n    // Random growth between 1-5 visitors per session\n    const randomGrowth = Math.floor(Math.random() * 5 * growthFactor) + 1;\n    \n    const currentCount = this.getLocalCount();\n    const newCount = currentCount + randomGrowth;\n    this.saveLocalCount(newCount);\n    \n    return newCount;\n  }\n}\n\nconst visitorCounterServiceInstance = new VisitorCounterService();\nexport default visitorCounterServiceInstance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}