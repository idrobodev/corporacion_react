{"ast":null,"code":"import _objectSpread from\"/Users/todoporunalma/Desktop/corporacion_react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/Users/todoporunalma/Desktop/corporacion_react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"currentStatus\",\"statuses\",\"onChange\",\"disabled\",\"loading\",\"className\"];import React,{useState}from'react';import StatusBadge from'./StatusBadge';/**\n * StatusToggle component for toggling between different status states\n * \n * @param {Object} props\n * @param {string} props.currentStatus - Current status value\n * @param {Array} props.statuses - Array of status objects with value, label, and variant\n * @param {Function} props.onChange - Callback when status changes\n * @param {boolean} props.disabled - Disabled state\n * @param {boolean} props.loading - Loading state\n * @param {string} props.className - Additional CSS classes\n */import{jsx as _jsx}from\"react/jsx-runtime\";const StatusToggle=_ref=>{let{currentStatus,statuses,onChange,disabled=false,loading=false,className=''}=_ref,rest=_objectWithoutProperties(_ref,_excluded);const[isChanging,setIsChanging]=useState(false);// Find current status config\nconst currentStatusConfig=statuses.find(s=>s.value===currentStatus)||statuses[0];// Find next status in cycle\nconst getNextStatus=()=>{const currentIndex=statuses.findIndex(s=>s.value===currentStatus);const nextIndex=(currentIndex+1)%statuses.length;return statuses[nextIndex];};const nextStatus=getNextStatus();const handleClick=async()=>{if(disabled||loading||isChanging)return;setIsChanging(true);try{await onChange(nextStatus.value);}catch(error){console.error('Error changing status:',error);}finally{setIsChanging(false);}};const isDisabled=disabled||loading||isChanging;return/*#__PURE__*/_jsx(\"div\",{className:\"inline-block \".concat(className),title:isDisabled?'':\"Cambiar a \".concat(nextStatus.label),children:/*#__PURE__*/_jsx(StatusBadge,_objectSpread({status:isChanging||loading?'Cambiando...':currentStatusConfig.label,variant:currentStatusConfig.variant,icon:isChanging||loading?'fas fa-spinner fa-spin':undefined,onClick:isDisabled?undefined:handleClick,className:isDisabled?'opacity-50 cursor-not-allowed':''},rest))});};export default StatusToggle;","map":{"version":3,"names":["React","useState","StatusBadge","jsx","_jsx","StatusToggle","_ref","currentStatus","statuses","onChange","disabled","loading","className","rest","_objectWithoutProperties","_excluded","isChanging","setIsChanging","currentStatusConfig","find","s","value","getNextStatus","currentIndex","findIndex","nextIndex","length","nextStatus","handleClick","error","console","isDisabled","concat","title","label","children","_objectSpread","status","variant","icon","undefined","onClick"],"sources":["/Users/todoporunalma/Desktop/corporacion_react/src/components/UI/Badge/StatusToggle.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport StatusBadge from './StatusBadge';\n\n/**\n * StatusToggle component for toggling between different status states\n * \n * @param {Object} props\n * @param {string} props.currentStatus - Current status value\n * @param {Array} props.statuses - Array of status objects with value, label, and variant\n * @param {Function} props.onChange - Callback when status changes\n * @param {boolean} props.disabled - Disabled state\n * @param {boolean} props.loading - Loading state\n * @param {string} props.className - Additional CSS classes\n */\nconst StatusToggle = ({\n  currentStatus,\n  statuses,\n  onChange,\n  disabled = false,\n  loading = false,\n  className = '',\n  ...rest\n}) => {\n  const [isChanging, setIsChanging] = useState(false);\n\n  // Find current status config\n  const currentStatusConfig = statuses.find(s => s.value === currentStatus) || statuses[0];\n\n  // Find next status in cycle\n  const getNextStatus = () => {\n    const currentIndex = statuses.findIndex(s => s.value === currentStatus);\n    const nextIndex = (currentIndex + 1) % statuses.length;\n    return statuses[nextIndex];\n  };\n\n  const nextStatus = getNextStatus();\n\n  const handleClick = async () => {\n    if (disabled || loading || isChanging) return;\n\n    setIsChanging(true);\n    try {\n      await onChange(nextStatus.value);\n    } catch (error) {\n      console.error('Error changing status:', error);\n    } finally {\n      setIsChanging(false);\n    }\n  };\n\n  const isDisabled = disabled || loading || isChanging;\n\n  return (\n    <div className={`inline-block ${className}`} title={isDisabled ? '' : `Cambiar a ${nextStatus.label}`}>\n      <StatusBadge\n        status={isChanging || loading ? 'Cambiando...' : currentStatusConfig.label}\n        variant={currentStatusConfig.variant}\n        icon={isChanging || loading ? 'fas fa-spinner fa-spin' : undefined}\n        onClick={isDisabled ? undefined : handleClick}\n        className={isDisabled ? 'opacity-50 cursor-not-allowed' : ''}\n        {...rest}\n      />\n    </div>\n  );\n};\n\nStatusToggle.propTypes = {\n  currentStatus: PropTypes.string.isRequired,\n  statuses: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      variant: PropTypes.oneOf(['success', 'warning', 'danger', 'info', 'default']).isRequired\n    })\n  ).isRequired,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  loading: PropTypes.bool,\n  className: PropTypes.string\n};\n\nexport default StatusToggle;\n"],"mappings":"oXAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAEvC,MAAO,CAAAC,WAAW,KAAM,eAAe,CAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAVA,OAAAC,GAAA,IAAAC,IAAA,yBAWA,KAAM,CAAAC,YAAY,CAAGC,IAAA,EAQf,IARgB,CACpBC,aAAa,CACbC,QAAQ,CACRC,QAAQ,CACRC,QAAQ,CAAG,KAAK,CAChBC,OAAO,CAAG,KAAK,CACfC,SAAS,CAAG,EAEd,CAAC,CAAAN,IAAA,CADIO,IAAI,CAAAC,wBAAA,CAAAR,IAAA,CAAAS,SAAA,EAEP,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGhB,QAAQ,CAAC,KAAK,CAAC,CAEnD;AACA,KAAM,CAAAiB,mBAAmB,CAAGV,QAAQ,CAACW,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,KAAK,GAAKd,aAAa,CAAC,EAAIC,QAAQ,CAAC,CAAC,CAAC,CAExF;AACA,KAAM,CAAAc,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAAAC,YAAY,CAAGf,QAAQ,CAACgB,SAAS,CAACJ,CAAC,EAAIA,CAAC,CAACC,KAAK,GAAKd,aAAa,CAAC,CACvE,KAAM,CAAAkB,SAAS,CAAG,CAACF,YAAY,CAAG,CAAC,EAAIf,QAAQ,CAACkB,MAAM,CACtD,MAAO,CAAAlB,QAAQ,CAACiB,SAAS,CAAC,CAC5B,CAAC,CAED,KAAM,CAAAE,UAAU,CAAGL,aAAa,CAAC,CAAC,CAElC,KAAM,CAAAM,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAIlB,QAAQ,EAAIC,OAAO,EAAIK,UAAU,CAAE,OAEvCC,aAAa,CAAC,IAAI,CAAC,CACnB,GAAI,CACF,KAAM,CAAAR,QAAQ,CAACkB,UAAU,CAACN,KAAK,CAAC,CAClC,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CAAC,OAAS,CACRZ,aAAa,CAAC,KAAK,CAAC,CACtB,CACF,CAAC,CAED,KAAM,CAAAc,UAAU,CAAGrB,QAAQ,EAAIC,OAAO,EAAIK,UAAU,CAEpD,mBACEZ,IAAA,QAAKQ,SAAS,iBAAAoB,MAAA,CAAkBpB,SAAS,CAAG,CAACqB,KAAK,CAAEF,UAAU,CAAG,EAAE,cAAAC,MAAA,CAAgBL,UAAU,CAACO,KAAK,CAAG,CAAAC,QAAA,cACpG/B,IAAA,CAACF,WAAW,CAAAkC,aAAA,EACVC,MAAM,CAAErB,UAAU,EAAIL,OAAO,CAAG,cAAc,CAAGO,mBAAmB,CAACgB,KAAM,CAC3EI,OAAO,CAAEpB,mBAAmB,CAACoB,OAAQ,CACrCC,IAAI,CAAEvB,UAAU,EAAIL,OAAO,CAAG,wBAAwB,CAAG6B,SAAU,CACnEC,OAAO,CAAEV,UAAU,CAAGS,SAAS,CAAGZ,WAAY,CAC9ChB,SAAS,CAAEmB,UAAU,CAAG,+BAA+B,CAAG,EAAG,EACzDlB,IAAI,CACT,CAAC,CACC,CAAC,CAEV,CAAC,CAiBD,cAAe,CAAAR,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}