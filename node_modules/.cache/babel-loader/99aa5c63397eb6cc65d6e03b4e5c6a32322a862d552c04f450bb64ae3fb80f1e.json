{"ast":null,"code":"import{ROLES}from'./api';import{dbService}from'./database';const STORAGE_BASE_URL=process.env.REACT_APP_STORAGE_BASE_URL;class StorageService{async isAdmin(){return await dbService.hasPermission(ROLES.ADMINISTRADOR);}async upload(file){let path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}if(file.size>10*1024*1024){throw new Error('File size exceeds 10MB limit');}// Storage service no longer available - return error\nthrow new Error('Storage service is not available. Dashboard backend connection removed.');}async deleteFile(fullPath){if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}// Storage service no longer available - return error\nthrow new Error('Storage service is not available. Dashboard backend connection removed.');}async listFiles(){let path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';// Storage service no longer available - return empty result\nreturn{files:[],folders:[]};}async deleteFolder(path){if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}// Storage service no longer available - return error\nthrow new Error('Storage service is not available. Dashboard backend connection removed.');}async createFolder(folderName){let parentPath=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}// Storage service no longer available - return error\nthrow new Error('Storage service is not available. Dashboard backend connection removed.');}async renameFolder(oldName,newName){let parentPath=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';if(!(await this.isAdmin())){throw new Error('Permission denied: Admin access required');}// Storage service no longer available - return error\nthrow new Error('Storage service is not available. Dashboard backend connection removed.');}async getDownloadUrl(path){// Return public URL\nreturn STORAGE_BASE_URL+'/'+path;}}export const storage=new StorageService();export default storage;","map":{"version":3,"names":["ROLES","dbService","STORAGE_BASE_URL","process","env","REACT_APP_STORAGE_BASE_URL","StorageService","isAdmin","hasPermission","ADMINISTRADOR","upload","file","path","arguments","length","undefined","Error","size","deleteFile","fullPath","listFiles","files","folders","deleteFolder","createFolder","folderName","parentPath","renameFolder","oldName","newName","getDownloadUrl","storage"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/services/storage.js"],"sourcesContent":["import { ROLES } from './api';\nimport { dbService } from './database';\n\nconst STORAGE_BASE_URL = process.env.REACT_APP_STORAGE_BASE_URL;\n\nclass StorageService {\n  async isAdmin() {\n    return await dbService.hasPermission(ROLES.ADMINISTRADOR);\n  }\n\n  async upload(file, path = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    if (file.size > 10 * 1024 * 1024) {\n      throw new Error('File size exceeds 10MB limit');\n    }\n\n    // Storage service no longer available - return error\n    throw new Error('Storage service is not available. Dashboard backend connection removed.');\n  }\n\n  async deleteFile(fullPath) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    // Storage service no longer available - return error\n    throw new Error('Storage service is not available. Dashboard backend connection removed.');\n  }\n\n  async listFiles(path = '') {\n    // Storage service no longer available - return empty result\n    return {\n      files: [],\n      folders: []\n    };\n  }\n\n  async deleteFolder(path) {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    // Storage service no longer available - return error\n    throw new Error('Storage service is not available. Dashboard backend connection removed.');\n  }\n\n  async createFolder(folderName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    // Storage service no longer available - return error\n    throw new Error('Storage service is not available. Dashboard backend connection removed.');\n  }\n\n  async renameFolder(oldName, newName, parentPath = '') {\n    if (!(await this.isAdmin())) {\n      throw new Error('Permission denied: Admin access required');\n    }\n\n    // Storage service no longer available - return error\n    throw new Error('Storage service is not available. Dashboard backend connection removed.');\n  }\n\n  async getDownloadUrl(path) {\n    // Return public URL\n    return STORAGE_BASE_URL + '/' + path;\n  }\n}\n\nexport const storage = new StorageService();\nexport default storage;"],"mappings":"AAAA,OAASA,KAAK,KAAQ,OAAO,CAC7B,OAASC,SAAS,KAAQ,YAAY,CAEtC,KAAM,CAAAC,gBAAgB,CAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAE/D,KAAM,CAAAC,cAAe,CACnB,KAAM,CAAAC,OAAOA,CAAA,CAAG,CACd,MAAO,MAAM,CAAAN,SAAS,CAACO,aAAa,CAACR,KAAK,CAACS,aAAa,CAAC,CAC3D,CAEA,KAAM,CAAAC,MAAMA,CAACC,IAAI,CAAa,IAAX,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC1B,GAAI,EAAE,KAAM,KAAI,CAACN,OAAO,CAAC,CAAC,CAAC,CAAE,CAC3B,KAAM,IAAI,CAAAS,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CAEA,GAAIL,IAAI,CAACM,IAAI,CAAG,EAAE,CAAG,IAAI,CAAG,IAAI,CAAE,CAChC,KAAM,IAAI,CAAAD,KAAK,CAAC,8BAA8B,CAAC,CACjD,CAEA;AACA,KAAM,IAAI,CAAAA,KAAK,CAAC,yEAAyE,CAAC,CAC5F,CAEA,KAAM,CAAAE,UAAUA,CAACC,QAAQ,CAAE,CACzB,GAAI,EAAE,KAAM,KAAI,CAACZ,OAAO,CAAC,CAAC,CAAC,CAAE,CAC3B,KAAM,IAAI,CAAAS,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CAEA;AACA,KAAM,IAAI,CAAAA,KAAK,CAAC,yEAAyE,CAAC,CAC5F,CAEA,KAAM,CAAAI,SAASA,CAAA,CAAY,IAAX,CAAAR,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACvB;AACA,MAAO,CACLQ,KAAK,CAAE,EAAE,CACTC,OAAO,CAAE,EACX,CAAC,CACH,CAEA,KAAM,CAAAC,YAAYA,CAACX,IAAI,CAAE,CACvB,GAAI,EAAE,KAAM,KAAI,CAACL,OAAO,CAAC,CAAC,CAAC,CAAE,CAC3B,KAAM,IAAI,CAAAS,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CAEA;AACA,KAAM,IAAI,CAAAA,KAAK,CAAC,yEAAyE,CAAC,CAC5F,CAEA,KAAM,CAAAQ,YAAYA,CAACC,UAAU,CAAmB,IAAjB,CAAAC,UAAU,CAAAb,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC5C,GAAI,EAAE,KAAM,KAAI,CAACN,OAAO,CAAC,CAAC,CAAC,CAAE,CAC3B,KAAM,IAAI,CAAAS,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CAEA;AACA,KAAM,IAAI,CAAAA,KAAK,CAAC,yEAAyE,CAAC,CAC5F,CAEA,KAAM,CAAAW,YAAYA,CAACC,OAAO,CAAEC,OAAO,CAAmB,IAAjB,CAAAH,UAAU,CAAAb,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAClD,GAAI,EAAE,KAAM,KAAI,CAACN,OAAO,CAAC,CAAC,CAAC,CAAE,CAC3B,KAAM,IAAI,CAAAS,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CAEA;AACA,KAAM,IAAI,CAAAA,KAAK,CAAC,yEAAyE,CAAC,CAC5F,CAEA,KAAM,CAAAc,cAAcA,CAAClB,IAAI,CAAE,CACzB;AACA,MAAO,CAAAV,gBAAgB,CAAG,GAAG,CAAGU,IAAI,CACtC,CACF,CAEA,MAAO,MAAM,CAAAmB,OAAO,CAAG,GAAI,CAAAzB,cAAc,CAAC,CAAC,CAC3C,cAAe,CAAAyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}