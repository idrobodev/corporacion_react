{"ast":null,"code":"import _objectSpread from\"/Users/todoporunalma/Desktop/Corporacion/coptua_react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useRef,useEffect}from'react';/**\n * Development-only hook to track component re-renders and detect excessive re-rendering\n * @param {string} componentName - Name of the component being tracked\n * @param {Object} props - Component props to track changes (optional)\n * @param {number} threshold - Number of renders before warning (default: 10)\n */const useRenderTracker=function(componentName){let props=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let threshold=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;const renderCount=useRef(0);const lastRenderTime=useRef(Date.now());const propsHistory=useRef([]);const startTime=useRef(Date.now());useEffect(()=>{// Only run in development mode\nif(process.env.NODE_ENV!=='development'){return;}renderCount.current+=1;const currentTime=Date.now();const timeSinceLastRender=currentTime-lastRenderTime.current;const totalTime=currentTime-startTime.current;// Track props changes\nconst currentProps=_objectSpread({},props);const previousProps=propsHistory.current[propsHistory.current.length-1]||{};// Find changed props\nconst changedProps={};Object.keys(currentProps).forEach(key=>{if(currentProps[key]!==previousProps[key]){changedProps[key]={from:previousProps[key],to:currentProps[key]};}});// Store current props for next comparison\npropsHistory.current.push(currentProps);// Keep only last 5 prop snapshots to prevent memory leaks\nif(propsHistory.current.length>5){propsHistory.current=propsHistory.current.slice(-5);}// Log render information\nconst hasChangedProps=Object.keys(changedProps).length>0;const logStyle=renderCount.current>threshold?'color: red; font-weight: bold;':'color: blue;';console.log(\"%c\\uD83D\\uDD04 \".concat(componentName,\" rendered (#\").concat(renderCount.current,\")\"),logStyle,_objectSpread(_objectSpread({renderCount:renderCount.current,timeSinceLastRender:\"\".concat(timeSinceLastRender,\"ms\"),totalTime:\"\".concat(totalTime,\"ms\")},hasChangedProps&&{changedProps}),renderCount.current===1&&{note:'Initial render'}));// Warn about excessive re-renders\nif(renderCount.current>threshold){console.warn(\"\\u26A0\\uFE0F \".concat(componentName,\" has rendered \").concat(renderCount.current,\" times! This might indicate a performance issue.\"),{component:componentName,renderCount:renderCount.current,averageRenderTime:\"\".concat(Math.round(totalTime/renderCount.current),\"ms\"),suggestions:['Check if props are being recreated on each render','Consider using React.memo() if props rarely change','Use useMemo() or useCallback() for expensive computations','Verify context providers are not causing unnecessary re-renders']});}// Warn about rapid re-renders (less than 16ms apart - faster than 60fps)\nif(timeSinceLastRender<16&&renderCount.current>1){console.warn(\"\\u26A1 \".concat(componentName,\" is re-rendering very rapidly (\").concat(timeSinceLastRender,\"ms since last render)\"),{component:componentName,timeSinceLastRender:\"\".concat(timeSinceLastRender,\"ms\"),suggestion:'Consider debouncing state updates or using React.memo()'});}lastRenderTime.current=currentTime;});// Return render statistics for debugging\nreturn{renderCount:renderCount.current,getStats:()=>({componentName,renderCount:renderCount.current,totalTime:Date.now()-startTime.current,averageRenderTime:Math.round((Date.now()-startTime.current)/renderCount.current),propsHistory:propsHistory.current})};};export default useRenderTracker;","map":{"version":3,"names":["useRef","useEffect","useRenderTracker","componentName","props","arguments","length","undefined","threshold","renderCount","lastRenderTime","Date","now","propsHistory","startTime","process","env","NODE_ENV","current","currentTime","timeSinceLastRender","totalTime","currentProps","_objectSpread","previousProps","changedProps","Object","keys","forEach","key","from","to","push","slice","hasChangedProps","logStyle","console","log","concat","note","warn","component","averageRenderTime","Math","round","suggestions","suggestion","getStats"],"sources":["/Users/todoporunalma/Desktop/Corporacion/coptua_react/src/shared/hooks/useRenderTracker.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\n/**\n * Development-only hook to track component re-renders and detect excessive re-rendering\n * @param {string} componentName - Name of the component being tracked\n * @param {Object} props - Component props to track changes (optional)\n * @param {number} threshold - Number of renders before warning (default: 10)\n */\nconst useRenderTracker = (componentName, props = {}, threshold = 10) => {\n  const renderCount = useRef(0);\n  const lastRenderTime = useRef(Date.now());\n  const propsHistory = useRef([]);\n  const startTime = useRef(Date.now());\n\n  useEffect(() => {\n    // Only run in development mode\n    if (process.env.NODE_ENV !== 'development') {\n      return;\n    }\n\n    renderCount.current += 1;\n    const currentTime = Date.now();\n    const timeSinceLastRender = currentTime - lastRenderTime.current;\n    const totalTime = currentTime - startTime.current;\n\n    // Track props changes\n    const currentProps = { ...props };\n    const previousProps = propsHistory.current[propsHistory.current.length - 1] || {};\n    \n    // Find changed props\n    const changedProps = {};\n    Object.keys(currentProps).forEach(key => {\n      if (currentProps[key] !== previousProps[key]) {\n        changedProps[key] = {\n          from: previousProps[key],\n          to: currentProps[key]\n        };\n      }\n    });\n\n    // Store current props for next comparison\n    propsHistory.current.push(currentProps);\n    \n    // Keep only last 5 prop snapshots to prevent memory leaks\n    if (propsHistory.current.length > 5) {\n      propsHistory.current = propsHistory.current.slice(-5);\n    }\n\n    // Log render information\n    const hasChangedProps = Object.keys(changedProps).length > 0;\n    const logStyle = renderCount.current > threshold ? 'color: red; font-weight: bold;' : 'color: blue;';\n    \n    console.log(\n      `%cüîÑ ${componentName} rendered (#${renderCount.current})`,\n      logStyle,\n      {\n        renderCount: renderCount.current,\n        timeSinceLastRender: `${timeSinceLastRender}ms`,\n        totalTime: `${totalTime}ms`,\n        ...(hasChangedProps && { changedProps }),\n        ...(renderCount.current === 1 && { note: 'Initial render' })\n      }\n    );\n\n    // Warn about excessive re-renders\n    if (renderCount.current > threshold) {\n      console.warn(\n        `‚ö†Ô∏è ${componentName} has rendered ${renderCount.current} times! This might indicate a performance issue.`,\n        {\n          component: componentName,\n          renderCount: renderCount.current,\n          averageRenderTime: `${Math.round(totalTime / renderCount.current)}ms`,\n          suggestions: [\n            'Check if props are being recreated on each render',\n            'Consider using React.memo() if props rarely change',\n            'Use useMemo() or useCallback() for expensive computations',\n            'Verify context providers are not causing unnecessary re-renders'\n          ]\n        }\n      );\n    }\n\n    // Warn about rapid re-renders (less than 16ms apart - faster than 60fps)\n    if (timeSinceLastRender < 16 && renderCount.current > 1) {\n      console.warn(\n        `‚ö° ${componentName} is re-rendering very rapidly (${timeSinceLastRender}ms since last render)`,\n        {\n          component: componentName,\n          timeSinceLastRender: `${timeSinceLastRender}ms`,\n          suggestion: 'Consider debouncing state updates or using React.memo()'\n        }\n      );\n    }\n\n    lastRenderTime.current = currentTime;\n  });\n\n  // Return render statistics for debugging\n  return {\n    renderCount: renderCount.current,\n    getStats: () => ({\n      componentName,\n      renderCount: renderCount.current,\n      totalTime: Date.now() - startTime.current,\n      averageRenderTime: Math.round((Date.now() - startTime.current) / renderCount.current),\n      propsHistory: propsHistory.current\n    })\n  };\n};\n\nexport default useRenderTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}