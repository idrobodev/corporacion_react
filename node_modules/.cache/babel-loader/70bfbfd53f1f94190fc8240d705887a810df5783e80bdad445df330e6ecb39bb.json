{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useIsMobile, useIsTablet, useIsDesktop } from './useMediaQuery';\n\n/**\n * Custom hook para manejar el estado del sidebar a través de toda la aplicación\n * Permite abrir/cerrar y colapsar/expandir el sidebar, guardando el estado en localStorage\n * Incluye lógica responsive para manejar diferentes estados según el dispositivo\n */\nconst useSidebar = () => {\n  _s();\n  // Detectar tipo de dispositivo\n  const isMobile = useIsMobile();\n  const isTablet = useIsTablet();\n  const isDesktop = useIsDesktop();\n\n  // Estado para controlar si el sidebar está abierto en móvil\n  const [sidebarOpen, setSidebarOpen] = useState(() => {\n    try {\n      const v = localStorage.getItem('sidebarOpen');\n      return v ? JSON.parse(v) : false;\n    } catch (_) {\n      return false;\n    }\n  });\n\n  // Estado para controlar si el sidebar está colapsado en desktop\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(() => {\n    try {\n      const v = localStorage.getItem('sidebarCollapsed');\n      return v ? JSON.parse(v) : false;\n    } catch (_) {\n      return false;\n    }\n  });\n\n  /**\n   * Auto-cerrar sidebar móvil al cambiar a desktop/tablet\n   * Auto-expandir sidebar al cambiar de desktop a tablet\n   */\n  useEffect(() => {\n    // Si cambiamos a tablet o desktop, cerrar el sidebar móvil\n    if (!isMobile && sidebarOpen) {\n      setSidebarOpen(false);\n      try {\n        localStorage.setItem('sidebarOpen', JSON.stringify(false));\n      } catch (_) {}\n    }\n\n    // Si cambiamos a móvil o tablet, auto-expandir el sidebar (no colapsado)\n    if ((isMobile || isTablet) && sidebarCollapsed) {\n      setSidebarCollapsed(false);\n      try {\n        localStorage.setItem('sidebarCollapsed', JSON.stringify(false));\n      } catch (_) {}\n    }\n  }, [isMobile, isTablet, sidebarOpen, sidebarCollapsed]);\n\n  /**\n   * Función para alternar el estado de apertura del sidebar en móvil\n   */\n  const toggleSidebarOpen = useCallback(() => {\n    const next = !sidebarOpen;\n    setSidebarOpen(next);\n    try {\n      localStorage.setItem('sidebarOpen', JSON.stringify(next));\n    } catch (_) {}\n  }, [sidebarOpen]);\n\n  /**\n   * Función para alternar el estado de colapso del sidebar en desktop\n   */\n  const toggleSidebarCollapsed = useCallback(() => {\n    const next = !sidebarCollapsed;\n    setSidebarCollapsed(next);\n    try {\n      localStorage.setItem('sidebarCollapsed', JSON.stringify(next));\n    } catch (_) {}\n  }, [sidebarCollapsed]);\n\n  /**\n   * Función para cerrar el sidebar si estamos en móvil\n   * Útil para cerrar automáticamente al hacer clic en un item del menú\n   */\n  const closeIfMobile = useCallback(() => {\n    if (isMobile && sidebarOpen) {\n      setSidebarOpen(false);\n      try {\n        localStorage.setItem('sidebarOpen', JSON.stringify(false));\n      } catch (_) {}\n    }\n  }, [isMobile, sidebarOpen]);\n\n  /**\n   * Función para abrir el sidebar (solo en móvil)\n   */\n  const openSidebar = useCallback(() => {\n    if (isMobile) {\n      setSidebarOpen(true);\n      try {\n        localStorage.setItem('sidebarOpen', JSON.stringify(true));\n      } catch (_) {}\n    }\n  }, [isMobile]);\n\n  /**\n   * Función para cerrar el sidebar (solo en móvil)\n   */\n  const closeSidebar = useCallback(() => {\n    if (isMobile) {\n      setSidebarOpen(false);\n      try {\n        localStorage.setItem('sidebarOpen', JSON.stringify(false));\n      } catch (_) {}\n    }\n  }, [isMobile]);\n  return {\n    // Estados\n    sidebarOpen,\n    sidebarCollapsed,\n    isMobile,\n    isTablet,\n    isDesktop,\n    // Funciones de toggle\n    toggleSidebarOpen,\n    toggleSidebarCollapsed,\n    // Funciones de control\n    closeIfMobile,\n    openSidebar,\n    closeSidebar,\n    // Estados derivados útiles\n    isOverlay: isMobile,\n    // El sidebar es overlay solo en móvil\n    canCollapse: isDesktop,\n    // Solo se puede colapsar en desktop\n    isVisible: isMobile ? sidebarOpen : true // En desktop siempre visible, en móvil depende de sidebarOpen\n  };\n};\n_s(useSidebar, \"jK3EyxVnYuT0tTXP/xporXwSMJE=\", false, function () {\n  return [useIsMobile, useIsTablet, useIsDesktop];\n});\nexport default useSidebar;","map":{"version":3,"names":["useState","useEffect","useCallback","useIsMobile","useIsTablet","useIsDesktop","useSidebar","_s","isMobile","isTablet","isDesktop","sidebarOpen","setSidebarOpen","v","localStorage","getItem","JSON","parse","_","sidebarCollapsed","setSidebarCollapsed","setItem","stringify","toggleSidebarOpen","next","toggleSidebarCollapsed","closeIfMobile","openSidebar","closeSidebar","isOverlay","canCollapse","isVisible"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/hooks/useSidebar.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useIsMobile, useIsTablet, useIsDesktop } from './useMediaQuery';\n\n/**\n * Custom hook para manejar el estado del sidebar a través de toda la aplicación\n * Permite abrir/cerrar y colapsar/expandir el sidebar, guardando el estado en localStorage\n * Incluye lógica responsive para manejar diferentes estados según el dispositivo\n */\nconst useSidebar = () => {\n  // Detectar tipo de dispositivo\n  const isMobile = useIsMobile();\n  const isTablet = useIsTablet();\n  const isDesktop = useIsDesktop();\n\n  // Estado para controlar si el sidebar está abierto en móvil\n  const [sidebarOpen, setSidebarOpen] = useState(() => {\n    try {\n      const v = localStorage.getItem('sidebarOpen');\n      return v ? JSON.parse(v) : false;\n    } catch (_) {\n      return false;\n    }\n  });\n\n  // Estado para controlar si el sidebar está colapsado en desktop\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(() => {\n    try {\n      const v = localStorage.getItem('sidebarCollapsed');\n      return v ? JSON.parse(v) : false;\n    } catch (_) {\n      return false;\n    }\n  });\n\n  /**\n   * Auto-cerrar sidebar móvil al cambiar a desktop/tablet\n   * Auto-expandir sidebar al cambiar de desktop a tablet\n   */\n  useEffect(() => {\n    // Si cambiamos a tablet o desktop, cerrar el sidebar móvil\n    if (!isMobile && sidebarOpen) {\n      setSidebarOpen(false);\n      try {\n        localStorage.setItem('sidebarOpen', JSON.stringify(false));\n      } catch (_) {}\n    }\n\n    // Si cambiamos a móvil o tablet, auto-expandir el sidebar (no colapsado)\n    if ((isMobile || isTablet) && sidebarCollapsed) {\n      setSidebarCollapsed(false);\n      try {\n        localStorage.setItem('sidebarCollapsed', JSON.stringify(false));\n      } catch (_) {}\n    }\n  }, [isMobile, isTablet, sidebarOpen, sidebarCollapsed]);\n\n  /**\n   * Función para alternar el estado de apertura del sidebar en móvil\n   */\n  const toggleSidebarOpen = useCallback(() => {\n    const next = !sidebarOpen;\n    setSidebarOpen(next);\n    try { \n      localStorage.setItem('sidebarOpen', JSON.stringify(next)); \n    } catch (_) {}\n  }, [sidebarOpen]);\n\n  /**\n   * Función para alternar el estado de colapso del sidebar en desktop\n   */\n  const toggleSidebarCollapsed = useCallback(() => {\n    const next = !sidebarCollapsed;\n    setSidebarCollapsed(next);\n    try { \n      localStorage.setItem('sidebarCollapsed', JSON.stringify(next)); \n    } catch (_) {}\n  }, [sidebarCollapsed]);\n\n  /**\n   * Función para cerrar el sidebar si estamos en móvil\n   * Útil para cerrar automáticamente al hacer clic en un item del menú\n   */\n  const closeIfMobile = useCallback(() => {\n    if (isMobile && sidebarOpen) {\n      setSidebarOpen(false);\n      try {\n        localStorage.setItem('sidebarOpen', JSON.stringify(false));\n      } catch (_) {}\n    }\n  }, [isMobile, sidebarOpen]);\n\n  /**\n   * Función para abrir el sidebar (solo en móvil)\n   */\n  const openSidebar = useCallback(() => {\n    if (isMobile) {\n      setSidebarOpen(true);\n      try {\n        localStorage.setItem('sidebarOpen', JSON.stringify(true));\n      } catch (_) {}\n    }\n  }, [isMobile]);\n\n  /**\n   * Función para cerrar el sidebar (solo en móvil)\n   */\n  const closeSidebar = useCallback(() => {\n    if (isMobile) {\n      setSidebarOpen(false);\n      try {\n        localStorage.setItem('sidebarOpen', JSON.stringify(false));\n      } catch (_) {}\n    }\n  }, [isMobile]);\n\n  return { \n    // Estados\n    sidebarOpen, \n    sidebarCollapsed,\n    isMobile,\n    isTablet,\n    isDesktop,\n    \n    // Funciones de toggle\n    toggleSidebarOpen, \n    toggleSidebarCollapsed,\n    \n    // Funciones de control\n    closeIfMobile,\n    openSidebar,\n    closeSidebar,\n    \n    // Estados derivados útiles\n    isOverlay: isMobile, // El sidebar es overlay solo en móvil\n    canCollapse: isDesktop, // Solo se puede colapsar en desktop\n    isVisible: isMobile ? sidebarOpen : true, // En desktop siempre visible, en móvil depende de sidebarOpen\n  };\n};\n\nexport default useSidebar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}