{"ast":null,"code":"import { api, ROLES } from './api';\n\n// Re-exportar roles para compatibilidad\nexport { ROLES };\nclass DatabaseService {\n  // Obtener usuario actual con rol\n  async getCurrentUser() {\n    return await api.getCurrentUser();\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    return await api.hasPermission(requiredRole);\n  }\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    return await api.getDashboardData();\n  }\n\n  // Obtener participantes\n  async getParticipantes() {\n    return await api.getParticipantes();\n  }\n\n  // Obtener mensualidades/pagos\n  async getMensualidades() {\n    return await api.getMensualidades();\n  }\n\n  // Crear nuevo participante\n  async createParticipante(participanteData) {\n    return await api.createParticipante(participanteData);\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    return await api.updateParticipante(id, participanteData);\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    return await api.deleteParticipante(id);\n  }\n\n  // ==================== USUARIOS ====================\n\n  // Obtener lista de usuarios\n  async getUsuarios() {\n    return await api.getUsuarios();\n  }\n\n  // Crear nuevo usuario\n  async createUsuario(usuarioData) {\n    return await api.createUsuario(usuarioData);\n  }\n\n  // Actualizar usuario\n  async updateUsuario(id, usuarioData) {\n    return await api.updateUsuario(id, usuarioData);\n  }\n\n  // Eliminar usuario\n  async deleteUsuario(id) {\n    return await api.deleteUsuario(id);\n  }\n\n  // ==================== ACUDIENTES ====================\n\n  // Obtener lista de acudientes\n  async getAcudientes(filters) {\n    return await api.getAcudientes(filters);\n  }\n\n  // Obtener acudientes de un participante específico\n  async getAcudientesByParticipante(participanteId) {\n    return await api.getAcudientesByParticipante(participanteId);\n  }\n\n  // Crear nuevo acudiente\n  async createAcudiente(acudienteData) {\n    return await api.createAcudiente(acudienteData);\n  }\n\n  // Actualizar acudiente\n  async updateAcudiente(id, acudienteData) {\n    return await api.updateAcudiente(id, acudienteData);\n  }\n\n  // Eliminar acudiente\n  async deleteAcudiente(id) {\n    return await api.deleteAcudiente(id);\n  }\n\n  // ==================== SEDES ====================\n\n  // Obtener sedes\n  async getSedes() {\n    return await api.getSedes();\n  }\n\n  // Crear nueva sede\n  async createSede(sedeData) {\n    return await api.createSede(sedeData);\n  }\n\n  // Actualizar sede\n  async updateSede(id, sedeData) {\n    return await api.updateSede(id, sedeData);\n  }\n\n  // Eliminar sede\n  async deleteSede(id) {\n    return await api.deleteSede(id);\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    return await api.createMensualidad(mensualidadData);\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    return await api.updateMensualidad(id, mensualidadData);\n  }\n\n  // Verificar conexión con la API\n  async testConnection() {\n    return await api.testConnection();\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return api.getApiConfig();\n  }\n}\n\n// Exportar instancia única del servicio\nexport const dbService = new DatabaseService();\nexport default dbService;","map":{"version":3,"names":["api","ROLES","DatabaseService","getCurrentUser","hasPermission","requiredRole","getDashboardData","getParticipantes","getMensualidades","createParticipante","participanteData","updateParticipante","id","deleteParticipante","getUsuarios","createUsuario","usuarioData","updateUsuario","deleteUsuario","getAcudientes","filters","getAcudientesByParticipante","participanteId","createAcudiente","acudienteData","updateAcudiente","deleteAcudiente","getSedes","createSede","sedeData","updateSede","deleteSede","createMensualidad","mensualidadData","updateMensualidad","testConnection","getApiConfig","dbService"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/services/database.js"],"sourcesContent":["import { api, ROLES } from './api';\n\n// Re-exportar roles para compatibilidad\nexport { ROLES };\n\nclass DatabaseService {\n  // Obtener usuario actual con rol\n  async getCurrentUser() {\n    return await api.getCurrentUser();\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    return await api.hasPermission(requiredRole);\n  }\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    return await api.getDashboardData();\n  }\n\n  // Obtener participantes\n  async getParticipantes() {\n    return await api.getParticipantes();\n  }\n\n  // Obtener mensualidades/pagos\n  async getMensualidades() {\n    return await api.getMensualidades();\n  }\n\n\n  // Crear nuevo participante\n  async createParticipante(participanteData) {\n    return await api.createParticipante(participanteData);\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    return await api.updateParticipante(id, participanteData);\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    return await api.deleteParticipante(id);\n  }\n\n  // ==================== USUARIOS ====================\n  \n  // Obtener lista de usuarios\n  async getUsuarios() {\n    return await api.getUsuarios();\n  }\n\n  // Crear nuevo usuario\n  async createUsuario(usuarioData) {\n    return await api.createUsuario(usuarioData);\n  }\n\n  // Actualizar usuario\n  async updateUsuario(id, usuarioData) {\n    return await api.updateUsuario(id, usuarioData);\n  }\n\n  // Eliminar usuario\n  async deleteUsuario(id) {\n    return await api.deleteUsuario(id);\n  }\n\n  // ==================== ACUDIENTES ====================\n  \n  // Obtener lista de acudientes\n  async getAcudientes(filters) {\n    return await api.getAcudientes(filters);\n  }\n\n  // Obtener acudientes de un participante específico\n  async getAcudientesByParticipante(participanteId) {\n    return await api.getAcudientesByParticipante(participanteId);\n  }\n\n  // Crear nuevo acudiente\n  async createAcudiente(acudienteData) {\n    return await api.createAcudiente(acudienteData);\n  }\n\n  // Actualizar acudiente\n  async updateAcudiente(id, acudienteData) {\n    return await api.updateAcudiente(id, acudienteData);\n  }\n\n  // Eliminar acudiente\n  async deleteAcudiente(id) {\n    return await api.deleteAcudiente(id);\n  }\n\n  // ==================== SEDES ====================\n\n  // Obtener sedes\n  async getSedes() {\n    return await api.getSedes();\n  }\n\n  // Crear nueva sede\n  async createSede(sedeData) {\n    return await api.createSede(sedeData);\n  }\n\n  // Actualizar sede\n  async updateSede(id, sedeData) {\n    return await api.updateSede(id, sedeData);\n  }\n\n  // Eliminar sede\n  async deleteSede(id) {\n    return await api.deleteSede(id);\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    return await api.createMensualidad(mensualidadData);\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    return await api.updateMensualidad(id, mensualidadData);\n  }\n\n  // Verificar conexión con la API\n  async testConnection() {\n    return await api.testConnection();\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return api.getApiConfig();\n  }\n}\n\n// Exportar instancia única del servicio\nexport const dbService = new DatabaseService();\nexport default dbService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}