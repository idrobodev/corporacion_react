{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useMemo } from 'react';\nimport { dbService } from '../services/database';\nimport useDebouncedSearch from './useDebouncedSearch';\n\n// Hook personalizado para manejar datos financieros\nexport const useFinanceData = () => {\n  _s();\n  const [state, setState] = useState({\n    mensualidades: [],\n    participants: [],\n    sedes: [],\n    error: null,\n    loading: true\n  });\n  const [filters, setFilters] = useState({\n    month: 'all',\n    sede: 'all',\n    year: 'all'\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [debouncedSearch] = useDebouncedSearch(searchTerm);\n\n  // Cargar datos iniciales\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setState(prev => ({\n          ...prev,\n          loading: true\n        }));\n        const [mensRes, partsRes, sedesRes] = await Promise.all([dbService.getMensualidades(), dbService.getParticipantes(), dbService.getSedes()]);\n        setState({\n          mensualidades: mensRes.data || [],\n          participants: partsRes.data || [],\n          sedes: sedesRes.data || [],\n          error: null,\n          loading: false\n        });\n      } catch (err) {\n        setState(prev => ({\n          ...prev,\n          error: err.message,\n          loading: false\n        }));\n      }\n    };\n    loadData();\n  }, []);\n\n  // Datos filtrados\n  const filteredData = useMemo(() => {\n    let filtered = state.mensualidades;\n    if (filters.month !== 'all') {\n      filtered = filtered.filter(m => m.mes === parseInt(filters.month));\n    }\n    if (filters.sede !== 'all') {\n      filtered = filtered.filter(m => m.sede_id === parseInt(filters.sede));\n    }\n    if (filters.year !== 'all') {\n      filtered = filtered.filter(m => m.año === parseInt(filters.year));\n    }\n    if (debouncedSearch) {\n      const searchLower = debouncedSearch.toLowerCase();\n      filtered = filtered.filter(m => (m.participant_name || '').toLowerCase().includes(searchLower));\n    }\n    return filtered;\n  }, [state.mensualidades, filters, debouncedSearch]);\n\n  // Funciones de actualización\n  const updateFilters = newFilters => {\n    setFilters(prev => ({\n      ...prev,\n      ...newFilters\n    }));\n  };\n  const refreshData = async () => {\n    try {\n      setState(prev => ({\n        ...prev,\n        loading: true\n      }));\n      const {\n        data\n      } = await dbService.getMensualidades();\n      setState(prev => ({\n        ...prev,\n        mensualidades: data || [],\n        loading: false\n      }));\n    } catch (err) {\n      setState(prev => ({\n        ...prev,\n        error: err.message,\n        loading: false\n      }));\n    }\n  };\n  return {\n    ...state,\n    filters,\n    searchTerm,\n    filteredData,\n    setSearchTerm,\n    updateFilters,\n    refreshData\n  };\n};\n_s(useFinanceData, \"WERa0UUhBTcYaLNp2ewyus3JBxo=\", false, function () {\n  return [useDebouncedSearch];\n});\nexport default useFinanceData;","map":{"version":3,"names":["useState","useEffect","useMemo","dbService","useDebouncedSearch","useFinanceData","_s","state","setState","mensualidades","participants","sedes","error","loading","filters","setFilters","month","sede","year","searchTerm","setSearchTerm","debouncedSearch","loadData","prev","mensRes","partsRes","sedesRes","Promise","all","getMensualidades","getParticipantes","getSedes","data","err","message","filteredData","filtered","filter","m","mes","parseInt","sede_id","año","searchLower","toLowerCase","participant_name","includes","updateFilters","newFilters","refreshData"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/hooks/useFinanceData.js"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { dbService } from '../services/database';\nimport useDebouncedSearch from './useDebouncedSearch';\n\n// Hook personalizado para manejar datos financieros\nexport const useFinanceData = () => {\n  const [state, setState] = useState({\n    mensualidades: [],\n    participants: [],\n    sedes: [],\n    error: null,\n    loading: true\n  });\n\n  const [filters, setFilters] = useState({ \n    month: 'all', \n    sede: 'all', \n    year: 'all' \n  });\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [debouncedSearch] = useDebouncedSearch(searchTerm);\n\n  // Cargar datos iniciales\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setState(prev => ({ ...prev, loading: true }));\n        \n        const [mensRes, partsRes, sedesRes] = await Promise.all([\n          dbService.getMensualidades(),\n          dbService.getParticipantes(),\n          dbService.getSedes()\n        ]);\n\n        setState({\n          mensualidades: mensRes.data || [],\n          participants: partsRes.data || [],\n          sedes: sedesRes.data || [],\n          error: null,\n          loading: false\n        });\n      } catch (err) {\n        setState(prev => ({\n          ...prev,\n          error: err.message,\n          loading: false\n        }));\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Datos filtrados\n  const filteredData = useMemo(() => {\n    let filtered = state.mensualidades;\n\n    if (filters.month !== 'all') {\n      filtered = filtered.filter(m => m.mes === parseInt(filters.month));\n    }\n    \n    if (filters.sede !== 'all') {\n      filtered = filtered.filter(m => m.sede_id === parseInt(filters.sede));\n    }\n    \n    if (filters.year !== 'all') {\n      filtered = filtered.filter(m => m.año === parseInt(filters.year));\n    }\n    \n    if (debouncedSearch) {\n      const searchLower = debouncedSearch.toLowerCase();\n      filtered = filtered.filter(m =>\n        (m.participant_name || '').toLowerCase().includes(searchLower)\n      );\n    }\n\n    return filtered;\n  }, [state.mensualidades, filters, debouncedSearch]);\n\n  // Funciones de actualización\n  const updateFilters = (newFilters) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n  };\n\n  const refreshData = async () => {\n    try {\n      setState(prev => ({ ...prev, loading: true }));\n      const { data } = await dbService.getMensualidades();\n      setState(prev => ({\n        ...prev,\n        mensualidades: data || [],\n        loading: false\n      }));\n    } catch (err) {\n      setState(prev => ({\n        ...prev,\n        error: err.message,\n        loading: false\n      }));\n    }\n  };\n\n  return {\n    ...state,\n    filters,\n    searchTerm,\n    filteredData,\n    setSearchTerm,\n    updateFilters,\n    refreshData\n  };\n};\n\nexport default useFinanceData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}