{"ast":null,"code":"import axios from'axios';// Configuración de la API de formatos\nconst FORMATOS_API_BASE_URL=process.env.REACT_APP_FORMATOS_API_URL||'http://localhost:8001/api';console.log('🔧 FORMATOS_API_BASE_URL configurada como:',FORMATOS_API_BASE_URL);// Crear instancia de axios para la API de formatos\nconst formatosClient=axios.create({baseURL:FORMATOS_API_BASE_URL,timeout:30000,withCredentials:false,headers:{'Content-Type':'application/json','Accept':'application/json'}});// Interceptor para manejar respuestas y errores\nformatosClient.interceptors.response.use(response=>response,error=>{var _error$config,_error$response,_error$response2,_error$response3,_error$response4,_error$response5,_error$response6;console.error('Error en formatos API:',(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,error.message);// Manejar errores específicos\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===413){throw new Error('El archivo es demasiado grande (máximo 100MB)');}else if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===409){var _error$response$data;throw new Error(((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||'Conflicto: el recurso ya existe');}else if(((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)===404){throw new Error('Recurso no encontrado');}else if(((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status)===400){var _error$response$data2;throw new Error(((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.detail)||'Datos inválidos');}else if(((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status)===500){throw new Error('Error interno del servidor');}// Error de red o desconocido\nif(!error.response){throw new Error('No se puede conectar con el servidor de formatos');}throw error;});class FormatosApiService{// ==================== ARCHIVOS ====================\n/**\n   * Lista archivos y carpetas en una ruta específica\n   * @param {string} path - Ruta a listar (opcional, default=\"\")\n   * @returns {Promise<{files: Array, folders: Array, path: string}>}\n   */async listFiles(){let path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";try{const response=await formatosClient.get('/files/list',{params:{path}});return response.data;}catch(error){console.error('Error listando archivos:',error);throw error;}}/**\n   * Sube un archivo al servidor\n   * Los archivos se organizan automáticamente en carpetas por tipo\n   * @param {File} file - Archivo a subir\n   * @returns {Promise<Object>} Información del archivo subido\n   */async uploadFile(file){try{const formData=new FormData();formData.append('file',file);const response=await formatosClient.post('/files/upload',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){console.error('Error subiendo archivo:',error);throw error;}}/**\n   * Descarga un archivo por su ID\n   * @param {number} fileId - ID del archivo\n   * @returns {Promise<Blob>} Archivo como blob\n   */async downloadFile(fileId){try{const response=await formatosClient.get(\"/files/download/\".concat(fileId),{responseType:'blob'});return response.data;}catch(error){console.error('Error descargando archivo:',error);throw error;}}/**\n   * Elimina un archivo por su ID\n   * @param {number} fileId - ID del archivo a eliminar\n   * @returns {Promise<Object>} Confirmación de eliminación\n   */async deleteFile(fileId){try{const response=await formatosClient.delete(\"/files/\".concat(fileId));return response.data;}catch(error){console.error('Error eliminando archivo:',error);throw error;}}// ==================== CARPETAS ====================\n/**\n   * Crea una nueva carpeta\n   * @param {string} nombre - Nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre (opcional)\n   * @returns {Promise<Object>} Información de la carpeta creada\n   */async createFolder(nombre){let parentPath=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";try{const response=await formatosClient.post('/folders/create',{nombre,parentPath});return response.data;}catch(error){console.error('Error creando carpeta:',error);throw error;}}/**\n   * Renombra una carpeta\n   * @param {string} oldName - Nombre actual de la carpeta\n   * @param {string} newName - Nuevo nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre\n   * @returns {Promise<Object>} Confirmación del cambio\n   */async renameFolder(oldName,newName){let parentPath=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"\";try{const response=await formatosClient.put('/folders/rename',{oldName,newName,parentPath});return response.data;}catch(error){console.error('Error renombrando carpeta:',error);throw error;}}/**\n   * Elimina una carpeta por su ID\n   * @param {number} folderId - ID de la carpeta a eliminar\n   * @returns {Promise<Object>} Confirmación de eliminación\n   */async deleteFolder(folderId){try{const response=await formatosClient.delete(\"/folders/\".concat(folderId));return response.data;}catch(error){console.error('Error eliminando carpeta:',error);throw error;}}}// Exportar instancia única del servicio\nexport const formatosApi=new FormatosApiService();export default formatosApi;","map":{"version":3,"names":["axios","FORMATOS_API_BASE_URL","process","env","REACT_APP_FORMATOS_API_URL","console","log","formatosClient","create","baseURL","timeout","withCredentials","headers","interceptors","response","use","error","_error$config","_error$response","_error$response2","_error$response3","_error$response4","_error$response5","_error$response6","config","url","status","message","Error","_error$response$data","data","detail","_error$response$data2","FormatosApiService","listFiles","path","arguments","length","undefined","get","params","uploadFile","file","formData","FormData","append","post","downloadFile","fileId","concat","responseType","deleteFile","delete","createFolder","nombre","parentPath","renameFolder","oldName","newName","put","deleteFolder","folderId","formatosApi"],"sources":["/Users/todoporunalma/Desktop/Corporacion/coptua_react/src/shared/services/formatosApi.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuración de la API de formatos\nconst FORMATOS_API_BASE_URL = process.env.REACT_APP_FORMATOS_API_URL ||\n  'http://localhost:8001/api';\n\nconsole.log('🔧 FORMATOS_API_BASE_URL configurada como:', FORMATOS_API_BASE_URL);\n\n// Crear instancia de axios para la API de formatos\nconst formatosClient = axios.create({\n  baseURL: FORMATOS_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Interceptor para manejar respuestas y errores\nformatosClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('Error en formatos API:', error.config?.url, error.response?.status, error.message);\n\n    // Manejar errores específicos\n    if (error.response?.status === 413) {\n      throw new Error('El archivo es demasiado grande (máximo 100MB)');\n    } else if (error.response?.status === 409) {\n      throw new Error(error.response.data?.detail || 'Conflicto: el recurso ya existe');\n    } else if (error.response?.status === 404) {\n      throw new Error('Recurso no encontrado');\n    } else if (error.response?.status === 400) {\n      throw new Error(error.response.data?.detail || 'Datos inválidos');\n    } else if (error.response?.status === 500) {\n      throw new Error('Error interno del servidor');\n    }\n\n    // Error de red o desconocido\n    if (!error.response) {\n      throw new Error('No se puede conectar con el servidor de formatos');\n    }\n\n    throw error;\n  }\n);\n\nclass FormatosApiService {\n  // ==================== ARCHIVOS ====================\n\n  /**\n   * Lista archivos y carpetas en una ruta específica\n   * @param {string} path - Ruta a listar (opcional, default=\"\")\n   * @returns {Promise<{files: Array, folders: Array, path: string}>}\n   */\n  async listFiles(path = \"\") {\n    try {\n      const response = await formatosClient.get('/files/list', {\n        params: { path }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error listando archivos:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sube un archivo al servidor\n   * Los archivos se organizan automáticamente en carpetas por tipo\n   * @param {File} file - Archivo a subir\n   * @returns {Promise<Object>} Información del archivo subido\n   */\n  async uploadFile(file) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await formatosClient.post('/files/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('Error subiendo archivo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Descarga un archivo por su ID\n   * @param {number} fileId - ID del archivo\n   * @returns {Promise<Blob>} Archivo como blob\n   */\n  async downloadFile(fileId) {\n    try {\n      const response = await formatosClient.get(`/files/download/${fileId}`, {\n        responseType: 'blob',\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error descargando archivo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Elimina un archivo por su ID\n   * @param {number} fileId - ID del archivo a eliminar\n   * @returns {Promise<Object>} Confirmación de eliminación\n   */\n  async deleteFile(fileId) {\n    try {\n      const response = await formatosClient.delete(`/files/${fileId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error eliminando archivo:', error);\n      throw error;\n    }\n  }\n\n  // ==================== CARPETAS ====================\n\n  /**\n   * Crea una nueva carpeta\n   * @param {string} nombre - Nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre (opcional)\n   * @returns {Promise<Object>} Información de la carpeta creada\n   */\n  async createFolder(nombre, parentPath = \"\") {\n    try {\n      const response = await formatosClient.post('/folders/create', {\n        nombre,\n        parentPath\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creando carpeta:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Renombra una carpeta\n   * @param {string} oldName - Nombre actual de la carpeta\n   * @param {string} newName - Nuevo nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre\n   * @returns {Promise<Object>} Confirmación del cambio\n   */\n  async renameFolder(oldName, newName, parentPath = \"\") {\n    try {\n      const response = await formatosClient.put('/folders/rename', {\n        oldName,\n        newName,\n        parentPath\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error renombrando carpeta:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Elimina una carpeta por su ID\n   * @param {number} folderId - ID de la carpeta a eliminar\n   * @returns {Promise<Object>} Confirmación de eliminación\n   */\n  async deleteFolder(folderId) {\n    try {\n      const response = await formatosClient.delete(`/folders/${folderId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error eliminando carpeta:', error);\n      throw error;\n    }\n  }\n}\n\n// Exportar instancia única del servicio\nexport const formatosApi = new FormatosApiService();\nexport default formatosApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}