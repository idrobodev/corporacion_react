{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { toFileWithPath } from './file';\nconst FILES_TO_IGNORE = [\n// Thumbnail cache files for macOS and Windows\n'.DS_Store',\n// macOs\n'Thumbs.db' // Windows\n];\n/**\n * Convert a DragEvent's DataTrasfer object to a list of File objects\n * NOTE: If some of the items are folders,\n * everything will be flattened and placed in the same list but the paths will be kept as a {path} property.\n *\n * EXPERIMENTAL: A list of https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle objects can also be passed as an arg\n * and a list of File objects will be returned.\n *\n * @param evt\n */\nexport function fromEvent(evt) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (isObject(evt) && isDataTransfer(evt.dataTransfer)) {\n      return getDataTransferFiles(evt.dataTransfer, evt.type);\n    } else if (isChangeEvt(evt)) {\n      return getInputFiles(evt);\n    } else if (Array.isArray(evt) && evt.every(item => 'getFile' in item && typeof item.getFile === 'function')) {\n      return getFsHandleFiles(evt);\n    }\n    return [];\n  });\n}\nfunction isDataTransfer(value) {\n  return isObject(value);\n}\nfunction isChangeEvt(value) {\n  return isObject(value) && isObject(value.target);\n}\nfunction isObject(v) {\n  return typeof v === 'object' && v !== null;\n}\nfunction getInputFiles(evt) {\n  return fromList(evt.target.files).map(file => toFileWithPath(file));\n}\n// Ee expect each handle to be https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileHandle\nfunction getFsHandleFiles(handles) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const files = yield Promise.all(handles.map(h => h.getFile()));\n    return files.map(file => toFileWithPath(file));\n  });\n}\nfunction getDataTransferFiles(dt, type) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // IE11 does not support dataTransfer.items\n    // See https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items#Browser_compatibility\n    if (dt.items) {\n      const items = fromList(dt.items).filter(item => item.kind === 'file');\n      // According to https://html.spec.whatwg.org/multipage/dnd.html#dndevents,\n      // only 'dragstart' and 'drop' has access to the data (source node)\n      if (type !== 'drop') {\n        return items;\n      }\n      const files = yield Promise.all(items.map(toFilePromises));\n      return noIgnoredFiles(flatten(files));\n    }\n    return noIgnoredFiles(fromList(dt.files).map(file => toFileWithPath(file)));\n  });\n}\nfunction noIgnoredFiles(files) {\n  return files.filter(file => FILES_TO_IGNORE.indexOf(file.name) === -1);\n}\n// IE11 does not support Array.from()\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Browser_compatibility\n// https://developer.mozilla.org/en-US/docs/Web/API/FileList\n// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList\nfunction fromList(items) {\n  if (items === null) {\n    return [];\n  }\n  const files = [];\n  // tslint:disable: prefer-for-of\n  for (let i = 0; i < items.length; i++) {\n    const file = items[i];\n    files.push(file);\n  }\n  return files;\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem\nfunction toFilePromises(item) {\n  if (typeof item.webkitGetAsEntry !== 'function') {\n    return fromDataTransferItem(item);\n  }\n  const entry = item.webkitGetAsEntry();\n  // Safari supports dropping an image node from a different window and can be retrieved using\n  // the DataTransferItem.getAsFile() API\n  // NOTE: FileSystemEntry.file() throws if trying to get the file\n  if (entry && entry.isDirectory) {\n    return fromDirEntry(entry);\n  }\n  return fromDataTransferItem(item, entry);\n}\nfunction flatten(items) {\n  return items.reduce((acc, files) => [...acc, ...(Array.isArray(files) ? flatten(files) : [files])], []);\n}\nfunction fromDataTransferItem(item, entry) {\n  return __awaiter(this, void 0, void 0, function* () {\n    var _a;\n    // Check if we're in a secure context; due to a bug in Chrome (as far as we know)\n    // the browser crashes when calling this API (yet to be confirmed as a consistent behaviour).\n    //\n    // See:\n    // - https://issues.chromium.org/issues/40186242\n    // - https://github.com/react-dropzone/react-dropzone/issues/1397\n    if (globalThis.isSecureContext && typeof item.getAsFileSystemHandle === 'function') {\n      const h = yield item.getAsFileSystemHandle();\n      if (h === null) {\n        throw new Error(\"\".concat(item, \" is not a File\"));\n      }\n      // It seems that the handle can be `undefined` (see https://github.com/react-dropzone/file-selector/issues/120),\n      // so we check if it isn't; if it is, the code path continues to the next API (`getAsFile`).\n      if (h !== undefined) {\n        const file = yield h.getFile();\n        file.handle = h;\n        return toFileWithPath(file);\n      }\n    }\n    const file = item.getAsFile();\n    if (!file) {\n      throw new Error(\"\".concat(item, \" is not a File\"));\n    }\n    const fwp = toFileWithPath(file, (_a = entry === null || entry === void 0 ? void 0 : entry.fullPath) !== null && _a !== void 0 ? _a : undefined);\n    return fwp;\n  });\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry\nfunction fromEntry(entry) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry);\n  });\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry\nfunction fromDirEntry(entry) {\n  const reader = entry.createReader();\n  return new Promise((resolve, reject) => {\n    const entries = [];\n    function readEntries() {\n      // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/createReader\n      // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries\n      reader.readEntries(batch => __awaiter(this, void 0, void 0, function* () {\n        if (!batch.length) {\n          // Done reading directory\n          try {\n            const files = yield Promise.all(entries);\n            resolve(files);\n          } catch (err) {\n            reject(err);\n          }\n        } else {\n          const items = Promise.all(batch.map(fromEntry));\n          entries.push(items);\n          // Continue reading\n          readEntries();\n        }\n      }), err => {\n        reject(err);\n      });\n    }\n    readEntries();\n  });\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry\nfunction fromFileEntry(entry) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      entry.file(file => {\n        const fwp = toFileWithPath(file, entry.fullPath);\n        resolve(fwp);\n      }, err => {\n        reject(err);\n      });\n    });\n  });\n}","map":{"version":3,"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/node_modules/file-selector/src/file-selector.ts"],"names":[],"mappings":"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","sourcesContent":["import {FileWithPath, toFileWithPath} from './file';\n\n\nconst FILES_TO_IGNORE = [\n    // Thumbnail cache files for macOS and Windows\n    '.DS_Store', // macOs\n    'Thumbs.db'  // Windows\n];\n\n\n/**\n * Convert a DragEvent's DataTrasfer object to a list of File objects\n * NOTE: If some of the items are folders,\n * everything will be flattened and placed in the same list but the paths will be kept as a {path} property.\n *\n * EXPERIMENTAL: A list of https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle objects can also be passed as an arg\n * and a list of File objects will be returned.\n *\n * @param evt\n */\nexport async function fromEvent(evt: Event | any): Promise<(FileWithPath | DataTransferItem)[]> {\n    if (isObject<DragEvent>(evt) && isDataTransfer(evt.dataTransfer)) {\n        return getDataTransferFiles(evt.dataTransfer, evt.type);\n    } else if (isChangeEvt(evt)) {\n        return getInputFiles(evt);\n    } else if (Array.isArray(evt) && evt.every(item => 'getFile' in item && typeof item.getFile === 'function')) {\n        return getFsHandleFiles(evt)\n    }\n    return [];\n}\n\nfunction isDataTransfer(value: any): value is DataTransfer {\n    return isObject(value);\n}\n\nfunction isChangeEvt(value: any): value is Event {\n    return isObject<Event>(value) && isObject(value.target);\n}\n\nfunction isObject<T>(v: any): v is T {\n    return typeof v === 'object' && v !== null\n}\n\nfunction getInputFiles(evt: Event) {\n    return fromList<FileWithPath>((evt.target as HTMLInputElement).files).map(file => toFileWithPath(file));\n}\n\n// Ee expect each handle to be https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileHandle\nasync function getFsHandleFiles(handles: any[]) {\n    const files = await Promise.all(handles.map(h => h.getFile()));\n    return files.map(file => toFileWithPath(file));\n}\n\n\nasync function getDataTransferFiles(dt: DataTransfer, type: string) {\n    // IE11 does not support dataTransfer.items\n    // See https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items#Browser_compatibility\n    if (dt.items) {\n        const items = fromList<DataTransferItem>(dt.items)\n            .filter(item => item.kind === 'file');\n        // According to https://html.spec.whatwg.org/multipage/dnd.html#dndevents,\n        // only 'dragstart' and 'drop' has access to the data (source node)\n        if (type !== 'drop') {\n            return items;\n        }\n        const files = await Promise.all(items.map(toFilePromises));\n        return noIgnoredFiles(flatten<FileWithPath>(files));\n    }\n\n    return noIgnoredFiles(fromList<FileWithPath>(dt.files)\n        .map(file => toFileWithPath(file)));\n}\n\nfunction noIgnoredFiles(files: FileWithPath[]) {\n    return files.filter(file => FILES_TO_IGNORE.indexOf(file.name) === -1);\n}\n\n// IE11 does not support Array.from()\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Browser_compatibility\n// https://developer.mozilla.org/en-US/docs/Web/API/FileList\n// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList\nfunction fromList<T>(items: DataTransferItemList | FileList | null): T[] {\n    if (items === null) {\n        return [];\n    }\n\n    const files = [];\n\n    // tslint:disable: prefer-for-of\n    for (let i = 0; i < items.length; i++) {\n        const file = items[i];\n        files.push(file);\n    }\n\n    return files as any;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem\nfunction toFilePromises(item: DataTransferItem) {\n    if (typeof item.webkitGetAsEntry !== 'function') {\n        return fromDataTransferItem(item);\n    }\n\n    const entry = item.webkitGetAsEntry();\n\n    // Safari supports dropping an image node from a different window and can be retrieved using\n    // the DataTransferItem.getAsFile() API\n    // NOTE: FileSystemEntry.file() throws if trying to get the file\n    if (entry && entry.isDirectory) {\n        return fromDirEntry(entry) as any;\n    }\n\n    return fromDataTransferItem(item, entry);\n}\n\nfunction flatten<T>(items: any[]): T[] {\n    return items.reduce((acc, files) => [\n        ...acc,\n        ...(Array.isArray(files) ? flatten(files) : [files])\n    ], []);\n}\n\nasync function fromDataTransferItem(item: DataTransferItem, entry?: FileSystemEntry | null) {\n    // Check if we're in a secure context; due to a bug in Chrome (as far as we know)\n    // the browser crashes when calling this API (yet to be confirmed as a consistent behaviour).\n    //\n    // See:\n    // - https://issues.chromium.org/issues/40186242\n    // - https://github.com/react-dropzone/react-dropzone/issues/1397\n    if (globalThis.isSecureContext && typeof (item as any).getAsFileSystemHandle === 'function') {\n        const h = await (item as any).getAsFileSystemHandle();\n        if (h === null) {\n            throw new Error(`${item} is not a File`);\n        }\n        // It seems that the handle can be `undefined` (see https://github.com/react-dropzone/file-selector/issues/120),\n        // so we check if it isn't; if it is, the code path continues to the next API (`getAsFile`).\n        if (h !== undefined) {\n            const file = await h.getFile();\n            file.handle = h;\n            return toFileWithPath(file);\n        }\n    }\n    const file = item.getAsFile();\n    if (!file) {\n        throw new Error(`${item} is not a File`);\n    }\n    const fwp = toFileWithPath(file, entry?.fullPath ?? undefined);\n    return fwp;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry\nasync function fromEntry(entry: any) {\n    return entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry\nfunction fromDirEntry(entry: any) {\n    const reader = entry.createReader();\n\n    return new Promise<FileArray[]>((resolve, reject) => {\n        const entries: Promise<FileValue[]>[] = [];\n\n        function readEntries() {\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/createReader\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries\n            reader.readEntries(async (batch: any[]) => {\n                if (!batch.length) {\n                    // Done reading directory\n                    try {\n                        const files = await Promise.all(entries);\n                        resolve(files);\n                    } catch (err) {\n                        reject(err);\n                    }\n                } else {\n                    const items = Promise.all(batch.map(fromEntry));\n                    entries.push(items);\n\n                    // Continue reading\n                    readEntries();\n                }\n            }, (err: any) => {\n                reject(err);\n            });\n        }\n\n        readEntries();\n    });\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry\nasync function fromFileEntry(entry: any) {\n    return new Promise<FileWithPath>((resolve, reject) => {\n        entry.file((file: FileWithPath) => {\n            const fwp = toFileWithPath(file, entry.fullPath);\n            resolve(fwp);\n        }, (err: any) => {\n            reject(err);\n        });\n    });\n}\n\n// Infinite type recursion\n// https://github.com/Microsoft/TypeScript/issues/3496#issuecomment-128553540\ninterface FileArray extends Array<FileValue> {}\ntype FileValue = FileWithPath\n    | FileArray[];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}