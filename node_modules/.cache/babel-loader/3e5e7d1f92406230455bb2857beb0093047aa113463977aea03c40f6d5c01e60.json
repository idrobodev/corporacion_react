{"ast":null,"code":"var _jsxFileName = \"/Users/todoporunalma/Desktop/ol/corporacion_react/src/pages/Dashboard/Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport DashboardLayout from \"components/layout/DashboardLayout\";\nimport { dbService } from \"shared/services\";\nimport { StatsGrid, ActionCard, LoadingState } from \"components/UI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardComponent = () => {\n  _s();\n  const [dashboardData, setDashboardData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  // Load dashboard data\n  useEffect(() => {\n    const loadDashboardData = async () => {\n      try {\n        var _dashboardResponse$da, _acudientesResult$dat, _acudientesResult$dat2;\n        setLoading(true);\n\n        // Load basic stats\n        const dashboardResponse = await dbService.getDashboardData();\n        console.log('Dashboard API Response:', dashboardResponse);\n        const {\n          participantes,\n          mensualidades\n        } = ((_dashboardResponse$da = dashboardResponse.data) === null || _dashboardResponse$da === void 0 ? void 0 : _dashboardResponse$da.data) || {};\n        console.log('Extracted data:', {\n          participantes,\n          mensualidades\n        });\n\n        // Load acudientes count\n        const acudientesResult = await dbService.getAcudientes();\n        const totalAcudientes = (acudientesResult === null || acudientesResult === void 0 ? void 0 : (_acudientesResult$dat = acudientesResult.data) === null || _acudientesResult$dat === void 0 ? void 0 : (_acudientesResult$dat2 = _acudientesResult$dat.data) === null || _acudientesResult$dat2 === void 0 ? void 0 : _acudientesResult$dat2.length) || 0;\n\n        // Calculate stats from real data\n        const stats = {\n          totalParticipantes: participantes || 0,\n          participantesActivos: participantes || 0,\n          // Assuming all are active for now\n          totalMensualidades: mensualidades || 0,\n          mensualidadesPagadas: Math.floor((mensualidades || 0) * 0.7),\n          // Mock 70% paid\n          mensualidadesPendientes: Math.ceil((mensualidades || 0) * 0.3),\n          // Mock 30% pending\n          totalAcudientes: totalAcudientes\n        };\n        setDashboardData(stats);\n      } catch (error) {\n        console.error('Error loading dashboard data:', error);\n        // Set default values on error\n        setDashboardData({\n          totalParticipantes: 0,\n          participantesActivos: 0,\n          totalMensualidades: 0,\n          mensualidadesPagadas: 0,\n          mensualidadesPendientes: 0,\n          totalAcudientes: 0\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadDashboardData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(DashboardLayout, {\n      title: \"Dashboard\",\n      subtitle: \"Corporaci\\xF3n Todo por un Alma\",\n      children: /*#__PURE__*/_jsxDEV(LoadingState, {\n        message: \"Cargando dashboard...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n  const stats = [{\n    title: \"Participantes Activos\",\n    value: (dashboardData === null || dashboardData === void 0 ? void 0 : dashboardData.totalParticipantes) || 0,\n    icon: \"fas fa-users\",\n    color: \"blue\",\n    subtitle: \"Total registrados\",\n    onClick: () => history.push('/participantes')\n  }, {\n    title: \"Mensualidades\",\n    value: (dashboardData === null || dashboardData === void 0 ? void 0 : dashboardData.mensualidadesPagadas) || 0,\n    icon: \"fas fa-dollar-sign\",\n    color: \"green\",\n    subtitle: `Pendientes: ${(dashboardData === null || dashboardData === void 0 ? void 0 : dashboardData.mensualidadesPendientes) || 0}`,\n    onClick: () => history.push('/financiero')\n  }];\n  const quickActions = [{\n    label: \"Gestionar Participantes\",\n    icon: \"fas fa-user-plus\",\n    color: \"blue\",\n    onClick: () => history.push('/participantes')\n  }, {\n    label: \"Gestionar Acudientes\",\n    icon: \"fas fa-user-friends\",\n    color: \"purple\",\n    onClick: () => history.push('/acudientes')\n  }, {\n    label: \"Gestión Financiera\",\n    icon: \"fas fa-dollar-sign\",\n    color: \"green\",\n    onClick: () => history.push('/financiero')\n  }, {\n    label: \"Gestionar Usuarios\",\n    icon: \"fas fa-users-cog\",\n    color: \"indigo\",\n    onClick: () => history.push('/usuarios')\n  }, {\n    label: \"Configuración\",\n    icon: \"fas fa-cog\",\n    color: \"gray\",\n    onClick: () => history.push('/configuracion')\n  }];\n  return /*#__PURE__*/_jsxDEV(DashboardLayout, {\n    title: \"Dashboard\",\n    subtitle: \"Corporaci\\xF3n Todo por un Alma\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-4 md:px-6 py-4 md:py-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl md:text-2xl font-Lato font-bold text-gray-800 mb-4 md:mb-6\",\n        children: \"Resumen General\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatsGrid, {\n        stats: stats,\n        columns: 2,\n        gap: \"md\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-4 md:px-6 py-4 md:py-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg md:text-xl font-Lato font-bold text-gray-800 mb-3 md:mb-4\",\n        children: \"Acceso R\\xE1pido\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3 md:gap-4\",\n        children: quickActions.map((action, index) => /*#__PURE__*/_jsxDEV(ActionCard, {\n          label: action.label,\n          icon: action.icon,\n          color: action.color,\n          onClick: action.onClick\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n// Wrap with React.memo to prevent unnecessary re-renders\n// Component will only re-render when props change\n_s(DashboardComponent, \"PhL7l4ttwXmZF9labGdpJnEa7Pc=\", false, function () {\n  return [useHistory];\n});\n_c = DashboardComponent;\nconst Dashboard = /*#__PURE__*/React.memo(DashboardComponent);\n_c2 = Dashboard;\nexport default Dashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"DashboardComponent\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useHistory","DashboardLayout","dbService","StatsGrid","ActionCard","LoadingState","jsxDEV","_jsxDEV","DashboardComponent","_s","dashboardData","setDashboardData","loading","setLoading","history","loadDashboardData","_dashboardResponse$da","_acudientesResult$dat","_acudientesResult$dat2","dashboardResponse","getDashboardData","console","log","participantes","mensualidades","data","acudientesResult","getAcudientes","totalAcudientes","length","stats","totalParticipantes","participantesActivos","totalMensualidades","mensualidadesPagadas","Math","floor","mensualidadesPendientes","ceil","error","title","subtitle","children","message","fileName","_jsxFileName","lineNumber","columnNumber","value","icon","color","onClick","push","quickActions","label","className","columns","gap","map","action","index","_c","Dashboard","memo","_c2","$RefreshReg$"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/pages/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport DashboardLayout from \"components/layout/DashboardLayout\";\nimport { dbService } from \"shared/services\";\nimport { StatsGrid, ActionCard, LoadingState } from \"components/UI\";\n\nconst DashboardComponent = () => {\n  const [dashboardData, setDashboardData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  // Load dashboard data\n  useEffect(() => {\n    const loadDashboardData = async () => {\n      try {\n        setLoading(true);\n        \n        // Load basic stats\n        const dashboardResponse = await dbService.getDashboardData();\n        console.log('Dashboard API Response:', dashboardResponse);\n        const { participantes, mensualidades } = dashboardResponse.data?.data || {};\n        console.log('Extracted data:', { participantes, mensualidades });\n        \n        // Load acudientes count\n        const acudientesResult = await dbService.getAcudientes();\n        const totalAcudientes = acudientesResult?.data?.data?.length || 0;\n        \n        // Calculate stats from real data\n        const stats = {\n          totalParticipantes: participantes || 0,\n          participantesActivos: participantes || 0, // Assuming all are active for now\n          totalMensualidades: mensualidades || 0,\n          mensualidadesPagadas: Math.floor((mensualidades || 0) * 0.7), // Mock 70% paid\n          mensualidadesPendientes: Math.ceil((mensualidades || 0) * 0.3), // Mock 30% pending\n          totalAcudientes: totalAcudientes\n        };\n        \n        setDashboardData(stats);\n        \n      } catch (error) {\n        console.error('Error loading dashboard data:', error);\n        // Set default values on error\n        setDashboardData({\n          totalParticipantes: 0,\n          participantesActivos: 0,\n          totalMensualidades: 0,\n          mensualidadesPagadas: 0,\n          mensualidadesPendientes: 0,\n          totalAcudientes: 0\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadDashboardData();\n  }, []);\n\n  if (loading) {\n    return (\n      <DashboardLayout title=\"Dashboard\" subtitle=\"Corporación Todo por un Alma\">\n        <LoadingState message=\"Cargando dashboard...\" />\n      </DashboardLayout>\n    );\n  }\n\n  const stats = [\n    {\n      title: \"Participantes Activos\",\n      value: dashboardData?.totalParticipantes || 0,\n      icon: \"fas fa-users\",\n      color: \"blue\",\n      subtitle: \"Total registrados\",\n      onClick: () => history.push('/participantes')\n    },\n    {\n      title: \"Mensualidades\",\n      value: dashboardData?.mensualidadesPagadas || 0,\n      icon: \"fas fa-dollar-sign\",\n      color: \"green\",\n      subtitle: `Pendientes: ${dashboardData?.mensualidadesPendientes || 0}`,\n      onClick: () => history.push('/financiero')\n    }\n  ];\n\n  const quickActions = [\n    {\n      label: \"Gestionar Participantes\",\n      icon: \"fas fa-user-plus\",\n      color: \"blue\",\n      onClick: () => history.push('/participantes')\n    },\n    {\n      label: \"Gestionar Acudientes\",\n      icon: \"fas fa-user-friends\",\n      color: \"purple\",\n      onClick: () => history.push('/acudientes')\n    },\n    {\n      label: \"Gestión Financiera\",\n      icon: \"fas fa-dollar-sign\",\n      color: \"green\",\n      onClick: () => history.push('/financiero')\n    },\n    {\n      label: \"Gestionar Usuarios\",\n      icon: \"fas fa-users-cog\",\n      color: \"indigo\",\n      onClick: () => history.push('/usuarios')\n    },\n    {\n      label: \"Configuración\",\n      icon: \"fas fa-cog\",\n      color: \"gray\",\n      onClick: () => history.push('/configuracion')\n    }\n  ];\n\n  return (\n    <DashboardLayout title=\"Dashboard\" subtitle=\"Corporación Todo por un Alma\">\n      {/* Widgets de Resumen General */}\n      <div className=\"px-4 md:px-6 py-4 md:py-6\">\n        <h2 className=\"text-xl md:text-2xl font-Lato font-bold text-gray-800 mb-4 md:mb-6\">Resumen General</h2>\n        <StatsGrid stats={stats} columns={2} gap=\"md\" />\n      </div>\n\n      {/* Botones de Acceso Rápido */}\n      <div className=\"px-4 md:px-6 py-4 md:py-6\">\n        <h3 className=\"text-lg md:text-xl font-Lato font-bold text-gray-800 mb-3 md:mb-4\">Acceso Rápido</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3 md:gap-4\">\n          {quickActions.map((action, index) => (\n            <ActionCard\n              key={index}\n              label={action.label}\n              icon={action.icon}\n              color={action.color}\n              onClick={action.onClick}\n            />\n          ))}\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n};\n\n// Wrap with React.memo to prevent unnecessary re-renders\n// Component will only re-render when props change\nconst Dashboard = React.memo(DashboardComponent);\n\nexport default Dashboard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,eAAe,MAAM,mCAAmC;AAC/D,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,SAAS,EAAEC,UAAU,EAAEC,YAAY,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMgB,OAAO,GAAGd,UAAU,CAAC,CAAC;;EAE5B;EACAD,SAAS,CAAC,MAAM;IACd,MAAMgB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA;QACFL,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMM,iBAAiB,GAAG,MAAMjB,SAAS,CAACkB,gBAAgB,CAAC,CAAC;QAC5DC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,iBAAiB,CAAC;QACzD,MAAM;UAAEI,aAAa;UAAEC;QAAc,CAAC,GAAG,EAAAR,qBAAA,GAAAG,iBAAiB,CAACM,IAAI,cAAAT,qBAAA,uBAAtBA,qBAAA,CAAwBS,IAAI,KAAI,CAAC,CAAC;QAC3EJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE;UAAEC,aAAa;UAAEC;QAAc,CAAC,CAAC;;QAEhE;QACA,MAAME,gBAAgB,GAAG,MAAMxB,SAAS,CAACyB,aAAa,CAAC,CAAC;QACxD,MAAMC,eAAe,GAAG,CAAAF,gBAAgB,aAAhBA,gBAAgB,wBAAAT,qBAAA,GAAhBS,gBAAgB,CAAED,IAAI,cAAAR,qBAAA,wBAAAC,sBAAA,GAAtBD,qBAAA,CAAwBQ,IAAI,cAAAP,sBAAA,uBAA5BA,sBAAA,CAA8BW,MAAM,KAAI,CAAC;;QAEjE;QACA,MAAMC,KAAK,GAAG;UACZC,kBAAkB,EAAER,aAAa,IAAI,CAAC;UACtCS,oBAAoB,EAAET,aAAa,IAAI,CAAC;UAAE;UAC1CU,kBAAkB,EAAET,aAAa,IAAI,CAAC;UACtCU,oBAAoB,EAAEC,IAAI,CAACC,KAAK,CAAC,CAACZ,aAAa,IAAI,CAAC,IAAI,GAAG,CAAC;UAAE;UAC9Da,uBAAuB,EAAEF,IAAI,CAACG,IAAI,CAAC,CAACd,aAAa,IAAI,CAAC,IAAI,GAAG,CAAC;UAAE;UAChEI,eAAe,EAAEA;QACnB,CAAC;QAEDjB,gBAAgB,CAACmB,KAAK,CAAC;MAEzB,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdlB,OAAO,CAACkB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD;QACA5B,gBAAgB,CAAC;UACfoB,kBAAkB,EAAE,CAAC;UACrBC,oBAAoB,EAAE,CAAC;UACvBC,kBAAkB,EAAE,CAAC;UACrBC,oBAAoB,EAAE,CAAC;UACvBG,uBAAuB,EAAE,CAAC;UAC1BT,eAAe,EAAE;QACnB,CAAC,CAAC;MACJ,CAAC,SAAS;QACRf,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDE,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIH,OAAO,EAAE;IACX,oBACEL,OAAA,CAACN,eAAe;MAACuC,KAAK,EAAC,WAAW;MAACC,QAAQ,EAAC,iCAA8B;MAAAC,QAAA,eACxEnC,OAAA,CAACF,YAAY;QAACsC,OAAO,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAEtB;EAEA,MAAMjB,KAAK,GAAG,CACZ;IACEU,KAAK,EAAE,uBAAuB;IAC9BQ,KAAK,EAAE,CAAAtC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEqB,kBAAkB,KAAI,CAAC;IAC7CkB,IAAI,EAAE,cAAc;IACpBC,KAAK,EAAE,MAAM;IACbT,QAAQ,EAAE,mBAAmB;IAC7BU,OAAO,EAAEA,CAAA,KAAMrC,OAAO,CAACsC,IAAI,CAAC,gBAAgB;EAC9C,CAAC,EACD;IACEZ,KAAK,EAAE,eAAe;IACtBQ,KAAK,EAAE,CAAAtC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEwB,oBAAoB,KAAI,CAAC;IAC/Ce,IAAI,EAAE,oBAAoB;IAC1BC,KAAK,EAAE,OAAO;IACdT,QAAQ,EAAE,eAAe,CAAA/B,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE2B,uBAAuB,KAAI,CAAC,EAAE;IACtEc,OAAO,EAAEA,CAAA,KAAMrC,OAAO,CAACsC,IAAI,CAAC,aAAa;EAC3C,CAAC,CACF;EAED,MAAMC,YAAY,GAAG,CACnB;IACEC,KAAK,EAAE,yBAAyB;IAChCL,IAAI,EAAE,kBAAkB;IACxBC,KAAK,EAAE,MAAM;IACbC,OAAO,EAAEA,CAAA,KAAMrC,OAAO,CAACsC,IAAI,CAAC,gBAAgB;EAC9C,CAAC,EACD;IACEE,KAAK,EAAE,sBAAsB;IAC7BL,IAAI,EAAE,qBAAqB;IAC3BC,KAAK,EAAE,QAAQ;IACfC,OAAO,EAAEA,CAAA,KAAMrC,OAAO,CAACsC,IAAI,CAAC,aAAa;EAC3C,CAAC,EACD;IACEE,KAAK,EAAE,oBAAoB;IAC3BL,IAAI,EAAE,oBAAoB;IAC1BC,KAAK,EAAE,OAAO;IACdC,OAAO,EAAEA,CAAA,KAAMrC,OAAO,CAACsC,IAAI,CAAC,aAAa;EAC3C,CAAC,EACD;IACEE,KAAK,EAAE,oBAAoB;IAC3BL,IAAI,EAAE,kBAAkB;IACxBC,KAAK,EAAE,QAAQ;IACfC,OAAO,EAAEA,CAAA,KAAMrC,OAAO,CAACsC,IAAI,CAAC,WAAW;EACzC,CAAC,EACD;IACEE,KAAK,EAAE,eAAe;IACtBL,IAAI,EAAE,YAAY;IAClBC,KAAK,EAAE,MAAM;IACbC,OAAO,EAAEA,CAAA,KAAMrC,OAAO,CAACsC,IAAI,CAAC,gBAAgB;EAC9C,CAAC,CACF;EAED,oBACE7C,OAAA,CAACN,eAAe;IAACuC,KAAK,EAAC,WAAW;IAACC,QAAQ,EAAC,iCAA8B;IAAAC,QAAA,gBAExEnC,OAAA;MAAKgD,SAAS,EAAC,2BAA2B;MAAAb,QAAA,gBACxCnC,OAAA;QAAIgD,SAAS,EAAC,oEAAoE;QAAAb,QAAA,EAAC;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvGxC,OAAA,CAACJ,SAAS;QAAC2B,KAAK,EAAEA,KAAM;QAAC0B,OAAO,EAAE,CAAE;QAACC,GAAG,EAAC;MAAI;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eAGNxC,OAAA;MAAKgD,SAAS,EAAC,2BAA2B;MAAAb,QAAA,gBACxCnC,OAAA;QAAIgD,SAAS,EAAC,mEAAmE;QAAAb,QAAA,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpGxC,OAAA;QAAKgD,SAAS,EAAC,+DAA+D;QAAAb,QAAA,EAC3EW,YAAY,CAACK,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBAC9BrD,OAAA,CAACH,UAAU;UAETkD,KAAK,EAAEK,MAAM,CAACL,KAAM;UACpBL,IAAI,EAAEU,MAAM,CAACV,IAAK;UAClBC,KAAK,EAAES,MAAM,CAACT,KAAM;UACpBC,OAAO,EAAEQ,MAAM,CAACR;QAAQ,GAJnBS,KAAK;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKX,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAEtB,CAAC;;AAED;AACA;AAAAtC,EAAA,CA5IMD,kBAAkB;EAAA,QAGNR,UAAU;AAAA;AAAA6D,EAAA,GAHtBrD,kBAAkB;AA6IxB,MAAMsD,SAAS,gBAAGjE,KAAK,CAACkE,IAAI,CAACvD,kBAAkB,CAAC;AAACwD,GAAA,GAA3CF,SAAS;AAEf,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}