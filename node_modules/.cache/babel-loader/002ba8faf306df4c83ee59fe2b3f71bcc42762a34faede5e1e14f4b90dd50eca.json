{"ast":null,"code":"// Servicio API   \nimport axios from 'axios';\n\n// Función para determinar la URL base correcta de la API\nconst getApiBaseUrl = defaultUrl => {\n  // Si hay una variable de entorno configurada, úsala\n  if (process.env.REACT_APP_AUTH_API_BASE_URL || process.env.REACT_APP_DASHBOARD_API_BASE_URL) {\n    return defaultUrl;\n  }\n\n  // Detectar automáticamente el dominio actual\n  const currentOrigin = window.location.origin; // ej: https://www.todoporunalma.org o https://todoporunalma.org\n\n  // Si estamos en www, usar la URL sin www para la API (hasta que el backend soporte www)\n  if (currentOrigin === 'https://www.todoporunalma.org') {\n    return 'https://todoporunalma.org';\n  }\n\n  // Para desarrollo local o dominio principal, usar el origen actual\n  return currentOrigin;\n};\n\n// Configuración base de las APIs\nconst API_BASE_DOMAIN = getApiBaseUrl('https://todoporunalma.org');\nconst AUTH_API_BASE_URL = process.env.REACT_APP_AUTH_API_BASE_URL || `${API_BASE_DOMAIN}/api/auth`;\nconst DASHBOARD_API_BASE_URL = process.env.REACT_APP_DASHBOARD_API_BASE_URL || `${API_BASE_DOMAIN}/api/dashboard`;\nconsole.log('🔧 PRODUCTION DEBUG - Environment variables:');\nconsole.log('  - NODE_ENV:', process.env.NODE_ENV);\nconsole.log('  - REACT_APP_AUTH_API_BASE_URL:', process.env.REACT_APP_AUTH_API_BASE_URL);\nconsole.log('  - REACT_APP_DASHBOARD_API_BASE_URL:', process.env.REACT_APP_DASHBOARD_API_BASE_URL);\nconsole.log('  - API_BASE_DOMAIN:', API_BASE_DOMAIN);\nconsole.log('  - AUTH_API_BASE_URL:', AUTH_API_BASE_URL);\nconsole.log('  - DASHBOARD_API_BASE_URL:', DASHBOARD_API_BASE_URL);\nconsole.log('🔧 AUTH_API_BASE_URL configurada como:', AUTH_API_BASE_URL);\nconsole.log('🔧 DASHBOARD_API_BASE_URL configurada como:', DASHBOARD_API_BASE_URL);\nconsole.log('🔧 Full login URL will be:', AUTH_API_BASE_URL + '/login');\n\n// Additional diagnostic logging\nconsole.log('🔧 API CONFIGURATION DIAGNOSTICS:');\nconsole.log('  - REACT_APP_AUTH_API_BASE_URL:', process.env.REACT_APP_AUTH_API_BASE_URL);\nconsole.log('  - REACT_APP_API_BASE_URL:', process.env.REACT_APP_API_BASE_URL);\nconsole.log('  - REACT_APP_FORMATOS_API_URL:', process.env.REACT_APP_FORMATOS_API_URL);\nconsole.log('  - NODE_ENV:', process.env.NODE_ENV);\nconsole.log('  - Current hostname:', window.location.hostname);\nconsole.log('  - Current protocol:', window.location.protocol);\n\n// Crear instancia de axios para autenticación\nconst authClient = axios.create({\n  baseURL: AUTH_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Crear instancia de axios para dashboard\nconst dashboardClient = axios.create({\n  baseURL: DASHBOARD_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Función helper para configurar interceptors\nconst setupInterceptors = (client, serviceName) => {\n  // Interceptor para agregar token de autenticación\n  client.interceptors.request.use(config => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  }, error => {\n    console.error(`Error en ${serviceName} request interceptor:`, error);\n    return Promise.reject(error);\n  });\n\n  // Interceptor para manejar respuestas y errores\n  client.interceptors.response.use(response => response, error => {\n    var _error$response, _error$response2, _error$response2$data;\n    const errorInfo = generateErrorMessage(error);\n\n    // Solo log crítico de errores\n    if (errorInfo.isCorsError) {\n      var _error$config;\n      console.error(`CORS ERROR (${serviceName}):`, (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url);\n    } else if (errorInfo.isNetworkError) {\n      console.error(`Network error (${serviceName}):`, error.message);\n    } else if (error.response) {\n      console.error(`HTTP ${error.response.status} (${serviceName}):`, error.response.data);\n    }\n\n    // Manejar errores de autenticación\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !errorInfo.isNetworkError) {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      window.location.href = '/login';\n    }\n    const enhancedError = {\n      message: errorInfo.message,\n      type: errorInfo.type,\n      status: errorInfo.status,\n      isCorsError: errorInfo.isCorsError,\n      isNetworkError: errorInfo.isNetworkError,\n      suggestions: errorInfo.suggestions,\n      serverMessage: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || null,\n      originalError: error,\n      response: error.response\n    };\n    return Promise.reject(enhancedError);\n  });\n};\n\n// Configurar interceptors para los clientes\nsetupInterceptors(authClient, 'AUTH');\nsetupInterceptors(dashboardClient, 'DASHBOARD');\n\n// Definición de roles del sistema\nexport const ROLES = {\n  CONSULTA: 'CONSULTA',\n  ADMINISTRADOR: 'ADMINISTRADOR'\n};\n\n// ==================== CORS ERROR DETECTION ====================\n\n/**\n * Detecta si un error de axios es causado por CORS\n * @param {Error} error - El objeto de error de axios\n * @returns {boolean} true si es un error de CORS, false en caso contrario\n */\nexport const detectCorsError = error => {\n  var _error$message;\n  // CORS errors typically have these characteristics:\n  // 1. No response object (preflight or actual request blocked)\n  // 2. Network Error message\n  // 3. Error code ERR_NETWORK\n  // 4. Request was made but no response received\n\n  // Check if there's no response (most common CORS indicator)\n  if (!error.response) {\n    // Check for network error patterns\n    const isNetworkError = error.message === 'Network Error' || error.code === 'ERR_NETWORK';\n\n    // Check if request was configured (means axios tried to send it)\n    const hasRequestConfig = !!error.config;\n\n    // CORS errors occur when:\n    // - There's a network error\n    // - Request was configured and attempted\n    // - No response was received (blocked by browser)\n    if (isNetworkError && hasRequestConfig) {\n      var _error$config2, _error$config3;\n      // Additional check: if the URL is cross-origin\n      const requestUrl = ((_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url) || '';\n      const baseURL = ((_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.baseURL) || '';\n      const fullUrl = requestUrl.startsWith('http') ? requestUrl : baseURL + requestUrl;\n\n      // If we're making a request to a different origin, it's likely CORS\n      if (fullUrl.startsWith('http')) {\n        const currentOrigin = `${window.location.protocol}//${window.location.host}`;\n        const requestOrigin = new URL(fullUrl).origin;\n\n        // Different origins = likely CORS issue\n        if (currentOrigin !== requestOrigin) {\n          return true;\n        }\n      }\n\n      // Even same origin can have CORS issues in some cases\n      // If it's a network error with no response, assume CORS\n      return true;\n    }\n  }\n\n  // Check for specific CORS-related error messages\n  const errorMessage = ((_error$message = error.message) === null || _error$message === void 0 ? void 0 : _error$message.toLowerCase()) || '';\n  const corsKeywords = ['cors', 'cross-origin', 'preflight'];\n  if (corsKeywords.some(keyword => errorMessage.includes(keyword))) {\n    return true;\n  }\n\n  // Not a CORS error\n  return false;\n};\n\n// ==================== ERROR MESSAGE GENERATOR ====================\n\n/**\n * Genera mensajes de error amigables y accionables para diferentes tipos de errores\n * @param {Error} error - El objeto de error original\n * @returns {Object} Objeto con mensaje, sugerencias y tipo de error\n */\nexport const generateErrorMessage = error => {\n  var _error$response3, _error$message2;\n  const errorInfo = {\n    message: '',\n    suggestions: [],\n    type: 'unknown',\n    isNetworkError: false,\n    isCorsError: false,\n    status: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) || 0,\n    originalError: error\n  };\n\n  // Usar la función de detección de CORS\n  const isCorsError = detectCorsError(error);\n\n  // Detectar si es un error de red (sin respuesta del servidor)\n  const isNetworkError = !error.response && (error.message === 'Network Error' || error.code === 'ERR_NETWORK' || error.code === 'ECONNABORTED' || !error.status);\n  if (isCorsError) {\n    // Error de CORS\n    errorInfo.type = 'cors';\n    errorInfo.isCorsError = true;\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'No se puede conectar con el servidor debido a restricciones de CORS';\n    errorInfo.suggestions = ['🔧 Verifica que el servidor backend esté ejecutándose en http://localhost:8080', '🔧 Asegúrate de que el backend tenga configurado CORS correctamente', '🔍 Revisa la consola del navegador para ver detalles específicos del error CORS', '⚙️ Si eres desarrollador, verifica la configuración de CORS en el backend (WebMvcConfigurer o SecurityFilterChain)', '🔄 Intenta reiniciar tanto el frontend como el backend', '📝 Verifica que el backend permita el origen: ' + window.location.origin];\n  } else if (error.code === 'ECONNABORTED' || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('timeout')) {\n    // Error de timeout\n    errorInfo.type = 'timeout';\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'La solicitud al servidor tardó demasiado tiempo (timeout después de 30 segundos)';\n    errorInfo.suggestions = ['🌐 Verifica tu conexión a internet', '⏱️ El servidor puede estar experimentando alta carga o procesando una operación pesada', '🔄 Intenta nuevamente en unos momentos', '📊 Si trabajas con grandes volúmenes de datos, considera filtrar o paginar los resultados', '🔧 Si el problema persiste, contacta al administrador del sistema'];\n  } else if (isNetworkError) {\n    var _error$config4;\n    // Error de red general (backend no disponible)\n    errorInfo.type = 'network';\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'No se puede conectar con el servidor - Backend no disponible';\n    errorInfo.suggestions = ['🚀 Verifica que el servidor backend esté ejecutándose en ' + (((_error$config4 = error.config) === null || _error$config4 === void 0 ? void 0 : _error$config4.baseURL) || 'http://localhost:8080'), '🌐 Comprueba tu conexión a internet', '🔍 Asegúrate de que la URL del servidor sea correcta', '🛡️ Verifica que no haya un firewall bloqueando la conexión', '🔧 Si eres desarrollador, inicia el backend con: ./mvnw spring-boot:run', '📞 Si el problema persiste, contacta al administrador del sistema'];\n  } else if (error.response) {\n    var _error$response$data;\n    // Error HTTP con respuesta del servidor\n    const status = error.response.status;\n    switch (status) {\n      case 400:\n        errorInfo.type = 'validation';\n        errorInfo.message = 'Los datos enviados no son válidos (Error 400)';\n        errorInfo.suggestions = ['📝 Verifica que todos los campos requeridos estén completos', '✅ Asegúrate de que los datos tengan el formato correcto (emails, teléfonos, fechas, etc.)', '🔍 Revisa los mensajes de validación específicos del servidor', '📋 Verifica que no haya campos con valores inválidos o fuera de rango'];\n        break;\n      case 401:\n        errorInfo.type = 'authentication';\n        errorInfo.message = 'No estás autenticado o tu sesión ha expirado (Error 401)';\n        errorInfo.suggestions = ['🔐 Inicia sesión nuevamente', '✅ Verifica que tus credenciales sean correctas', '⏱️ Tu sesión puede haber expirado por inactividad', '🔄 Intenta cerrar sesión y volver a iniciar sesión'];\n        break;\n      case 403:\n        errorInfo.type = 'authorization';\n        errorInfo.message = 'No tienes permisos para realizar esta acción (Error 403)';\n        errorInfo.suggestions = ['👤 Contacta al administrador para solicitar los permisos necesarios', '🔑 Verifica que tu cuenta tenga el rol adecuado', '⚙️ Puede que necesites permisos de ADMINISTRADOR para esta operación', '📋 Revisa qué acciones están permitidas para tu rol actual'];\n        break;\n      case 404:\n        errorInfo.type = 'notFound';\n        errorInfo.message = 'El recurso solicitado no fue encontrado (Error 404)';\n        errorInfo.suggestions = ['🔍 Verifica que el recurso exista en el sistema', '🗑️ Puede que el recurso haya sido eliminado recientemente', '🔄 Intenta refrescar la página y volver a intentar', '📋 Verifica que el ID o identificador sea correcto'];\n        break;\n      case 409:\n        errorInfo.type = 'conflict';\n        errorInfo.message = 'Ya existe un recurso con estos datos (Error 409)';\n        errorInfo.suggestions = ['🔍 Verifica que no estés duplicando información', '📝 Puede que ya exista un registro con el mismo identificador único', '✏️ Intenta con datos diferentes o actualiza el registro existente', '🔄 Refresca la lista para ver los datos actuales'];\n        break;\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        errorInfo.type = 'serverError';\n        errorInfo.message = `Error interno del servidor (Error ${status})`;\n        errorInfo.suggestions = ['🔥 El servidor está experimentando problemas técnicos', '⏱️ Intenta nuevamente en unos momentos', '🔧 Si el problema persiste, contacta al administrador del sistema', '📝 Este error ha sido registrado automáticamente para su revisión', '💾 Verifica que la base de datos esté disponible (si eres administrador)'];\n        break;\n      default:\n        errorInfo.type = 'http';\n        errorInfo.message = `Error del servidor (código ${status})`;\n        errorInfo.suggestions = ['❌ Ocurrió un error inesperado en el servidor', '🔄 Intenta nuevamente', '📞 Si el problema persiste, contacta al soporte técnico', '🔍 Código de error: ' + status];\n    }\n\n    // Agregar mensaje específico del servidor si está disponible\n    if ((_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n      errorInfo.serverMessage = error.response.data.message;\n    }\n  } else {\n    // Error desconocido\n    errorInfo.type = 'unknown';\n    errorInfo.message = 'Ocurrió un error inesperado';\n    errorInfo.suggestions = ['🔄 Intenta refrescar la página', '🌐 Verifica tu conexión a internet', '💾 Limpia la caché del navegador si el problema persiste', '🔧 Intenta cerrar y volver a abrir la aplicación', '📞 Si el problema persiste, contacta al soporte técnico con detalles del error'];\n  }\n  return errorInfo;\n};\nclass ApiService {\n  // ==================== AUTENTICACIÓN ====================\n\n  async login(email, password) {\n    console.log('🔐 Starting login request...');\n    console.log('📧 Email:', email);\n    console.log('🌐 Auth API URL:', AUTH_API_BASE_URL);\n    console.log('🔗 Full login URL:', AUTH_API_BASE_URL + '/login');\n    const startTime = Date.now();\n    try {\n      console.log('📤 Sending login request...');\n      const response = await authClient.post('/login', {\n        email,\n        password\n      });\n      const responseTime = Date.now() - startTime;\n      console.log('✅ Login request completed in', responseTime, 'ms');\n      console.log('📊 Response status:', response.status);\n\n      // FastAPI returns data directly in response.data, not nested\n      const responseData = response.data;\n      console.log('📦 Response data:', responseData);\n\n      // Check for error in FastAPI response format\n      if (responseData.error) {\n        console.error('❌ Server error in response:', responseData.error);\n        throw new Error(responseData.error.message || 'Error en el servidor');\n      }\n      if (!responseData.data) {\n        console.error('❌ Invalid server response: no data field');\n        throw new Error('Respuesta del servidor inválida');\n      }\n      const {\n        token,\n        user\n      } = responseData.data;\n      console.log('🔑 Token received:', !!token);\n      console.log('👤 User received:', !!user);\n      if (!token || !user) {\n        console.error('❌ Incomplete server response - missing token or user');\n        throw new Error('Respuesta del servidor incompleta');\n      }\n      console.log('💾 Storing auth data in localStorage...');\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      console.log('🎉 Login successful!');\n      return {\n        data: {\n          user,\n          token\n        },\n        error: null\n      };\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      console.error('💥 Login failed after', responseTime, 'ms');\n      console.error('❌ Error details:', error);\n      if (error.response) {\n        var _error$response$data2, _error$response$data3, _error$response$data4, _error$response$data5;\n        console.error('📊 HTTP Error Response:');\n        console.error('   Status:', error.response.status);\n        console.error('   Status Text:', error.response.statusText);\n        console.error('   Headers:', error.response.headers);\n        console.error('   Data:', error.response.data);\n\n        // Handle FastAPI error format\n        const serverMessage = ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.detail) || ((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.message) || ((_error$response$data4 = error.response.data) === null || _error$response$data4 === void 0 ? void 0 : (_error$response$data5 = _error$response$data4.error) === null || _error$response$data5 === void 0 ? void 0 : _error$response$data5.message);\n        throw new Error(serverMessage || 'Error del servidor');\n      } else if (error.request) {\n        var _error$config5;\n        console.error('🌐 Network Error - No response received:');\n        console.error('   Request config:', error.config);\n        console.error('   Timeout was set to:', (_error$config5 = error.config) === null || _error$config5 === void 0 ? void 0 : _error$config5.timeout, 'ms');\n        throw new Error('No se pudo conectar con el servidor. Verifica que el backend esté corriendo.');\n      } else {\n        console.error('⚠️ Unexpected error:', error.message);\n        throw error;\n      }\n    }\n  }\n\n  // Cerrar sesión\n  async logout() {\n    try {\n      await authClient.post('/logout');\n\n      // Limpiar localStorage\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      return {\n        success: true,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error en logout:', error);\n      // Limpiar localStorage aunque falle la petición\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      return {\n        success: true,\n        error: null\n      };\n    }\n  }\n\n  // Restablecer contraseña\n  async resetPassword(email) {\n    try {\n      const response = await authClient.post('/reset-password', {\n        email\n      });\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error en reset password:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al restablecer contraseña'\n        }\n      };\n    }\n  }\n  async getCurrentUser() {\n    try {\n      const storedUser = localStorage.getItem('currentUser');\n      const storedToken = localStorage.getItem('authToken');\n      if (storedUser && storedToken) {\n        try {\n          const user = JSON.parse(storedUser);\n          if (user && user.email && user.id) {\n            return {\n              data: user,\n              error: null\n            };\n          } else {\n            localStorage.removeItem('currentUser');\n            localStorage.removeItem('authToken');\n            return {\n              data: null,\n              error: null\n            };\n          }\n        } catch (parseError) {\n          console.error('Error parseando usuario:', parseError);\n          localStorage.removeItem('currentUser');\n          localStorage.removeItem('authToken');\n          return {\n            data: null,\n            error: null\n          };\n        }\n      }\n      return {\n        data: null,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo usuario actual:', error);\n      return {\n        data: null,\n        error\n      };\n    }\n  }\n\n  // Actualizar perfil de usuario\n  async updateProfile(profileData) {\n    try {\n      const response = await authClient.put('/profile', profileData);\n\n      // Actualizar usuario en localStorage\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n      const updatedUser = {\n        ...currentUser,\n        ...response.data\n      };\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error actualizando perfil:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar perfil'\n        }\n      };\n    }\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    try {\n      // Consultar endpoint real en backend FastAPI\n      const response = await authClient.get('/permission', {\n        params: {\n          role: requiredRole\n        }\n      });\n      return response.data.hasPermission || false;\n    } catch (error) {\n      console.error('Error verificando permisos:', error);\n      // Fallback temporal a verificación local si el endpoint no existe\n      try {\n        const {\n          data: user\n        } = await this.getCurrentUser();\n        if (!user) return false;\n        const userRole = user.rol || user.role || ROLES.CONSULTA;\n\n        // Jerarquía de roles: ADMINISTRADOR > CONSULTA\n        const roleHierarchy = {\n          [ROLES.ADMINISTRADOR]: 2,\n          [ROLES.CONSULTA]: 1\n        };\n        const userLevel = roleHierarchy[userRole] || 1;\n        const requiredLevel = roleHierarchy[requiredRole] || 1;\n        return userLevel >= requiredLevel;\n      } catch (fallbackError) {\n        console.error('Fallback también falló:', fallbackError);\n        return false;\n      }\n    }\n  }\n\n  // ==================== UTILIDADES ====================\n\n  /**\n   * Verifica la conexión con el backend de autenticación\n   * @returns {Promise<Object>} Objeto con información detallada de la conexión\n   */\n  async testConnection() {\n    const startTime = Date.now();\n    const results = {\n      auth: null,\n      overall: {\n        success: false,\n        message: 'Conexión fallida'\n      }\n    };\n\n    // Test auth service\n    try {\n      const authResponse = await authClient.get('/health');\n      results.auth = {\n        success: true,\n        connected: true,\n        responseTime: Date.now() - startTime,\n        status: authResponse.status,\n        baseURL: AUTH_API_BASE_URL,\n        data: authResponse.data,\n        message: 'Conexión exitosa con auth service'\n      };\n    } catch (error) {\n      const errorInfo = generateErrorMessage(error);\n      results.auth = {\n        success: false,\n        connected: false,\n        responseTime: Date.now() - startTime,\n        baseURL: AUTH_API_BASE_URL,\n        error: error.message || 'Error de conexión',\n        errorType: errorInfo.type,\n        isCorsError: errorInfo.isCorsError,\n        isNetworkError: errorInfo.isNetworkError,\n        suggestions: errorInfo.suggestions,\n        message: errorInfo.message\n      };\n    }\n\n    // Overall result\n    const authSuccess = results.auth.success;\n    if (authSuccess) {\n      results.overall = {\n        success: true,\n        message: 'Conexión exitosa con el servicio de autenticación'\n      };\n    } else {\n      results.overall = {\n        success: false,\n        message: 'El servicio de autenticación no está disponible'\n      };\n    }\n    return results;\n  }\n\n  /**\n   * Verifica si el backend de autenticación está disponible antes de operaciones críticas\n   * @param {number} timeout - Timeout en milisegundos (por defecto 5000ms)\n   * @returns {Promise<Object>} Objeto con estado del servicio\n   */\n  async isBackendReachable(timeout = 5000) {\n    const results = {\n      auth: false\n    };\n\n    // Check auth service\n    try {\n      const authCheck = axios.create({\n        baseURL: AUTH_API_BASE_URL,\n        timeout: timeout,\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      await authCheck.get('/health');\n      results.auth = true;\n    } catch (error) {\n      console.warn('Auth service no disponible:', error.message);\n    }\n    return results;\n  }\n\n  // ==================== DASHBOARD ====================\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    try {\n      const response = await dashboardClient.get('/dashboard/stats');\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo datos del dashboard:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener datos del dashboard'\n        }\n      };\n    }\n  }\n\n  // ==================== USUARIOS ====================\n\n  // Obtener lista de usuarios\n  async getUsuarios() {\n    try {\n      const response = await authClient.get('/usuarios');\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo usuarios:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener usuarios'\n        }\n      };\n    }\n  }\n\n  // ==================== PARTICIPANTES ====================\n\n  // Obtener lista de participantes\n  async getParticipantes() {\n    try {\n      const response = await dashboardClient.get('/participantes');\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo participantes:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener participantes'\n        }\n      };\n    }\n  }\n\n  // ==================== MENSUALIDADES ====================\n\n  // Obtener lista de mensualidades\n  async getMensualidades() {\n    try {\n      const response = await dashboardClient.get('/mensualidades');\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo mensualidades:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener mensualidades'\n        }\n      };\n    }\n  }\n\n  // ==================== SEDES ====================\n\n  // Obtener lista de sedes\n  async getSedes() {\n    try {\n      const response = await dashboardClient.get('/sedes');\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo sedes:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener sedes'\n        }\n      };\n    }\n  }\n\n  // ==================== ACUDIENTES ====================\n\n  // Obtener lista de acudientes\n  async getAcudientes(filters) {\n    try {\n      const response = await dashboardClient.get('/acudientes', {\n        params: filters\n      });\n      return {\n        data: response.data,\n        error: null\n      };\n    } catch (error) {\n      console.error('Error obteniendo acudientes:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener acudientes'\n        }\n      };\n    }\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return {\n      authBaseURL: AUTH_API_BASE_URL,\n      dashboardBaseURL: DASHBOARD_API_BASE_URL,\n      hasToken: !!localStorage.getItem('authToken'),\n      environment: process.env.NODE_ENV,\n      isConfigured: !!AUTH_API_BASE_URL && !!DASHBOARD_API_BASE_URL\n    };\n  }\n}\n\n// Exportar instancia única del servicio\nexport const api = new ApiService();\nexport default api;\n\n// Exportar cliente axios para uso directo si es necesario\nexport { authClient };","map":{"version":3,"names":["axios","getApiBaseUrl","defaultUrl","process","env","REACT_APP_AUTH_API_BASE_URL","REACT_APP_DASHBOARD_API_BASE_URL","currentOrigin","window","location","origin","API_BASE_DOMAIN","AUTH_API_BASE_URL","DASHBOARD_API_BASE_URL","console","log","NODE_ENV","REACT_APP_API_BASE_URL","REACT_APP_FORMATOS_API_URL","hostname","protocol","authClient","create","baseURL","timeout","withCredentials","headers","dashboardClient","setupInterceptors","client","serviceName","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response2$data","errorInfo","generateErrorMessage","isCorsError","_error$config","url","isNetworkError","message","status","data","removeItem","href","enhancedError","type","suggestions","serverMessage","originalError","ROLES","CONSULTA","ADMINISTRADOR","detectCorsError","_error$message","code","hasRequestConfig","_error$config2","_error$config3","requestUrl","fullUrl","startsWith","host","requestOrigin","URL","errorMessage","toLowerCase","corsKeywords","some","keyword","includes","_error$response3","_error$message2","_error$config4","_error$response$data","ApiService","login","email","password","startTime","Date","now","post","responseTime","responseData","Error","user","setItem","JSON","stringify","_error$response$data2","_error$response$data3","_error$response$data4","_error$response$data5","statusText","detail","_error$config5","logout","success","resetPassword","getCurrentUser","storedUser","storedToken","parse","id","parseError","updateProfile","profileData","put","currentUser","updatedUser","hasPermission","requiredRole","get","params","role","userRole","rol","roleHierarchy","userLevel","requiredLevel","fallbackError","testConnection","results","auth","overall","authResponse","connected","errorType","authSuccess","isBackendReachable","authCheck","warn","getDashboardData","getUsuarios","getParticipantes","getMensualidades","getSedes","getAcudientes","filters","getApiConfig","authBaseURL","dashboardBaseURL","hasToken","environment","isConfigured","api"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/services/api.js"],"sourcesContent":["// Servicio API   \nimport axios from 'axios';\n\n// Función para determinar la URL base correcta de la API\nconst getApiBaseUrl = (defaultUrl) => {\n  // Si hay una variable de entorno configurada, úsala\n  if (process.env.REACT_APP_AUTH_API_BASE_URL || process.env.REACT_APP_DASHBOARD_API_BASE_URL) {\n    return defaultUrl;\n  }\n\n  // Detectar automáticamente el dominio actual\n  const currentOrigin = window.location.origin; // ej: https://www.todoporunalma.org o https://todoporunalma.org\n\n  // Si estamos en www, usar la URL sin www para la API (hasta que el backend soporte www)\n  if (currentOrigin === 'https://www.todoporunalma.org') {\n    return 'https://todoporunalma.org';\n  }\n\n  // Para desarrollo local o dominio principal, usar el origen actual\n  return currentOrigin;\n};\n\n// Configuración base de las APIs\nconst API_BASE_DOMAIN = getApiBaseUrl('https://todoporunalma.org');\n\nconst AUTH_API_BASE_URL = process.env.REACT_APP_AUTH_API_BASE_URL ||\n  `${API_BASE_DOMAIN}/api/auth`;\n\nconst DASHBOARD_API_BASE_URL = process.env.REACT_APP_DASHBOARD_API_BASE_URL ||\n  `${API_BASE_DOMAIN}/api/dashboard`;\n\nconsole.log('🔧 PRODUCTION DEBUG - Environment variables:');\nconsole.log('  - NODE_ENV:', process.env.NODE_ENV);\nconsole.log('  - REACT_APP_AUTH_API_BASE_URL:', process.env.REACT_APP_AUTH_API_BASE_URL);\nconsole.log('  - REACT_APP_DASHBOARD_API_BASE_URL:', process.env.REACT_APP_DASHBOARD_API_BASE_URL);\nconsole.log('  - API_BASE_DOMAIN:', API_BASE_DOMAIN);\nconsole.log('  - AUTH_API_BASE_URL:', AUTH_API_BASE_URL);\nconsole.log('  - DASHBOARD_API_BASE_URL:', DASHBOARD_API_BASE_URL);\n\nconsole.log('🔧 AUTH_API_BASE_URL configurada como:', AUTH_API_BASE_URL);\nconsole.log('🔧 DASHBOARD_API_BASE_URL configurada como:', DASHBOARD_API_BASE_URL);\nconsole.log('🔧 Full login URL will be:', AUTH_API_BASE_URL + '/login');\n\n// Additional diagnostic logging\nconsole.log('🔧 API CONFIGURATION DIAGNOSTICS:');\nconsole.log('  - REACT_APP_AUTH_API_BASE_URL:', process.env.REACT_APP_AUTH_API_BASE_URL);\nconsole.log('  - REACT_APP_API_BASE_URL:', process.env.REACT_APP_API_BASE_URL);\nconsole.log('  - REACT_APP_FORMATOS_API_URL:', process.env.REACT_APP_FORMATOS_API_URL);\nconsole.log('  - NODE_ENV:', process.env.NODE_ENV);\nconsole.log('  - Current hostname:', window.location.hostname);\nconsole.log('  - Current protocol:', window.location.protocol);\n\n// Crear instancia de axios para autenticación\nconst authClient = axios.create({\n  baseURL: AUTH_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Crear instancia de axios para dashboard\nconst dashboardClient = axios.create({\n  baseURL: DASHBOARD_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Función helper para configurar interceptors\nconst setupInterceptors = (client, serviceName) => {\n  // Interceptor para agregar token de autenticación\n  client.interceptors.request.use(\n    (config) => {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    },\n    (error) => {\n      console.error(`Error en ${serviceName} request interceptor:`, error);\n      return Promise.reject(error);\n    }\n  );\n\n  // Interceptor para manejar respuestas y errores\n  client.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      const errorInfo = generateErrorMessage(error);\n\n      // Solo log crítico de errores\n      if (errorInfo.isCorsError) {\n        console.error(`CORS ERROR (${serviceName}):`, error.config?.url);\n      } else if (errorInfo.isNetworkError) {\n        console.error(`Network error (${serviceName}):`, error.message);\n      } else if (error.response) {\n        console.error(`HTTP ${error.response.status} (${serviceName}):`, error.response.data);\n      }\n\n      // Manejar errores de autenticación\n      if (error.response?.status === 401 && !errorInfo.isNetworkError) {\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('currentUser');\n        window.location.href = '/login';\n      }\n\n      const enhancedError = {\n        message: errorInfo.message,\n        type: errorInfo.type,\n        status: errorInfo.status,\n        isCorsError: errorInfo.isCorsError,\n        isNetworkError: errorInfo.isNetworkError,\n        suggestions: errorInfo.suggestions,\n        serverMessage: error.response?.data?.message || null,\n        originalError: error,\n        response: error.response\n      };\n\n      return Promise.reject(enhancedError);\n    }\n  );\n};\n\n// Configurar interceptors para los clientes\nsetupInterceptors(authClient, 'AUTH');\nsetupInterceptors(dashboardClient, 'DASHBOARD');\n\n// Definición de roles del sistema\nexport const ROLES = {\n  CONSULTA: 'CONSULTA',\n  ADMINISTRADOR: 'ADMINISTRADOR'\n};\n\n// ==================== CORS ERROR DETECTION ====================\n\n/**\n * Detecta si un error de axios es causado por CORS\n * @param {Error} error - El objeto de error de axios\n * @returns {boolean} true si es un error de CORS, false en caso contrario\n */\nexport const detectCorsError = (error) => {\n  // CORS errors typically have these characteristics:\n  // 1. No response object (preflight or actual request blocked)\n  // 2. Network Error message\n  // 3. Error code ERR_NETWORK\n  // 4. Request was made but no response received\n\n  // Check if there's no response (most common CORS indicator)\n  if (!error.response) {\n    // Check for network error patterns\n    const isNetworkError = error.message === 'Network Error' ||\n      error.code === 'ERR_NETWORK';\n\n    // Check if request was configured (means axios tried to send it)\n    const hasRequestConfig = !!error.config;\n\n    // CORS errors occur when:\n    // - There's a network error\n    // - Request was configured and attempted\n    // - No response was received (blocked by browser)\n    if (isNetworkError && hasRequestConfig) {\n      // Additional check: if the URL is cross-origin\n      const requestUrl = error.config?.url || '';\n      const baseURL = error.config?.baseURL || '';\n      const fullUrl = requestUrl.startsWith('http') ? requestUrl : baseURL + requestUrl;\n\n      // If we're making a request to a different origin, it's likely CORS\n      if (fullUrl.startsWith('http')) {\n        const currentOrigin = `${window.location.protocol}//${window.location.host}`;\n        const requestOrigin = new URL(fullUrl).origin;\n\n        // Different origins = likely CORS issue\n        if (currentOrigin !== requestOrigin) {\n          return true;\n        }\n      }\n\n      // Even same origin can have CORS issues in some cases\n      // If it's a network error with no response, assume CORS\n      return true;\n    }\n  }\n\n  // Check for specific CORS-related error messages\n  const errorMessage = error.message?.toLowerCase() || '';\n  const corsKeywords = ['cors', 'cross-origin', 'preflight'];\n\n  if (corsKeywords.some(keyword => errorMessage.includes(keyword))) {\n    return true;\n  }\n\n  // Not a CORS error\n  return false;\n};\n\n// ==================== ERROR MESSAGE GENERATOR ====================\n\n/**\n * Genera mensajes de error amigables y accionables para diferentes tipos de errores\n * @param {Error} error - El objeto de error original\n * @returns {Object} Objeto con mensaje, sugerencias y tipo de error\n */\nexport const generateErrorMessage = (error) => {\n  const errorInfo = {\n    message: '',\n    suggestions: [],\n    type: 'unknown',\n    isNetworkError: false,\n    isCorsError: false,\n    status: error.response?.status || 0,\n    originalError: error\n  };\n\n  // Usar la función de detección de CORS\n  const isCorsError = detectCorsError(error);\n\n  // Detectar si es un error de red (sin respuesta del servidor)\n  const isNetworkError = !error.response && (\n    error.message === 'Network Error' ||\n    error.code === 'ERR_NETWORK' ||\n    error.code === 'ECONNABORTED' ||\n    !error.status\n  );\n\n  if (isCorsError) {\n    // Error de CORS\n    errorInfo.type = 'cors';\n    errorInfo.isCorsError = true;\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'No se puede conectar con el servidor debido a restricciones de CORS';\n    errorInfo.suggestions = [\n      '🔧 Verifica que el servidor backend esté ejecutándose en http://localhost:8080',\n      '🔧 Asegúrate de que el backend tenga configurado CORS correctamente',\n      '🔍 Revisa la consola del navegador para ver detalles específicos del error CORS',\n      '⚙️ Si eres desarrollador, verifica la configuración de CORS en el backend (WebMvcConfigurer o SecurityFilterChain)',\n      '🔄 Intenta reiniciar tanto el frontend como el backend',\n      '📝 Verifica que el backend permita el origen: ' + window.location.origin\n    ];\n  } else if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\n    // Error de timeout\n    errorInfo.type = 'timeout';\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'La solicitud al servidor tardó demasiado tiempo (timeout después de 30 segundos)';\n    errorInfo.suggestions = [\n      '🌐 Verifica tu conexión a internet',\n      '⏱️ El servidor puede estar experimentando alta carga o procesando una operación pesada',\n      '🔄 Intenta nuevamente en unos momentos',\n      '📊 Si trabajas con grandes volúmenes de datos, considera filtrar o paginar los resultados',\n      '🔧 Si el problema persiste, contacta al administrador del sistema'\n    ];\n  } else if (isNetworkError) {\n    // Error de red general (backend no disponible)\n    errorInfo.type = 'network';\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'No se puede conectar con el servidor - Backend no disponible';\n    errorInfo.suggestions = [\n      '🚀 Verifica que el servidor backend esté ejecutándose en ' + (error.config?.baseURL || 'http://localhost:8080'),\n      '🌐 Comprueba tu conexión a internet',\n      '🔍 Asegúrate de que la URL del servidor sea correcta',\n      '🛡️ Verifica que no haya un firewall bloqueando la conexión',\n      '🔧 Si eres desarrollador, inicia el backend con: ./mvnw spring-boot:run',\n      '📞 Si el problema persiste, contacta al administrador del sistema'\n    ];\n  } else if (error.response) {\n    // Error HTTP con respuesta del servidor\n    const status = error.response.status;\n\n    switch (status) {\n      case 400:\n        errorInfo.type = 'validation';\n        errorInfo.message = 'Los datos enviados no son válidos (Error 400)';\n        errorInfo.suggestions = [\n          '📝 Verifica que todos los campos requeridos estén completos',\n          '✅ Asegúrate de que los datos tengan el formato correcto (emails, teléfonos, fechas, etc.)',\n          '🔍 Revisa los mensajes de validación específicos del servidor',\n          '📋 Verifica que no haya campos con valores inválidos o fuera de rango'\n        ];\n        break;\n\n      case 401:\n        errorInfo.type = 'authentication';\n        errorInfo.message = 'No estás autenticado o tu sesión ha expirado (Error 401)';\n        errorInfo.suggestions = [\n          '🔐 Inicia sesión nuevamente',\n          '✅ Verifica que tus credenciales sean correctas',\n          '⏱️ Tu sesión puede haber expirado por inactividad',\n          '🔄 Intenta cerrar sesión y volver a iniciar sesión'\n        ];\n        break;\n\n      case 403:\n        errorInfo.type = 'authorization';\n        errorInfo.message = 'No tienes permisos para realizar esta acción (Error 403)';\n        errorInfo.suggestions = [\n          '👤 Contacta al administrador para solicitar los permisos necesarios',\n          '🔑 Verifica que tu cuenta tenga el rol adecuado',\n          '⚙️ Puede que necesites permisos de ADMINISTRADOR para esta operación',\n          '📋 Revisa qué acciones están permitidas para tu rol actual'\n        ];\n        break;\n\n      case 404:\n        errorInfo.type = 'notFound';\n        errorInfo.message = 'El recurso solicitado no fue encontrado (Error 404)';\n        errorInfo.suggestions = [\n          '🔍 Verifica que el recurso exista en el sistema',\n          '🗑️ Puede que el recurso haya sido eliminado recientemente',\n          '🔄 Intenta refrescar la página y volver a intentar',\n          '📋 Verifica que el ID o identificador sea correcto'\n        ];\n        break;\n\n      case 409:\n        errorInfo.type = 'conflict';\n        errorInfo.message = 'Ya existe un recurso con estos datos (Error 409)';\n        errorInfo.suggestions = [\n          '🔍 Verifica que no estés duplicando información',\n          '📝 Puede que ya exista un registro con el mismo identificador único',\n          '✏️ Intenta con datos diferentes o actualiza el registro existente',\n          '🔄 Refresca la lista para ver los datos actuales'\n        ];\n        break;\n\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        errorInfo.type = 'serverError';\n        errorInfo.message = `Error interno del servidor (Error ${status})`;\n        errorInfo.suggestions = [\n          '🔥 El servidor está experimentando problemas técnicos',\n          '⏱️ Intenta nuevamente en unos momentos',\n          '🔧 Si el problema persiste, contacta al administrador del sistema',\n          '📝 Este error ha sido registrado automáticamente para su revisión',\n          '💾 Verifica que la base de datos esté disponible (si eres administrador)'\n        ];\n        break;\n\n      default:\n        errorInfo.type = 'http';\n        errorInfo.message = `Error del servidor (código ${status})`;\n        errorInfo.suggestions = [\n          '❌ Ocurrió un error inesperado en el servidor',\n          '🔄 Intenta nuevamente',\n          '📞 Si el problema persiste, contacta al soporte técnico',\n          '🔍 Código de error: ' + status\n        ];\n    }\n\n    // Agregar mensaje específico del servidor si está disponible\n    if (error.response.data?.message) {\n      errorInfo.serverMessage = error.response.data.message;\n    }\n  } else {\n    // Error desconocido\n    errorInfo.type = 'unknown';\n    errorInfo.message = 'Ocurrió un error inesperado';\n    errorInfo.suggestions = [\n      '🔄 Intenta refrescar la página',\n      '🌐 Verifica tu conexión a internet',\n      '💾 Limpia la caché del navegador si el problema persiste',\n      '🔧 Intenta cerrar y volver a abrir la aplicación',\n      '📞 Si el problema persiste, contacta al soporte técnico con detalles del error'\n    ];\n  }\n\n  return errorInfo;\n};\n\nclass ApiService {\n  // ==================== AUTENTICACIÓN ====================\n\n  async login(email, password) {\n    console.log('🔐 Starting login request...');\n    console.log('📧 Email:', email);\n    console.log('🌐 Auth API URL:', AUTH_API_BASE_URL);\n    console.log('🔗 Full login URL:', AUTH_API_BASE_URL + '/login');\n\n    const startTime = Date.now();\n\n    try {\n      console.log('📤 Sending login request...');\n      const response = await authClient.post('/login', { email, password });\n      const responseTime = Date.now() - startTime;\n      console.log('✅ Login request completed in', responseTime, 'ms');\n      console.log('📊 Response status:', response.status);\n\n      // FastAPI returns data directly in response.data, not nested\n      const responseData = response.data;\n      console.log('📦 Response data:', responseData);\n\n      // Check for error in FastAPI response format\n      if (responseData.error) {\n        console.error('❌ Server error in response:', responseData.error);\n        throw new Error(responseData.error.message || 'Error en el servidor');\n      }\n\n      if (!responseData.data) {\n        console.error('❌ Invalid server response: no data field');\n        throw new Error('Respuesta del servidor inválida');\n      }\n\n      const { token, user } = responseData.data;\n      console.log('🔑 Token received:', !!token);\n      console.log('👤 User received:', !!user);\n\n      if (!token || !user) {\n        console.error('❌ Incomplete server response - missing token or user');\n        throw new Error('Respuesta del servidor incompleta');\n      }\n\n      console.log('💾 Storing auth data in localStorage...');\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n\n      console.log('🎉 Login successful!');\n      return { data: { user, token }, error: null };\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      console.error('💥 Login failed after', responseTime, 'ms');\n      console.error('❌ Error details:', error);\n\n      if (error.response) {\n        console.error('📊 HTTP Error Response:');\n        console.error('   Status:', error.response.status);\n        console.error('   Status Text:', error.response.statusText);\n        console.error('   Headers:', error.response.headers);\n        console.error('   Data:', error.response.data);\n\n        // Handle FastAPI error format\n        const serverMessage = error.response.data?.detail ||\n                            error.response.data?.message ||\n                            error.response.data?.error?.message;\n        throw new Error(serverMessage || 'Error del servidor');\n      } else if (error.request) {\n        console.error('🌐 Network Error - No response received:');\n        console.error('   Request config:', error.config);\n        console.error('   Timeout was set to:', error.config?.timeout, 'ms');\n        throw new Error('No se pudo conectar con el servidor. Verifica que el backend esté corriendo.');\n      } else {\n        console.error('⚠️ Unexpected error:', error.message);\n        throw error;\n      }\n    }\n  }\n\n  // Cerrar sesión\n  async logout() {\n    try {\n      await authClient.post('/logout');\n\n      // Limpiar localStorage\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n\n      return { success: true, error: null };\n    } catch (error) {\n      console.error('Error en logout:', error);\n      // Limpiar localStorage aunque falle la petición\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      return { success: true, error: null };\n    }\n  }\n\n\n  // Restablecer contraseña\n  async resetPassword(email) {\n    try {\n      const response = await authClient.post('/reset-password', { email });\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error en reset password:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al restablecer contraseña'\n        }\n      };\n    }\n  }\n\n  async getCurrentUser() {\n    try {\n      const storedUser = localStorage.getItem('currentUser');\n      const storedToken = localStorage.getItem('authToken');\n\n      if (storedUser && storedToken) {\n        try {\n          const user = JSON.parse(storedUser);\n\n          if (user && user.email && user.id) {\n            return { data: user, error: null };\n          } else {\n            localStorage.removeItem('currentUser');\n            localStorage.removeItem('authToken');\n            return { data: null, error: null };\n          }\n        } catch (parseError) {\n          console.error('Error parseando usuario:', parseError);\n          localStorage.removeItem('currentUser');\n          localStorage.removeItem('authToken');\n          return { data: null, error: null };\n        }\n      }\n\n      return { data: null, error: null };\n    } catch (error) {\n      console.error('Error obteniendo usuario actual:', error);\n      return { data: null, error };\n    }\n  }\n\n  // Actualizar perfil de usuario\n  async updateProfile(profileData) {\n    try {\n      const response = await authClient.put('/profile', profileData);\n\n      // Actualizar usuario en localStorage\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n      const updatedUser = { ...currentUser, ...response.data };\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando perfil:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar perfil'\n        }\n      };\n    }\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    try {\n      // Consultar endpoint real en backend FastAPI\n      const response = await authClient.get('/permission', {\n        params: { role: requiredRole }\n      });\n\n      return response.data.hasPermission || false;\n    } catch (error) {\n      console.error('Error verificando permisos:', error);\n      // Fallback temporal a verificación local si el endpoint no existe\n      try {\n        const { data: user } = await this.getCurrentUser();\n\n        if (!user) return false;\n\n        const userRole = user.rol || user.role || ROLES.CONSULTA;\n\n        // Jerarquía de roles: ADMINISTRADOR > CONSULTA\n        const roleHierarchy = {\n          [ROLES.ADMINISTRADOR]: 2,\n          [ROLES.CONSULTA]: 1\n        };\n\n        const userLevel = roleHierarchy[userRole] || 1;\n        const requiredLevel = roleHierarchy[requiredRole] || 1;\n\n        return userLevel >= requiredLevel;\n      } catch (fallbackError) {\n        console.error('Fallback también falló:', fallbackError);\n        return false;\n      }\n    }\n  }\n\n\n  // ==================== UTILIDADES ====================\n  \n  /**\n   * Verifica la conexión con el backend de autenticación\n   * @returns {Promise<Object>} Objeto con información detallada de la conexión\n   */\n  async testConnection() {\n    const startTime = Date.now();\n    const results = {\n      auth: null,\n      overall: { success: false, message: 'Conexión fallida' }\n    };\n  \n    // Test auth service\n    try {\n      const authResponse = await authClient.get('/health');\n      results.auth = {\n        success: true,\n        connected: true,\n        responseTime: Date.now() - startTime,\n        status: authResponse.status,\n        baseURL: AUTH_API_BASE_URL,\n        data: authResponse.data,\n        message: 'Conexión exitosa con auth service'\n      };\n    } catch (error) {\n      const errorInfo = generateErrorMessage(error);\n      results.auth = {\n        success: false,\n        connected: false,\n        responseTime: Date.now() - startTime,\n        baseURL: AUTH_API_BASE_URL,\n        error: error.message || 'Error de conexión',\n        errorType: errorInfo.type,\n        isCorsError: errorInfo.isCorsError,\n        isNetworkError: errorInfo.isNetworkError,\n        suggestions: errorInfo.suggestions,\n        message: errorInfo.message\n      };\n    }\n  \n    // Overall result\n    const authSuccess = results.auth.success;\n  \n    if (authSuccess) {\n      results.overall = {\n        success: true,\n        message: 'Conexión exitosa con el servicio de autenticación'\n      };\n    } else {\n      results.overall = {\n        success: false,\n        message: 'El servicio de autenticación no está disponible'\n      };\n    }\n  \n    return results;\n  }\n  \n  /**\n   * Verifica si el backend de autenticación está disponible antes de operaciones críticas\n   * @param {number} timeout - Timeout en milisegundos (por defecto 5000ms)\n   * @returns {Promise<Object>} Objeto con estado del servicio\n   */\n  async isBackendReachable(timeout = 5000) {\n    const results = { auth: false };\n  \n    // Check auth service\n    try {\n      const authCheck = axios.create({\n        baseURL: AUTH_API_BASE_URL,\n        timeout: timeout,\n        headers: { 'Accept': 'application/json' }\n      });\n      await authCheck.get('/health');\n      results.auth = true;\n    } catch (error) {\n      console.warn('Auth service no disponible:', error.message);\n    }\n  \n    return results;\n  }\n  \n  // ==================== DASHBOARD ====================\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    try {\n      const response = await dashboardClient.get('/dashboard/stats');\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo datos del dashboard:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener datos del dashboard'\n        }\n      };\n    }\n  }\n\n  // ==================== USUARIOS ====================\n\n  // Obtener lista de usuarios\n  async getUsuarios() {\n    try {\n      const response = await authClient.get('/usuarios');\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo usuarios:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener usuarios'\n        }\n      };\n    }\n  }\n\n  // ==================== PARTICIPANTES ====================\n\n  // Obtener lista de participantes\n  async getParticipantes() {\n    try {\n      const response = await dashboardClient.get('/participantes');\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo participantes:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener participantes'\n        }\n      };\n    }\n  }\n\n  // ==================== MENSUALIDADES ====================\n\n  // Obtener lista de mensualidades\n  async getMensualidades() {\n    try {\n      const response = await dashboardClient.get('/mensualidades');\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo mensualidades:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener mensualidades'\n        }\n      };\n    }\n  }\n\n  // ==================== SEDES ====================\n\n  // Obtener lista de sedes\n  async getSedes() {\n    try {\n      const response = await dashboardClient.get('/sedes');\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo sedes:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener sedes'\n        }\n      };\n    }\n  }\n\n  // ==================== ACUDIENTES ====================\n\n  // Obtener lista de acudientes\n  async getAcudientes(filters) {\n    try {\n      const response = await dashboardClient.get('/acudientes', {\n        params: filters\n      });\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo acudientes:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener acudientes'\n        }\n      };\n    }\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return {\n      authBaseURL: AUTH_API_BASE_URL,\n      dashboardBaseURL: DASHBOARD_API_BASE_URL,\n      hasToken: !!localStorage.getItem('authToken'),\n      environment: process.env.NODE_ENV,\n      isConfigured: !!AUTH_API_BASE_URL && !!DASHBOARD_API_BASE_URL\n    };\n  }\n}\n\n// Exportar instancia única del servicio\nexport const api = new ApiService();\nexport default api;\n\n// Exportar cliente axios para uso directo si es necesario\nexport { authClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}