{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';/**\n * Hook for managing global performance monitoring state\n * Provides toggle functionality and persistence via localStorage\n */const usePerformanceMonitoring=()=>{const[isEnabled,setIsEnabled]=useState(()=>{if(process.env.NODE_ENV!=='development')return false;// Check environment variable first\nif(process.env.REACT_APP_PERFORMANCE_MONITORING==='true')return true;// Check localStorage\nreturn localStorage.getItem('enablePerformanceMonitoring')==='true';});const[overlayVisible,setOverlayVisible]=useState(()=>{if(process.env.NODE_ENV!=='development')return false;return localStorage.getItem('performanceOverlayVisible')==='true';});// Persist settings to localStorage\nuseEffect(()=>{if(process.env.NODE_ENV==='development'){localStorage.setItem('enablePerformanceMonitoring',isEnabled.toString());}},[isEnabled]);useEffect(()=>{if(process.env.NODE_ENV==='development'){localStorage.setItem('performanceOverlayVisible',overlayVisible.toString());}},[overlayVisible]);const toggleMonitoring=useCallback(()=>{setIsEnabled(prev=>!prev);},[]);const toggleOverlay=useCallback(()=>{setOverlayVisible(prev=>!prev);},[]);const enableMonitoring=useCallback(()=>{setIsEnabled(true);},[]);const disableMonitoring=useCallback(()=>{setIsEnabled(false);},[]);const showOverlay=useCallback(()=>{setOverlayVisible(true);},[]);const hideOverlay=useCallback(()=>{setOverlayVisible(false);},[]);// Global keyboard shortcuts\nuseEffect(()=>{if(process.env.NODE_ENV!=='development')return;const handleKeyPress=e=>{// Ctrl/Cmd + Shift + M to toggle monitoring\nif((e.ctrlKey||e.metaKey)&&e.shiftKey&&e.key==='M'){e.preventDefault();toggleMonitoring();console.log(\"Performance monitoring \".concat(!isEnabled?'enabled':'disabled'));}// Ctrl/Cmd + Shift + O to toggle overlay\nif((e.ctrlKey||e.metaKey)&&e.shiftKey&&e.key==='O'){e.preventDefault();toggleOverlay();console.log(\"Performance overlay \".concat(!overlayVisible?'shown':'hidden'));}};window.addEventListener('keydown',handleKeyPress);return()=>window.removeEventListener('keydown',handleKeyPress);},[isEnabled,overlayVisible,toggleMonitoring,toggleOverlay]);// Console commands for debugging\nuseEffect(()=>{if(process.env.NODE_ENV==='development'){// Make functions available globally for console debugging\nwindow.performanceMonitoring={toggle:toggleMonitoring,enable:enableMonitoring,disable:disableMonitoring,showOverlay,hideOverlay,isEnabled,overlayVisible};}return()=>{if(window.performanceMonitoring){delete window.performanceMonitoring;}};},[toggleMonitoring,enableMonitoring,disableMonitoring,showOverlay,hideOverlay,isEnabled,overlayVisible]);return{isEnabled,overlayVisible,toggleMonitoring,toggleOverlay,enableMonitoring,disableMonitoring,showOverlay,hideOverlay};};export default usePerformanceMonitoring;","map":{"version":3,"names":["useState","useEffect","useCallback","usePerformanceMonitoring","isEnabled","setIsEnabled","process","env","NODE_ENV","REACT_APP_PERFORMANCE_MONITORING","localStorage","getItem","overlayVisible","setOverlayVisible","setItem","toString","toggleMonitoring","prev","toggleOverlay","enableMonitoring","disableMonitoring","showOverlay","hideOverlay","handleKeyPress","e","ctrlKey","metaKey","shiftKey","key","preventDefault","console","log","concat","window","addEventListener","removeEventListener","performanceMonitoring","toggle","enable","disable"],"sources":["/Users/todoporunalma/Desktop/Corporacion/coptua_react/src/shared/hooks/usePerformanceMonitoring.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n/**\n * Hook for managing global performance monitoring state\n * Provides toggle functionality and persistence via localStorage\n */\nconst usePerformanceMonitoring = () => {\n  const [isEnabled, setIsEnabled] = useState(() => {\n    if (process.env.NODE_ENV !== 'development') return false;\n    \n    // Check environment variable first\n    if (process.env.REACT_APP_PERFORMANCE_MONITORING === 'true') return true;\n    \n    // Check localStorage\n    return localStorage.getItem('enablePerformanceMonitoring') === 'true';\n  });\n\n  const [overlayVisible, setOverlayVisible] = useState(() => {\n    if (process.env.NODE_ENV !== 'development') return false;\n    return localStorage.getItem('performanceOverlayVisible') === 'true';\n  });\n\n  // Persist settings to localStorage\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      localStorage.setItem('enablePerformanceMonitoring', isEnabled.toString());\n    }\n  }, [isEnabled]);\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      localStorage.setItem('performanceOverlayVisible', overlayVisible.toString());\n    }\n  }, [overlayVisible]);\n\n  const toggleMonitoring = useCallback(() => {\n    setIsEnabled(prev => !prev);\n  }, []);\n\n  const toggleOverlay = useCallback(() => {\n    setOverlayVisible(prev => !prev);\n  }, []);\n\n  const enableMonitoring = useCallback(() => {\n    setIsEnabled(true);\n  }, []);\n\n  const disableMonitoring = useCallback(() => {\n    setIsEnabled(false);\n  }, []);\n\n  const showOverlay = useCallback(() => {\n    setOverlayVisible(true);\n  }, []);\n\n  const hideOverlay = useCallback(() => {\n    setOverlayVisible(false);\n  }, []);\n\n  // Global keyboard shortcuts\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'development') return;\n\n    const handleKeyPress = (e) => {\n      // Ctrl/Cmd + Shift + M to toggle monitoring\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'M') {\n        e.preventDefault();\n        toggleMonitoring();\n        console.log(`Performance monitoring ${!isEnabled ? 'enabled' : 'disabled'}`);\n      }\n      \n      // Ctrl/Cmd + Shift + O to toggle overlay\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'O') {\n        e.preventDefault();\n        toggleOverlay();\n        console.log(`Performance overlay ${!overlayVisible ? 'shown' : 'hidden'}`);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isEnabled, overlayVisible, toggleMonitoring, toggleOverlay]);\n\n  // Console commands for debugging\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      // Make functions available globally for console debugging\n      window.performanceMonitoring = {\n        toggle: toggleMonitoring,\n        enable: enableMonitoring,\n        disable: disableMonitoring,\n        showOverlay,\n        hideOverlay,\n        isEnabled,\n        overlayVisible\n      };\n    }\n\n    return () => {\n      if (window.performanceMonitoring) {\n        delete window.performanceMonitoring;\n      }\n    };\n  }, [\n    toggleMonitoring, \n    enableMonitoring, \n    disableMonitoring, \n    showOverlay, \n    hideOverlay, \n    isEnabled, \n    overlayVisible\n  ]);\n\n  return {\n    isEnabled,\n    overlayVisible,\n    toggleMonitoring,\n    toggleOverlay,\n    enableMonitoring,\n    disableMonitoring,\n    showOverlay,\n    hideOverlay\n  };\n};\n\nexport default usePerformanceMonitoring;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}