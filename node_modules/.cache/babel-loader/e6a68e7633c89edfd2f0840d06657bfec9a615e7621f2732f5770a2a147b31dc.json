{"ast":null,"code":"/**\n * Validation Utilities\n * Centralized validation functions for the application\n */import{dbService}from'../services';/**\n * Validate that a documento number is unique for participantes\n * @param {string} numeroDocumento - Document number to validate\n * @param {number|null} participanteId - ID of current participante (for edit mode)\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */export const validateParticipanteDocumentoUnico=async function(numeroDocumento){let participanteId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{if(!numeroDocumento||!numeroDocumento.trim()){return{isValid:false,error:'El número de documento es requerido'};}const result=await dbService.getParticipantes();if(result.data&&Array.isArray(result.data)){const exists=result.data.some(p=>{const pId=p.id||p.id_participante;return p.numero_documento===numeroDocumento&&pId!==participanteId;});if(exists){return{isValid:false,error:'El número de documento ya está registrado para otro participante'};}}return{isValid:true,error:null};}catch(err){console.error('Error validating participante documento:',err);// Allow if validation fails to not block the user\nreturn{isValid:true,error:null};}};/**\n * Validate that a documento number is unique for acudientes\n * @param {string} numeroDocumento - Document number to validate\n * @param {number|null} acudienteId - ID of current acudiente (for edit mode)\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */export const validateAcudienteDocumentoUnico=async function(numeroDocumento){let acudienteId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{if(!numeroDocumento||!numeroDocumento.trim()){return{isValid:false,error:'El número de documento es requerido'};}const result=await dbService.getAcudientes();if(result.data&&Array.isArray(result.data)){const exists=result.data.some(a=>{const aId=a.id||a.id_acudiente;return a.numero_documento===numeroDocumento&&aId!==acudienteId;});if(exists){return{isValid:false,error:'El número de documento ya está registrado para otro acudiente'};}}return{isValid:true,error:null};}catch(err){console.error('Error validating acudiente documento:',err);// Allow if validation fails to not block the user\nreturn{isValid:true,error:null};}};/**\n * Validate email format\n * @param {string} email - Email to validate\n * @returns {{isValid: boolean, error: string|null}}\n */export const validateEmail=email=>{if(!email||!email.trim()){return{isValid:false,error:'El email es requerido'};}// Basic email regex pattern\nconst emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;if(!emailRegex.test(email)){return{isValid:false,error:'El formato del email no es válido'};}return{isValid:true,error:null};};/**\n * Validate date format and ensure it's not in the future\n * @param {string} fecha - Date string to validate\n * @param {string} fieldName - Name of the field for error messages\n * @returns {{isValid: boolean, error: string|null}}\n */export const validateFecha=function(fecha){let fieldName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'fecha';if(!fecha){return{isValid:false,error:\"La \".concat(fieldName,\" es requerida\")};}const date=new Date(fecha);const today=new Date();// Reset time to compare only dates\ntoday.setHours(23,59,59,999);// Check if date is valid\nif(!(date instanceof Date)||isNaN(date.getTime())){return{isValid:false,error:\"La \".concat(fieldName,\" no es v\\xE1lida\")};}// Check if date is not in the future\nif(date>today){return{isValid:false,error:\"La \".concat(fieldName,\" no puede ser futura\")};}return{isValid:true,error:null};};/**\n * Validate fecha_nacimiento specifically\n * @param {string} fechaNacimiento - Birth date to validate\n * @returns {{isValid: boolean, error: string|null}}\n */export const validateFechaNacimiento=fechaNacimiento=>{return validateFecha(fechaNacimiento,'fecha de nacimiento');};/**\n * Validate fecha_ingreso specifically\n * @param {string} fechaIngreso - Entry date to validate\n * @returns {{isValid: boolean, error: string|null}}\n */export const validateFechaIngreso=fechaIngreso=>{return validateFecha(fechaIngreso,'fecha de ingreso');};/**\n * Validate that a participante exists\n * @param {number} participanteId - ID of participante to validate\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */export const validateParticipanteExists=async participanteId=>{try{if(!participanteId){return{isValid:false,error:'Debe seleccionar un participante'};}const result=await dbService.getParticipantes();if(result.data&&Array.isArray(result.data)){const exists=result.data.some(p=>(p.id_participante||p.id)===parseInt(participanteId));if(!exists){return{isValid:false,error:'El participante seleccionado no existe'};}}return{isValid:true,error:null};}catch(err){console.error('Error validating participante exists:',err);return{isValid:false,error:'Error al validar el participante'};}};/**\n * Validate that a sede exists\n * @param {number} sedeId - ID of sede to validate\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */export const validateSedeExists=async sedeId=>{try{if(!sedeId){return{isValid:false,error:'Debe seleccionar una sede'};}const result=await dbService.getSedes();if(result.data&&Array.isArray(result.data)){const exists=result.data.some(s=>(s.id_sede||s.id)===parseInt(sedeId));if(!exists){return{isValid:false,error:'La sede seleccionada no existe'};}}return{isValid:true,error:null};}catch(err){console.error('Error validating sede exists:',err);return{isValid:false,error:'Error al validar la sede'};}};/**\n * Validate that an acudiente exists\n * @param {number} acudienteId - ID of acudiente to validate\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */export const validateAcudienteExists=async acudienteId=>{try{if(!acudienteId){return{isValid:false,error:'Debe seleccionar un acudiente'};}const result=await dbService.getAcudientes();if(result.data&&Array.isArray(result.data)){const exists=result.data.some(a=>(a.id_acudiente||a.id)===parseInt(acudienteId));if(!exists){return{isValid:false,error:'El acudiente seleccionado no existe'};}}return{isValid:true,error:null};}catch(err){console.error('Error validating acudiente exists:',err);return{isValid:false,error:'Error al validar el acudiente'};}};/**\n * Validate mensualidad relationships (participante and acudiente must exist)\n * @param {number} participanteId - ID of participante\n * @param {number} acudienteId - ID of acudiente\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */export const validateMensualidadRelations=async(participanteId,acudienteId)=>{// Validate participante\nconst participanteValidation=await validateParticipanteExists(participanteId);if(!participanteValidation.isValid){return participanteValidation;}// Validate acudiente\nconst acudienteValidation=await validateAcudienteExists(acudienteId);if(!acudienteValidation.isValid){return acudienteValidation;}return{isValid:true,error:null};};","map":{"version":3,"names":["dbService","validateParticipanteDocumentoUnico","numeroDocumento","participanteId","arguments","length","undefined","trim","isValid","error","result","getParticipantes","data","Array","isArray","exists","some","p","pId","id","id_participante","numero_documento","err","console","validateAcudienteDocumentoUnico","acudienteId","getAcudientes","a","aId","id_acudiente","validateEmail","email","emailRegex","test","validateFecha","fecha","fieldName","concat","date","Date","today","setHours","isNaN","getTime","validateFechaNacimiento","fechaNacimiento","validateFechaIngreso","fechaIngreso","validateParticipanteExists","parseInt","validateSedeExists","sedeId","getSedes","s","id_sede","validateAcudienteExists","validateMensualidadRelations","participanteValidation","acudienteValidation"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/utils/validationUtils.js"],"sourcesContent":["/**\n * Validation Utilities\n * Centralized validation functions for the application\n */\n\nimport { dbService } from '../services';\n\n/**\n * Validate that a documento number is unique for participantes\n * @param {string} numeroDocumento - Document number to validate\n * @param {number|null} participanteId - ID of current participante (for edit mode)\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */\nexport const validateParticipanteDocumentoUnico = async (numeroDocumento, participanteId = null) => {\n  try {\n    if (!numeroDocumento || !numeroDocumento.trim()) {\n      return { isValid: false, error: 'El número de documento es requerido' };\n    }\n\n    const result = await dbService.getParticipantes();\n    if (result.data && Array.isArray(result.data)) {\n      const exists = result.data.some(p => {\n        const pId = p.id || p.id_participante;\n        return p.numero_documento === numeroDocumento && pId !== participanteId;\n      });\n      \n      if (exists) {\n        return { \n          isValid: false, \n          error: 'El número de documento ya está registrado para otro participante' \n        };\n      }\n    }\n    \n    return { isValid: true, error: null };\n  } catch (err) {\n    console.error('Error validating participante documento:', err);\n    // Allow if validation fails to not block the user\n    return { isValid: true, error: null };\n  }\n};\n\n/**\n * Validate that a documento number is unique for acudientes\n * @param {string} numeroDocumento - Document number to validate\n * @param {number|null} acudienteId - ID of current acudiente (for edit mode)\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */\nexport const validateAcudienteDocumentoUnico = async (numeroDocumento, acudienteId = null) => {\n  try {\n    if (!numeroDocumento || !numeroDocumento.trim()) {\n      return { isValid: false, error: 'El número de documento es requerido' };\n    }\n\n    const result = await dbService.getAcudientes();\n    if (result.data && Array.isArray(result.data)) {\n      const exists = result.data.some(a => {\n        const aId = a.id || a.id_acudiente;\n        return a.numero_documento === numeroDocumento && aId !== acudienteId;\n      });\n      \n      if (exists) {\n        return { \n          isValid: false, \n          error: 'El número de documento ya está registrado para otro acudiente' \n        };\n      }\n    }\n    \n    return { isValid: true, error: null };\n  } catch (err) {\n    console.error('Error validating acudiente documento:', err);\n    // Allow if validation fails to not block the user\n    return { isValid: true, error: null };\n  }\n};\n\n/**\n * Validate email format\n * @param {string} email - Email to validate\n * @returns {{isValid: boolean, error: string|null}}\n */\nexport const validateEmail = (email) => {\n  if (!email || !email.trim()) {\n    return { isValid: false, error: 'El email es requerido' };\n  }\n\n  // Basic email regex pattern\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  \n  if (!emailRegex.test(email)) {\n    return { \n      isValid: false, \n      error: 'El formato del email no es válido' \n    };\n  }\n\n  return { isValid: true, error: null };\n};\n\n/**\n * Validate date format and ensure it's not in the future\n * @param {string} fecha - Date string to validate\n * @param {string} fieldName - Name of the field for error messages\n * @returns {{isValid: boolean, error: string|null}}\n */\nexport const validateFecha = (fecha, fieldName = 'fecha') => {\n  if (!fecha) {\n    return { isValid: false, error: `La ${fieldName} es requerida` };\n  }\n\n  const date = new Date(fecha);\n  const today = new Date();\n  \n  // Reset time to compare only dates\n  today.setHours(23, 59, 59, 999);\n\n  // Check if date is valid\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\n    return { \n      isValid: false, \n      error: `La ${fieldName} no es válida` \n    };\n  }\n\n  // Check if date is not in the future\n  if (date > today) {\n    return { \n      isValid: false, \n      error: `La ${fieldName} no puede ser futura` \n    };\n  }\n\n  return { isValid: true, error: null };\n};\n\n/**\n * Validate fecha_nacimiento specifically\n * @param {string} fechaNacimiento - Birth date to validate\n * @returns {{isValid: boolean, error: string|null}}\n */\nexport const validateFechaNacimiento = (fechaNacimiento) => {\n  return validateFecha(fechaNacimiento, 'fecha de nacimiento');\n};\n\n/**\n * Validate fecha_ingreso specifically\n * @param {string} fechaIngreso - Entry date to validate\n * @returns {{isValid: boolean, error: string|null}}\n */\nexport const validateFechaIngreso = (fechaIngreso) => {\n  return validateFecha(fechaIngreso, 'fecha de ingreso');\n};\n\n/**\n * Validate that a participante exists\n * @param {number} participanteId - ID of participante to validate\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */\nexport const validateParticipanteExists = async (participanteId) => {\n  try {\n    if (!participanteId) {\n      return { isValid: false, error: 'Debe seleccionar un participante' };\n    }\n\n    const result = await dbService.getParticipantes();\n    if (result.data && Array.isArray(result.data)) {\n      const exists = result.data.some(p => \n        (p.id_participante || p.id) === parseInt(participanteId)\n      );\n      \n      if (!exists) {\n        return { \n          isValid: false, \n          error: 'El participante seleccionado no existe' \n        };\n      }\n    }\n    \n    return { isValid: true, error: null };\n  } catch (err) {\n    console.error('Error validating participante exists:', err);\n    return { isValid: false, error: 'Error al validar el participante' };\n  }\n};\n\n/**\n * Validate that a sede exists\n * @param {number} sedeId - ID of sede to validate\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */\nexport const validateSedeExists = async (sedeId) => {\n  try {\n    if (!sedeId) {\n      return { isValid: false, error: 'Debe seleccionar una sede' };\n    }\n\n    const result = await dbService.getSedes();\n    if (result.data && Array.isArray(result.data)) {\n      const exists = result.data.some(s => \n        (s.id_sede || s.id) === parseInt(sedeId)\n      );\n      \n      if (!exists) {\n        return { \n          isValid: false, \n          error: 'La sede seleccionada no existe' \n        };\n      }\n    }\n    \n    return { isValid: true, error: null };\n  } catch (err) {\n    console.error('Error validating sede exists:', err);\n    return { isValid: false, error: 'Error al validar la sede' };\n  }\n};\n\n/**\n * Validate that an acudiente exists\n * @param {number} acudienteId - ID of acudiente to validate\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */\nexport const validateAcudienteExists = async (acudienteId) => {\n  try {\n    if (!acudienteId) {\n      return { isValid: false, error: 'Debe seleccionar un acudiente' };\n    }\n\n    const result = await dbService.getAcudientes();\n    if (result.data && Array.isArray(result.data)) {\n      const exists = result.data.some(a => \n        (a.id_acudiente || a.id) === parseInt(acudienteId)\n      );\n      \n      if (!exists) {\n        return { \n          isValid: false, \n          error: 'El acudiente seleccionado no existe' \n        };\n      }\n    }\n    \n    return { isValid: true, error: null };\n  } catch (err) {\n    console.error('Error validating acudiente exists:', err);\n    return { isValid: false, error: 'Error al validar el acudiente' };\n  }\n};\n\n/**\n * Validate mensualidad relationships (participante and acudiente must exist)\n * @param {number} participanteId - ID of participante\n * @param {number} acudienteId - ID of acudiente\n * @returns {Promise<{isValid: boolean, error: string|null}>}\n */\nexport const validateMensualidadRelations = async (participanteId, acudienteId) => {\n  // Validate participante\n  const participanteValidation = await validateParticipanteExists(participanteId);\n  if (!participanteValidation.isValid) {\n    return participanteValidation;\n  }\n\n  // Validate acudiente\n  const acudienteValidation = await validateAcudienteExists(acudienteId);\n  if (!acudienteValidation.isValid) {\n    return acudienteValidation;\n  }\n\n  return { isValid: true, error: null };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}