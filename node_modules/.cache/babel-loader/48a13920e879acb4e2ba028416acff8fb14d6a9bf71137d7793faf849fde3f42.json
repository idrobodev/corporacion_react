{"ast":null,"code":"import _objectSpread from\"/Users/todoporunalma/Desktop/ol/corporacion_react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Servicio API   \nimport axios from'axios';// Función para determinar la URL base correcta de la API\nconst getApiBaseUrl=defaultUrl=>{// Si hay una variable de entorno configurada, úsala\nif(process.env.REACT_APP_AUTH_API_BASE_URL||process.env.REACT_APP_DASHBOARD_API_BASE_URL){return defaultUrl;}// Detectar automáticamente el dominio actual\nconst currentOrigin=window.location.origin;// ej: https://www.todoporunalma.org o https://todoporunalma.org\n// Si estamos en www, usar la URL sin www para la API (hasta que el backend soporte www)\nif(currentOrigin==='https://www.todoporunalma.org'){return'https://todoporunalma.org';}// Para desarrollo local o dominio principal, usar el origen actual\nreturn currentOrigin;};// Configuración base de las APIs\nconst API_BASE_DOMAIN=getApiBaseUrl('https://todoporunalma.org');const AUTH_API_BASE_URL=process.env.REACT_APP_AUTH_API_BASE_URL||\"\".concat(API_BASE_DOMAIN,\"/api/auth\");const DASHBOARD_API_BASE_URL=process.env.REACT_APP_DASHBOARD_API_BASE_URL||\"\".concat(API_BASE_DOMAIN,\"/api/dashboard\");console.log('🔧 PRODUCTION DEBUG - Environment variables:');console.log('  - NODE_ENV:',process.env.NODE_ENV);console.log('  - REACT_APP_AUTH_API_BASE_URL:',process.env.REACT_APP_AUTH_API_BASE_URL);console.log('  - REACT_APP_DASHBOARD_API_BASE_URL:',process.env.REACT_APP_DASHBOARD_API_BASE_URL);console.log('  - API_BASE_DOMAIN:',API_BASE_DOMAIN);console.log('  - AUTH_API_BASE_URL:',AUTH_API_BASE_URL);console.log('  - DASHBOARD_API_BASE_URL:',DASHBOARD_API_BASE_URL);// 🔍 DEBUG: Forzar URLs de producción correctas si estamos en producción\nif(process.env.NODE_ENV==='production'){console.log('🏭 PRODUCTION MODE DETECTED - Forzando URLs correctas');// Las URLs ya están configuradas correctamente en .env.production\n// pero vamos a verificar que se estén usando\n}console.log('🔧 AUTH_API_BASE_URL configurada como:',AUTH_API_BASE_URL);console.log('🔧 DASHBOARD_API_BASE_URL configurada como:',DASHBOARD_API_BASE_URL);console.log('🔧 Full login URL will be:',AUTH_API_BASE_URL+'/login');// Additional diagnostic logging\nconsole.log('🔧 API CONFIGURATION DIAGNOSTICS:');console.log('  - REACT_APP_AUTH_API_BASE_URL:',process.env.REACT_APP_AUTH_API_BASE_URL);console.log('  - REACT_APP_API_BASE_URL:',process.env.REACT_APP_API_BASE_URL);console.log('  - REACT_APP_FORMATOS_API_URL:',process.env.REACT_APP_FORMATOS_API_URL);console.log('  - NODE_ENV:',process.env.NODE_ENV);console.log('  - Current hostname:',window.location.hostname);console.log('  - Current protocol:',window.location.protocol);// Crear instancia de axios para autenticación\nconst authClient=axios.create({baseURL:AUTH_API_BASE_URL,timeout:30000,withCredentials:false,headers:{'Content-Type':'application/json','Accept':'application/json'}});// Crear instancia de axios para dashboard\nconst dashboardClient=axios.create({baseURL:DASHBOARD_API_BASE_URL,timeout:30000,withCredentials:false,headers:{'Content-Type':'application/json','Accept':'application/json'}});// Función helper para configurar interceptors\nconst setupInterceptors=(client,serviceName)=>{// Interceptor para agregar token de autenticación\nclient.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{console.error(\"Error en \".concat(serviceName,\" request interceptor:\"),error);return Promise.reject(error);});// Interceptor para manejar respuestas y errores\nclient.interceptors.response.use(response=>response,error=>{var _error$response,_error$response2,_error$response2$data;const errorInfo=generateErrorMessage(error);// Solo log crítico de errores\nif(errorInfo.isCorsError){var _error$config;console.error(\"CORS ERROR (\".concat(serviceName,\"):\"),(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url);}else if(errorInfo.isNetworkError){console.error(\"Network error (\".concat(serviceName,\"):\"),error.message);}else if(error.response){console.error(\"HTTP \".concat(error.response.status,\" (\").concat(serviceName,\"):\"),error.response.data);}// Manejar errores de autenticación\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!errorInfo.isNetworkError){localStorage.removeItem('authToken');localStorage.removeItem('currentUser');window.location.href='/login';}const enhancedError={message:errorInfo.message,type:errorInfo.type,status:errorInfo.status,isCorsError:errorInfo.isCorsError,isNetworkError:errorInfo.isNetworkError,suggestions:errorInfo.suggestions,serverMessage:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||null,originalError:error,response:error.response};return Promise.reject(enhancedError);});};// Configurar interceptors para los clientes\nsetupInterceptors(authClient,'AUTH');setupInterceptors(dashboardClient,'DASHBOARD');// Definición de roles del sistema\nexport const ROLES={CONSULTA:'CONSULTA',ADMINISTRADOR:'ADMINISTRADOR'};// ==================== CORS ERROR DETECTION ====================\n/**\n * Detecta si un error de axios es causado por CORS\n * @param {Error} error - El objeto de error de axios\n * @returns {boolean} true si es un error de CORS, false en caso contrario\n */export const detectCorsError=error=>{var _error$message;// CORS errors typically have these characteristics:\n// 1. No response object (preflight or actual request blocked)\n// 2. Network Error message\n// 3. Error code ERR_NETWORK\n// 4. Request was made but no response received\n// Check if there's no response (most common CORS indicator)\nif(!error.response){// Check for network error patterns\nconst isNetworkError=error.message==='Network Error'||error.code==='ERR_NETWORK';// Check if request was configured (means axios tried to send it)\nconst hasRequestConfig=!!error.config;// CORS errors occur when:\n// - There's a network error\n// - Request was configured and attempted\n// - No response was received (blocked by browser)\nif(isNetworkError&&hasRequestConfig){var _error$config2,_error$config3;// Additional check: if the URL is cross-origin\nconst requestUrl=((_error$config2=error.config)===null||_error$config2===void 0?void 0:_error$config2.url)||'';const baseURL=((_error$config3=error.config)===null||_error$config3===void 0?void 0:_error$config3.baseURL)||'';const fullUrl=requestUrl.startsWith('http')?requestUrl:baseURL+requestUrl;// If we're making a request to a different origin, it's likely CORS\nif(fullUrl.startsWith('http')){const currentOrigin=\"\".concat(window.location.protocol,\"//\").concat(window.location.host);const requestOrigin=new URL(fullUrl).origin;// Different origins = likely CORS issue\nif(currentOrigin!==requestOrigin){return true;}}// Even same origin can have CORS issues in some cases\n// If it's a network error with no response, assume CORS\nreturn true;}}// Check for specific CORS-related error messages\nconst errorMessage=((_error$message=error.message)===null||_error$message===void 0?void 0:_error$message.toLowerCase())||'';const corsKeywords=['cors','cross-origin','preflight'];if(corsKeywords.some(keyword=>errorMessage.includes(keyword))){return true;}// Not a CORS error\nreturn false;};// ==================== ERROR MESSAGE GENERATOR ====================\n/**\n * Genera mensajes de error amigables y accionables para diferentes tipos de errores\n * @param {Error} error - El objeto de error original\n * @returns {Object} Objeto con mensaje, sugerencias y tipo de error\n */export const generateErrorMessage=error=>{var _error$response3,_error$message2;const errorInfo={message:'',suggestions:[],type:'unknown',isNetworkError:false,isCorsError:false,status:((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)||0,originalError:error};// Usar la función de detección de CORS\nconst isCorsError=detectCorsError(error);// Detectar si es un error de red (sin respuesta del servidor)\nconst isNetworkError=!error.response&&(error.message==='Network Error'||error.code==='ERR_NETWORK'||error.code==='ECONNABORTED'||!error.status);if(isCorsError){// Error de CORS\nerrorInfo.type='cors';errorInfo.isCorsError=true;errorInfo.isNetworkError=true;errorInfo.message='No se puede conectar con el servidor debido a restricciones de CORS';errorInfo.suggestions=['🔧 Verifica que el servidor backend esté ejecutándose en http://localhost:8080','🔧 Asegúrate de que el backend tenga configurado CORS correctamente','🔍 Revisa la consola del navegador para ver detalles específicos del error CORS','⚙️ Si eres desarrollador, verifica la configuración de CORS en el backend (WebMvcConfigurer o SecurityFilterChain)','🔄 Intenta reiniciar tanto el frontend como el backend','📝 Verifica que el backend permita el origen: '+window.location.origin];}else if(error.code==='ECONNABORTED'||(_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes('timeout')){// Error de timeout\nerrorInfo.type='timeout';errorInfo.isNetworkError=true;errorInfo.message='La solicitud al servidor tardó demasiado tiempo (timeout después de 30 segundos)';errorInfo.suggestions=['🌐 Verifica tu conexión a internet','⏱️ El servidor puede estar experimentando alta carga o procesando una operación pesada','🔄 Intenta nuevamente en unos momentos','📊 Si trabajas con grandes volúmenes de datos, considera filtrar o paginar los resultados','🔧 Si el problema persiste, contacta al administrador del sistema'];}else if(isNetworkError){var _error$config4;// Error de red general (backend no disponible)\nerrorInfo.type='network';errorInfo.isNetworkError=true;errorInfo.message='No se puede conectar con el servidor - Backend no disponible';errorInfo.suggestions=['🚀 Verifica que el servidor backend esté ejecutándose en '+(((_error$config4=error.config)===null||_error$config4===void 0?void 0:_error$config4.baseURL)||'http://localhost:8080'),'🌐 Comprueba tu conexión a internet','🔍 Asegúrate de que la URL del servidor sea correcta','🛡️ Verifica que no haya un firewall bloqueando la conexión','🔧 Si eres desarrollador, inicia el backend con: ./mvnw spring-boot:run','📞 Si el problema persiste, contacta al administrador del sistema'];}else if(error.response){var _error$response$data;// Error HTTP con respuesta del servidor\nconst status=error.response.status;switch(status){case 400:errorInfo.type='validation';errorInfo.message='Los datos enviados no son válidos (Error 400)';errorInfo.suggestions=['📝 Verifica que todos los campos requeridos estén completos','✅ Asegúrate de que los datos tengan el formato correcto (emails, teléfonos, fechas, etc.)','🔍 Revisa los mensajes de validación específicos del servidor','📋 Verifica que no haya campos con valores inválidos o fuera de rango'];break;case 401:errorInfo.type='authentication';errorInfo.message='No estás autenticado o tu sesión ha expirado (Error 401)';errorInfo.suggestions=['🔐 Inicia sesión nuevamente','✅ Verifica que tus credenciales sean correctas','⏱️ Tu sesión puede haber expirado por inactividad','🔄 Intenta cerrar sesión y volver a iniciar sesión'];break;case 403:errorInfo.type='authorization';errorInfo.message='No tienes permisos para realizar esta acción (Error 403)';errorInfo.suggestions=['👤 Contacta al administrador para solicitar los permisos necesarios','🔑 Verifica que tu cuenta tenga el rol adecuado','⚙️ Puede que necesites permisos de ADMINISTRADOR para esta operación','📋 Revisa qué acciones están permitidas para tu rol actual'];break;case 404:errorInfo.type='notFound';errorInfo.message='El recurso solicitado no fue encontrado (Error 404)';errorInfo.suggestions=['🔍 Verifica que el recurso exista en el sistema','🗑️ Puede que el recurso haya sido eliminado recientemente','🔄 Intenta refrescar la página y volver a intentar','📋 Verifica que el ID o identificador sea correcto'];break;case 409:errorInfo.type='conflict';errorInfo.message='Ya existe un recurso con estos datos (Error 409)';errorInfo.suggestions=['🔍 Verifica que no estés duplicando información','📝 Puede que ya exista un registro con el mismo identificador único','✏️ Intenta con datos diferentes o actualiza el registro existente','🔄 Refresca la lista para ver los datos actuales'];break;case 500:case 502:case 503:case 504:errorInfo.type='serverError';errorInfo.message=\"Error interno del servidor (Error \".concat(status,\")\");errorInfo.suggestions=['🔥 El servidor está experimentando problemas técnicos','⏱️ Intenta nuevamente en unos momentos','🔧 Si el problema persiste, contacta al administrador del sistema','📝 Este error ha sido registrado automáticamente para su revisión','💾 Verifica que la base de datos esté disponible (si eres administrador)'];break;default:errorInfo.type='http';errorInfo.message=\"Error del servidor (c\\xF3digo \".concat(status,\")\");errorInfo.suggestions=['❌ Ocurrió un error inesperado en el servidor','🔄 Intenta nuevamente','📞 Si el problema persiste, contacta al soporte técnico','🔍 Código de error: '+status];}// Agregar mensaje específico del servidor si está disponible\nif((_error$response$data=error.response.data)!==null&&_error$response$data!==void 0&&_error$response$data.message){errorInfo.serverMessage=error.response.data.message;}}else{// Error desconocido\nerrorInfo.type='unknown';errorInfo.message='Ocurrió un error inesperado';errorInfo.suggestions=['🔄 Intenta refrescar la página','🌐 Verifica tu conexión a internet','💾 Limpia la caché del navegador si el problema persiste','🔧 Intenta cerrar y volver a abrir la aplicación','📞 Si el problema persiste, contacta al soporte técnico con detalles del error'];}return errorInfo;};class ApiService{// ==================== AUTENTICACIÓN ====================\nasync login(email,password){console.log('🔐 Starting login request...');console.log('📧 Email:',email);console.log('🌐 Auth API URL:',AUTH_API_BASE_URL);console.log('🔗 Full login URL:',AUTH_API_BASE_URL+'/login');const startTime=Date.now();try{console.log('📤 Sending login request...');const response=await authClient.post('/login',{email,password});const responseTime=Date.now()-startTime;console.log('✅ Login request completed in',responseTime,'ms');console.log('📊 Response status:',response.status);// FastAPI returns data directly in response.data, not nested\nconst responseData=response.data;console.log('📦 Response data:',responseData);// Check for error in FastAPI response format\nif(responseData.error){console.error('❌ Server error in response:',responseData.error);throw new Error(responseData.error.message||'Error en el servidor');}if(!responseData.data){console.error('❌ Invalid server response: no data field');throw new Error('Respuesta del servidor inválida');}const{token,user}=responseData.data;console.log('🔑 Token received:',!!token);console.log('👤 User received:',!!user);if(!token||!user){console.error('❌ Incomplete server response - missing token or user');throw new Error('Respuesta del servidor incompleta');}console.log('💾 Storing auth data in localStorage...');localStorage.setItem('authToken',token);localStorage.setItem('currentUser',JSON.stringify(user));console.log('🎉 Login successful!');return{data:{user,token},error:null};}catch(error){const responseTime=Date.now()-startTime;console.error('💥 Login failed after',responseTime,'ms');console.error('❌ Error details:',error);if(error.response){var _error$response$data2,_error$response$data3,_error$response$data4,_error$response$data5;console.error('📊 HTTP Error Response:');console.error('   Status:',error.response.status);console.error('   Status Text:',error.response.statusText);console.error('   Headers:',error.response.headers);console.error('   Data:',error.response.data);// Handle FastAPI error format\nconst serverMessage=((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.detail)||((_error$response$data3=error.response.data)===null||_error$response$data3===void 0?void 0:_error$response$data3.message)||((_error$response$data4=error.response.data)===null||_error$response$data4===void 0?void 0:(_error$response$data5=_error$response$data4.error)===null||_error$response$data5===void 0?void 0:_error$response$data5.message);throw new Error(serverMessage||'Error del servidor');}else if(error.request){var _error$config5;console.error('🌐 Network Error - No response received:');console.error('   Request config:',error.config);console.error('   Timeout was set to:',(_error$config5=error.config)===null||_error$config5===void 0?void 0:_error$config5.timeout,'ms');throw new Error('No se pudo conectar con el servidor. Verifica que el backend esté corriendo.');}else{console.error('⚠️ Unexpected error:',error.message);throw error;}}}// Cerrar sesión\nasync logout(){try{await authClient.post('/logout');// Limpiar localStorage\nlocalStorage.removeItem('authToken');localStorage.removeItem('currentUser');return{success:true,error:null};}catch(error){console.error('Error en logout:',error);// Limpiar localStorage aunque falle la petición\nlocalStorage.removeItem('authToken');localStorage.removeItem('currentUser');return{success:true,error:null};}}// Restablecer contraseña\nasync resetPassword(email){try{const response=await authClient.post('/reset-password',{email});return{data:response.data,error:null};}catch(error){console.error('Error en reset password:',error);return{data:null,error:{message:error.message||'Error al restablecer contraseña'}};}}async getCurrentUser(){try{const storedUser=localStorage.getItem('currentUser');const storedToken=localStorage.getItem('authToken');if(storedUser&&storedToken){try{const user=JSON.parse(storedUser);if(user&&user.email&&user.id){return{data:user,error:null};}else{localStorage.removeItem('currentUser');localStorage.removeItem('authToken');return{data:null,error:null};}}catch(parseError){console.error('Error parseando usuario:',parseError);localStorage.removeItem('currentUser');localStorage.removeItem('authToken');return{data:null,error:null};}}return{data:null,error:null};}catch(error){console.error('Error obteniendo usuario actual:',error);return{data:null,error};}}// Actualizar perfil de usuario\nasync updateProfile(profileData){try{const response=await authClient.put('/profile',profileData);// Actualizar usuario en localStorage\nconst currentUser=JSON.parse(localStorage.getItem('currentUser')||'{}');const updatedUser=_objectSpread(_objectSpread({},currentUser),response.data);localStorage.setItem('currentUser',JSON.stringify(updatedUser));return{data:response.data,error:null};}catch(error){console.error('Error actualizando perfil:',error);return{data:null,error:{message:error.message||'Error al actualizar perfil'}};}}// Verificar permisos del usuario\nasync hasPermission(requiredRole){try{// Consultar endpoint real en backend FastAPI\nconst response=await authClient.get('/permission',{params:{role:requiredRole}});return response.data.hasPermission||false;}catch(error){console.error('Error verificando permisos:',error);// Fallback temporal a verificación local si el endpoint no existe\ntry{const{data:user}=await this.getCurrentUser();if(!user)return false;const userRole=user.rol||user.role||ROLES.CONSULTA;// Jerarquía de roles: ADMINISTRADOR > CONSULTA\nconst roleHierarchy={[ROLES.ADMINISTRADOR]:2,[ROLES.CONSULTA]:1};const userLevel=roleHierarchy[userRole]||1;const requiredLevel=roleHierarchy[requiredRole]||1;return userLevel>=requiredLevel;}catch(fallbackError){console.error('Fallback también falló:',fallbackError);return false;}}}// ==================== UTILIDADES ====================\n/**\n   * Verifica la conexión con el backend de autenticación\n   * @returns {Promise<Object>} Objeto con información detallada de la conexión\n   */async testConnection(){const startTime=Date.now();const results={auth:null,overall:{success:false,message:'Conexión fallida'}};// Test auth service\ntry{const authResponse=await authClient.get('/health');results.auth={success:true,connected:true,responseTime:Date.now()-startTime,status:authResponse.status,baseURL:AUTH_API_BASE_URL,data:authResponse.data,message:'Conexión exitosa con auth service'};}catch(error){const errorInfo=generateErrorMessage(error);results.auth={success:false,connected:false,responseTime:Date.now()-startTime,baseURL:AUTH_API_BASE_URL,error:error.message||'Error de conexión',errorType:errorInfo.type,isCorsError:errorInfo.isCorsError,isNetworkError:errorInfo.isNetworkError,suggestions:errorInfo.suggestions,message:errorInfo.message};}// Overall result\nconst authSuccess=results.auth.success;if(authSuccess){results.overall={success:true,message:'Conexión exitosa con el servicio de autenticación'};}else{results.overall={success:false,message:'El servicio de autenticación no está disponible'};}return results;}/**\n   * Verifica si el backend de autenticación está disponible antes de operaciones críticas\n   * @param {number} timeout - Timeout en milisegundos (por defecto 5000ms)\n   * @returns {Promise<Object>} Objeto con estado del servicio\n   */async isBackendReachable(){let timeout=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5000;const results={auth:false};// Check auth service\ntry{const authCheck=axios.create({baseURL:AUTH_API_BASE_URL,timeout:timeout,headers:{'Accept':'application/json'}});await authCheck.get('/health');results.auth=true;}catch(error){console.warn('Auth service no disponible:',error.message);}return results;}// ==================== DASHBOARD ====================\n// Obtener datos del dashboard\nasync getDashboardData(){try{const response=await dashboardClient.get('/dashboard/stats');return{data:response.data,error:null};}catch(error){console.error('Error obteniendo datos del dashboard:',error);return{data:null,error:{message:error.message||'Error al obtener datos del dashboard'}};}}// ==================== USUARIOS ====================\n// Obtener lista de usuarios\nasync getUsuarios(){try{const response=await authClient.get('/usuarios');return{data:response.data,error:null};}catch(error){console.error('Error obteniendo usuarios:',error);return{data:null,error:{message:error.message||'Error al obtener usuarios'}};}}// ==================== PARTICIPANTES ====================\n// Obtener lista de participantes\nasync getParticipantes(){try{const response=await dashboardClient.get('/participantes');return{data:response.data,error:null};}catch(error){console.error('Error obteniendo participantes:',error);return{data:null,error:{message:error.message||'Error al obtener participantes'}};}}// ==================== MENSUALIDADES ====================\n// Obtener lista de mensualidades\nasync getMensualidades(){console.log('🔄 API: Solicitando mensualidades desde:',DASHBOARD_API_BASE_URL+'/mensualidades');try{var _response$data,_response$data2;const response=await dashboardClient.get('/mensualidades');console.log('✅ API: Respuesta mensualidades:',{status:response.status,dataLength:((_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.length)||'N/A',dataType:Array.isArray(response.data)?'array':typeof response.data,firstItem:((_response$data2=response.data)===null||_response$data2===void 0?void 0:_response$data2[0])||'No data'});return{data:response.data,error:null};}catch(error){var _error$response4,_error$config6,_error$config7,_error$config8,_error$config9;console.error('❌ API: Error obteniendo mensualidades:',{message:error.message,status:(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status,url:(_error$config6=error.config)===null||_error$config6===void 0?void 0:_error$config6.url,baseURL:(_error$config7=error.config)===null||_error$config7===void 0?void 0:_error$config7.baseURL,fullURL:((_error$config8=error.config)===null||_error$config8===void 0?void 0:_error$config8.baseURL)+((_error$config9=error.config)===null||_error$config9===void 0?void 0:_error$config9.url)});return{data:null,error:{message:error.message||'Error al obtener mensualidades'}};}}// ==================== SEDES ====================\n// Obtener lista de sedes\nasync getSedes(){try{const response=await dashboardClient.get('/sedes');return{data:response.data,error:null};}catch(error){console.error('Error obteniendo sedes:',error);return{data:null,error:{message:error.message||'Error al obtener sedes'}};}}// ==================== ACUDIENTES ====================\n// Obtener lista de acudientes\nasync getAcudientes(filters){try{const response=await dashboardClient.get('/acudientes',{params:filters});return{data:response.data,error:null};}catch(error){console.error('Error obteniendo acudientes:',error);return{data:null,error:{message:error.message||'Error al obtener acudientes'}};}}// Obtener configuración de la API\ngetApiConfig(){return{authBaseURL:AUTH_API_BASE_URL,dashboardBaseURL:DASHBOARD_API_BASE_URL,hasToken:!!localStorage.getItem('authToken'),environment:process.env.NODE_ENV,isConfigured:!!AUTH_API_BASE_URL&&!!DASHBOARD_API_BASE_URL};}}// Exportar instancia única del servicio\nexport const api=new ApiService();export default api;// Exportar cliente axios para uso directo si es necesario\nexport{authClient};","map":{"version":3,"names":["axios","getApiBaseUrl","defaultUrl","process","env","REACT_APP_AUTH_API_BASE_URL","REACT_APP_DASHBOARD_API_BASE_URL","currentOrigin","window","location","origin","API_BASE_DOMAIN","AUTH_API_BASE_URL","concat","DASHBOARD_API_BASE_URL","console","log","NODE_ENV","REACT_APP_API_BASE_URL","REACT_APP_FORMATOS_API_URL","hostname","protocol","authClient","create","baseURL","timeout","withCredentials","headers","dashboardClient","setupInterceptors","client","serviceName","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response2$data","errorInfo","generateErrorMessage","isCorsError","_error$config","url","isNetworkError","message","status","data","removeItem","href","enhancedError","type","suggestions","serverMessage","originalError","ROLES","CONSULTA","ADMINISTRADOR","detectCorsError","_error$message","code","hasRequestConfig","_error$config2","_error$config3","requestUrl","fullUrl","startsWith","host","requestOrigin","URL","errorMessage","toLowerCase","corsKeywords","some","keyword","includes","_error$response3","_error$message2","_error$config4","_error$response$data","ApiService","login","email","password","startTime","Date","now","post","responseTime","responseData","Error","user","setItem","JSON","stringify","_error$response$data2","_error$response$data3","_error$response$data4","_error$response$data5","statusText","detail","_error$config5","logout","success","resetPassword","getCurrentUser","storedUser","storedToken","parse","id","parseError","updateProfile","profileData","put","currentUser","updatedUser","_objectSpread","hasPermission","requiredRole","get","params","role","userRole","rol","roleHierarchy","userLevel","requiredLevel","fallbackError","testConnection","results","auth","overall","authResponse","connected","errorType","authSuccess","isBackendReachable","arguments","length","undefined","authCheck","warn","getDashboardData","getUsuarios","getParticipantes","getMensualidades","_response$data","_response$data2","dataLength","dataType","Array","isArray","firstItem","_error$response4","_error$config6","_error$config7","_error$config8","_error$config9","fullURL","getSedes","getAcudientes","filters","getApiConfig","authBaseURL","dashboardBaseURL","hasToken","environment","isConfigured","api"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/services/api.js"],"sourcesContent":["// Servicio API   \nimport axios from 'axios';\n\n// Función para determinar la URL base correcta de la API\nconst getApiBaseUrl = (defaultUrl) => {\n  // Si hay una variable de entorno configurada, úsala\n  if (process.env.REACT_APP_AUTH_API_BASE_URL || process.env.REACT_APP_DASHBOARD_API_BASE_URL) {\n    return defaultUrl;\n  }\n\n  // Detectar automáticamente el dominio actual\n  const currentOrigin = window.location.origin; // ej: https://www.todoporunalma.org o https://todoporunalma.org\n\n  // Si estamos en www, usar la URL sin www para la API (hasta que el backend soporte www)\n  if (currentOrigin === 'https://www.todoporunalma.org') {\n    return 'https://todoporunalma.org';\n  }\n\n  // Para desarrollo local o dominio principal, usar el origen actual\n  return currentOrigin;\n};\n\n// Configuración base de las APIs\nconst API_BASE_DOMAIN = getApiBaseUrl('https://todoporunalma.org');\n\nconst AUTH_API_BASE_URL = process.env.REACT_APP_AUTH_API_BASE_URL ||\n  `${API_BASE_DOMAIN}/api/auth`;\n\nconst DASHBOARD_API_BASE_URL = process.env.REACT_APP_DASHBOARD_API_BASE_URL ||\n  `${API_BASE_DOMAIN}/api/dashboard`;\n\nconsole.log('🔧 PRODUCTION DEBUG - Environment variables:');\nconsole.log('  - NODE_ENV:', process.env.NODE_ENV);\nconsole.log('  - REACT_APP_AUTH_API_BASE_URL:', process.env.REACT_APP_AUTH_API_BASE_URL);\nconsole.log('  - REACT_APP_DASHBOARD_API_BASE_URL:', process.env.REACT_APP_DASHBOARD_API_BASE_URL);\nconsole.log('  - API_BASE_DOMAIN:', API_BASE_DOMAIN);\nconsole.log('  - AUTH_API_BASE_URL:', AUTH_API_BASE_URL);\nconsole.log('  - DASHBOARD_API_BASE_URL:', DASHBOARD_API_BASE_URL);\n\n// 🔍 DEBUG: Forzar URLs de producción correctas si estamos en producción\nif (process.env.NODE_ENV === 'production') {\n  console.log('🏭 PRODUCTION MODE DETECTED - Forzando URLs correctas');\n  // Las URLs ya están configuradas correctamente en .env.production\n  // pero vamos a verificar que se estén usando\n}\n\nconsole.log('🔧 AUTH_API_BASE_URL configurada como:', AUTH_API_BASE_URL);\nconsole.log('🔧 DASHBOARD_API_BASE_URL configurada como:', DASHBOARD_API_BASE_URL);\nconsole.log('🔧 Full login URL will be:', AUTH_API_BASE_URL + '/login');\n\n// Additional diagnostic logging\nconsole.log('🔧 API CONFIGURATION DIAGNOSTICS:');\nconsole.log('  - REACT_APP_AUTH_API_BASE_URL:', process.env.REACT_APP_AUTH_API_BASE_URL);\nconsole.log('  - REACT_APP_API_BASE_URL:', process.env.REACT_APP_API_BASE_URL);\nconsole.log('  - REACT_APP_FORMATOS_API_URL:', process.env.REACT_APP_FORMATOS_API_URL);\nconsole.log('  - NODE_ENV:', process.env.NODE_ENV);\nconsole.log('  - Current hostname:', window.location.hostname);\nconsole.log('  - Current protocol:', window.location.protocol);\n\n// Crear instancia de axios para autenticación\nconst authClient = axios.create({\n  baseURL: AUTH_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Crear instancia de axios para dashboard\nconst dashboardClient = axios.create({\n  baseURL: DASHBOARD_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Función helper para configurar interceptors\nconst setupInterceptors = (client, serviceName) => {\n  // Interceptor para agregar token de autenticación\n  client.interceptors.request.use(\n    (config) => {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    },\n    (error) => {\n      console.error(`Error en ${serviceName} request interceptor:`, error);\n      return Promise.reject(error);\n    }\n  );\n\n  // Interceptor para manejar respuestas y errores\n  client.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      const errorInfo = generateErrorMessage(error);\n\n      // Solo log crítico de errores\n      if (errorInfo.isCorsError) {\n        console.error(`CORS ERROR (${serviceName}):`, error.config?.url);\n      } else if (errorInfo.isNetworkError) {\n        console.error(`Network error (${serviceName}):`, error.message);\n      } else if (error.response) {\n        console.error(`HTTP ${error.response.status} (${serviceName}):`, error.response.data);\n      }\n\n      // Manejar errores de autenticación\n      if (error.response?.status === 401 && !errorInfo.isNetworkError) {\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('currentUser');\n        window.location.href = '/login';\n      }\n\n      const enhancedError = {\n        message: errorInfo.message,\n        type: errorInfo.type,\n        status: errorInfo.status,\n        isCorsError: errorInfo.isCorsError,\n        isNetworkError: errorInfo.isNetworkError,\n        suggestions: errorInfo.suggestions,\n        serverMessage: error.response?.data?.message || null,\n        originalError: error,\n        response: error.response\n      };\n\n      return Promise.reject(enhancedError);\n    }\n  );\n};\n\n// Configurar interceptors para los clientes\nsetupInterceptors(authClient, 'AUTH');\nsetupInterceptors(dashboardClient, 'DASHBOARD');\n\n// Definición de roles del sistema\nexport const ROLES = {\n  CONSULTA: 'CONSULTA',\n  ADMINISTRADOR: 'ADMINISTRADOR'\n};\n\n// ==================== CORS ERROR DETECTION ====================\n\n/**\n * Detecta si un error de axios es causado por CORS\n * @param {Error} error - El objeto de error de axios\n * @returns {boolean} true si es un error de CORS, false en caso contrario\n */\nexport const detectCorsError = (error) => {\n  // CORS errors typically have these characteristics:\n  // 1. No response object (preflight or actual request blocked)\n  // 2. Network Error message\n  // 3. Error code ERR_NETWORK\n  // 4. Request was made but no response received\n\n  // Check if there's no response (most common CORS indicator)\n  if (!error.response) {\n    // Check for network error patterns\n    const isNetworkError = error.message === 'Network Error' ||\n      error.code === 'ERR_NETWORK';\n\n    // Check if request was configured (means axios tried to send it)\n    const hasRequestConfig = !!error.config;\n\n    // CORS errors occur when:\n    // - There's a network error\n    // - Request was configured and attempted\n    // - No response was received (blocked by browser)\n    if (isNetworkError && hasRequestConfig) {\n      // Additional check: if the URL is cross-origin\n      const requestUrl = error.config?.url || '';\n      const baseURL = error.config?.baseURL || '';\n      const fullUrl = requestUrl.startsWith('http') ? requestUrl : baseURL + requestUrl;\n\n      // If we're making a request to a different origin, it's likely CORS\n      if (fullUrl.startsWith('http')) {\n        const currentOrigin = `${window.location.protocol}//${window.location.host}`;\n        const requestOrigin = new URL(fullUrl).origin;\n\n        // Different origins = likely CORS issue\n        if (currentOrigin !== requestOrigin) {\n          return true;\n        }\n      }\n\n      // Even same origin can have CORS issues in some cases\n      // If it's a network error with no response, assume CORS\n      return true;\n    }\n  }\n\n  // Check for specific CORS-related error messages\n  const errorMessage = error.message?.toLowerCase() || '';\n  const corsKeywords = ['cors', 'cross-origin', 'preflight'];\n\n  if (corsKeywords.some(keyword => errorMessage.includes(keyword))) {\n    return true;\n  }\n\n  // Not a CORS error\n  return false;\n};\n\n// ==================== ERROR MESSAGE GENERATOR ====================\n\n/**\n * Genera mensajes de error amigables y accionables para diferentes tipos de errores\n * @param {Error} error - El objeto de error original\n * @returns {Object} Objeto con mensaje, sugerencias y tipo de error\n */\nexport const generateErrorMessage = (error) => {\n  const errorInfo = {\n    message: '',\n    suggestions: [],\n    type: 'unknown',\n    isNetworkError: false,\n    isCorsError: false,\n    status: error.response?.status || 0,\n    originalError: error\n  };\n\n  // Usar la función de detección de CORS\n  const isCorsError = detectCorsError(error);\n\n  // Detectar si es un error de red (sin respuesta del servidor)\n  const isNetworkError = !error.response && (\n    error.message === 'Network Error' ||\n    error.code === 'ERR_NETWORK' ||\n    error.code === 'ECONNABORTED' ||\n    !error.status\n  );\n\n  if (isCorsError) {\n    // Error de CORS\n    errorInfo.type = 'cors';\n    errorInfo.isCorsError = true;\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'No se puede conectar con el servidor debido a restricciones de CORS';\n    errorInfo.suggestions = [\n      '🔧 Verifica que el servidor backend esté ejecutándose en http://localhost:8080',\n      '🔧 Asegúrate de que el backend tenga configurado CORS correctamente',\n      '🔍 Revisa la consola del navegador para ver detalles específicos del error CORS',\n      '⚙️ Si eres desarrollador, verifica la configuración de CORS en el backend (WebMvcConfigurer o SecurityFilterChain)',\n      '🔄 Intenta reiniciar tanto el frontend como el backend',\n      '📝 Verifica que el backend permita el origen: ' + window.location.origin\n    ];\n  } else if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\n    // Error de timeout\n    errorInfo.type = 'timeout';\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'La solicitud al servidor tardó demasiado tiempo (timeout después de 30 segundos)';\n    errorInfo.suggestions = [\n      '🌐 Verifica tu conexión a internet',\n      '⏱️ El servidor puede estar experimentando alta carga o procesando una operación pesada',\n      '🔄 Intenta nuevamente en unos momentos',\n      '📊 Si trabajas con grandes volúmenes de datos, considera filtrar o paginar los resultados',\n      '🔧 Si el problema persiste, contacta al administrador del sistema'\n    ];\n  } else if (isNetworkError) {\n    // Error de red general (backend no disponible)\n    errorInfo.type = 'network';\n    errorInfo.isNetworkError = true;\n    errorInfo.message = 'No se puede conectar con el servidor - Backend no disponible';\n    errorInfo.suggestions = [\n      '🚀 Verifica que el servidor backend esté ejecutándose en ' + (error.config?.baseURL || 'http://localhost:8080'),\n      '🌐 Comprueba tu conexión a internet',\n      '🔍 Asegúrate de que la URL del servidor sea correcta',\n      '🛡️ Verifica que no haya un firewall bloqueando la conexión',\n      '🔧 Si eres desarrollador, inicia el backend con: ./mvnw spring-boot:run',\n      '📞 Si el problema persiste, contacta al administrador del sistema'\n    ];\n  } else if (error.response) {\n    // Error HTTP con respuesta del servidor\n    const status = error.response.status;\n\n    switch (status) {\n      case 400:\n        errorInfo.type = 'validation';\n        errorInfo.message = 'Los datos enviados no son válidos (Error 400)';\n        errorInfo.suggestions = [\n          '📝 Verifica que todos los campos requeridos estén completos',\n          '✅ Asegúrate de que los datos tengan el formato correcto (emails, teléfonos, fechas, etc.)',\n          '🔍 Revisa los mensajes de validación específicos del servidor',\n          '📋 Verifica que no haya campos con valores inválidos o fuera de rango'\n        ];\n        break;\n\n      case 401:\n        errorInfo.type = 'authentication';\n        errorInfo.message = 'No estás autenticado o tu sesión ha expirado (Error 401)';\n        errorInfo.suggestions = [\n          '🔐 Inicia sesión nuevamente',\n          '✅ Verifica que tus credenciales sean correctas',\n          '⏱️ Tu sesión puede haber expirado por inactividad',\n          '🔄 Intenta cerrar sesión y volver a iniciar sesión'\n        ];\n        break;\n\n      case 403:\n        errorInfo.type = 'authorization';\n        errorInfo.message = 'No tienes permisos para realizar esta acción (Error 403)';\n        errorInfo.suggestions = [\n          '👤 Contacta al administrador para solicitar los permisos necesarios',\n          '🔑 Verifica que tu cuenta tenga el rol adecuado',\n          '⚙️ Puede que necesites permisos de ADMINISTRADOR para esta operación',\n          '📋 Revisa qué acciones están permitidas para tu rol actual'\n        ];\n        break;\n\n      case 404:\n        errorInfo.type = 'notFound';\n        errorInfo.message = 'El recurso solicitado no fue encontrado (Error 404)';\n        errorInfo.suggestions = [\n          '🔍 Verifica que el recurso exista en el sistema',\n          '🗑️ Puede que el recurso haya sido eliminado recientemente',\n          '🔄 Intenta refrescar la página y volver a intentar',\n          '📋 Verifica que el ID o identificador sea correcto'\n        ];\n        break;\n\n      case 409:\n        errorInfo.type = 'conflict';\n        errorInfo.message = 'Ya existe un recurso con estos datos (Error 409)';\n        errorInfo.suggestions = [\n          '🔍 Verifica que no estés duplicando información',\n          '📝 Puede que ya exista un registro con el mismo identificador único',\n          '✏️ Intenta con datos diferentes o actualiza el registro existente',\n          '🔄 Refresca la lista para ver los datos actuales'\n        ];\n        break;\n\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        errorInfo.type = 'serverError';\n        errorInfo.message = `Error interno del servidor (Error ${status})`;\n        errorInfo.suggestions = [\n          '🔥 El servidor está experimentando problemas técnicos',\n          '⏱️ Intenta nuevamente en unos momentos',\n          '🔧 Si el problema persiste, contacta al administrador del sistema',\n          '📝 Este error ha sido registrado automáticamente para su revisión',\n          '💾 Verifica que la base de datos esté disponible (si eres administrador)'\n        ];\n        break;\n\n      default:\n        errorInfo.type = 'http';\n        errorInfo.message = `Error del servidor (código ${status})`;\n        errorInfo.suggestions = [\n          '❌ Ocurrió un error inesperado en el servidor',\n          '🔄 Intenta nuevamente',\n          '📞 Si el problema persiste, contacta al soporte técnico',\n          '🔍 Código de error: ' + status\n        ];\n    }\n\n    // Agregar mensaje específico del servidor si está disponible\n    if (error.response.data?.message) {\n      errorInfo.serverMessage = error.response.data.message;\n    }\n  } else {\n    // Error desconocido\n    errorInfo.type = 'unknown';\n    errorInfo.message = 'Ocurrió un error inesperado';\n    errorInfo.suggestions = [\n      '🔄 Intenta refrescar la página',\n      '🌐 Verifica tu conexión a internet',\n      '💾 Limpia la caché del navegador si el problema persiste',\n      '🔧 Intenta cerrar y volver a abrir la aplicación',\n      '📞 Si el problema persiste, contacta al soporte técnico con detalles del error'\n    ];\n  }\n\n  return errorInfo;\n};\n\nclass ApiService {\n  // ==================== AUTENTICACIÓN ====================\n\n  async login(email, password) {\n    console.log('🔐 Starting login request...');\n    console.log('📧 Email:', email);\n    console.log('🌐 Auth API URL:', AUTH_API_BASE_URL);\n    console.log('🔗 Full login URL:', AUTH_API_BASE_URL + '/login');\n\n    const startTime = Date.now();\n\n    try {\n      console.log('📤 Sending login request...');\n      const response = await authClient.post('/login', { email, password });\n      const responseTime = Date.now() - startTime;\n      console.log('✅ Login request completed in', responseTime, 'ms');\n      console.log('📊 Response status:', response.status);\n\n      // FastAPI returns data directly in response.data, not nested\n      const responseData = response.data;\n      console.log('📦 Response data:', responseData);\n\n      // Check for error in FastAPI response format\n      if (responseData.error) {\n        console.error('❌ Server error in response:', responseData.error);\n        throw new Error(responseData.error.message || 'Error en el servidor');\n      }\n\n      if (!responseData.data) {\n        console.error('❌ Invalid server response: no data field');\n        throw new Error('Respuesta del servidor inválida');\n      }\n\n      const { token, user } = responseData.data;\n      console.log('🔑 Token received:', !!token);\n      console.log('👤 User received:', !!user);\n\n      if (!token || !user) {\n        console.error('❌ Incomplete server response - missing token or user');\n        throw new Error('Respuesta del servidor incompleta');\n      }\n\n      console.log('💾 Storing auth data in localStorage...');\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n\n      console.log('🎉 Login successful!');\n      return { data: { user, token }, error: null };\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      console.error('💥 Login failed after', responseTime, 'ms');\n      console.error('❌ Error details:', error);\n\n      if (error.response) {\n        console.error('📊 HTTP Error Response:');\n        console.error('   Status:', error.response.status);\n        console.error('   Status Text:', error.response.statusText);\n        console.error('   Headers:', error.response.headers);\n        console.error('   Data:', error.response.data);\n\n        // Handle FastAPI error format\n        const serverMessage = error.response.data?.detail ||\n                            error.response.data?.message ||\n                            error.response.data?.error?.message;\n        throw new Error(serverMessage || 'Error del servidor');\n      } else if (error.request) {\n        console.error('🌐 Network Error - No response received:');\n        console.error('   Request config:', error.config);\n        console.error('   Timeout was set to:', error.config?.timeout, 'ms');\n        throw new Error('No se pudo conectar con el servidor. Verifica que el backend esté corriendo.');\n      } else {\n        console.error('⚠️ Unexpected error:', error.message);\n        throw error;\n      }\n    }\n  }\n\n  // Cerrar sesión\n  async logout() {\n    try {\n      await authClient.post('/logout');\n\n      // Limpiar localStorage\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n\n      return { success: true, error: null };\n    } catch (error) {\n      console.error('Error en logout:', error);\n      // Limpiar localStorage aunque falle la petición\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('currentUser');\n      return { success: true, error: null };\n    }\n  }\n\n\n  // Restablecer contraseña\n  async resetPassword(email) {\n    try {\n      const response = await authClient.post('/reset-password', { email });\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error en reset password:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al restablecer contraseña'\n        }\n      };\n    }\n  }\n\n  async getCurrentUser() {\n    try {\n      const storedUser = localStorage.getItem('currentUser');\n      const storedToken = localStorage.getItem('authToken');\n\n      if (storedUser && storedToken) {\n        try {\n          const user = JSON.parse(storedUser);\n\n          if (user && user.email && user.id) {\n            return { data: user, error: null };\n          } else {\n            localStorage.removeItem('currentUser');\n            localStorage.removeItem('authToken');\n            return { data: null, error: null };\n          }\n        } catch (parseError) {\n          console.error('Error parseando usuario:', parseError);\n          localStorage.removeItem('currentUser');\n          localStorage.removeItem('authToken');\n          return { data: null, error: null };\n        }\n      }\n\n      return { data: null, error: null };\n    } catch (error) {\n      console.error('Error obteniendo usuario actual:', error);\n      return { data: null, error };\n    }\n  }\n\n  // Actualizar perfil de usuario\n  async updateProfile(profileData) {\n    try {\n      const response = await authClient.put('/profile', profileData);\n\n      // Actualizar usuario en localStorage\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n      const updatedUser = { ...currentUser, ...response.data };\n      localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error actualizando perfil:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al actualizar perfil'\n        }\n      };\n    }\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    try {\n      // Consultar endpoint real en backend FastAPI\n      const response = await authClient.get('/permission', {\n        params: { role: requiredRole }\n      });\n\n      return response.data.hasPermission || false;\n    } catch (error) {\n      console.error('Error verificando permisos:', error);\n      // Fallback temporal a verificación local si el endpoint no existe\n      try {\n        const { data: user } = await this.getCurrentUser();\n\n        if (!user) return false;\n\n        const userRole = user.rol || user.role || ROLES.CONSULTA;\n\n        // Jerarquía de roles: ADMINISTRADOR > CONSULTA\n        const roleHierarchy = {\n          [ROLES.ADMINISTRADOR]: 2,\n          [ROLES.CONSULTA]: 1\n        };\n\n        const userLevel = roleHierarchy[userRole] || 1;\n        const requiredLevel = roleHierarchy[requiredRole] || 1;\n\n        return userLevel >= requiredLevel;\n      } catch (fallbackError) {\n        console.error('Fallback también falló:', fallbackError);\n        return false;\n      }\n    }\n  }\n\n\n  // ==================== UTILIDADES ====================\n  \n  /**\n   * Verifica la conexión con el backend de autenticación\n   * @returns {Promise<Object>} Objeto con información detallada de la conexión\n   */\n  async testConnection() {\n    const startTime = Date.now();\n    const results = {\n      auth: null,\n      overall: { success: false, message: 'Conexión fallida' }\n    };\n  \n    // Test auth service\n    try {\n      const authResponse = await authClient.get('/health');\n      results.auth = {\n        success: true,\n        connected: true,\n        responseTime: Date.now() - startTime,\n        status: authResponse.status,\n        baseURL: AUTH_API_BASE_URL,\n        data: authResponse.data,\n        message: 'Conexión exitosa con auth service'\n      };\n    } catch (error) {\n      const errorInfo = generateErrorMessage(error);\n      results.auth = {\n        success: false,\n        connected: false,\n        responseTime: Date.now() - startTime,\n        baseURL: AUTH_API_BASE_URL,\n        error: error.message || 'Error de conexión',\n        errorType: errorInfo.type,\n        isCorsError: errorInfo.isCorsError,\n        isNetworkError: errorInfo.isNetworkError,\n        suggestions: errorInfo.suggestions,\n        message: errorInfo.message\n      };\n    }\n  \n    // Overall result\n    const authSuccess = results.auth.success;\n  \n    if (authSuccess) {\n      results.overall = {\n        success: true,\n        message: 'Conexión exitosa con el servicio de autenticación'\n      };\n    } else {\n      results.overall = {\n        success: false,\n        message: 'El servicio de autenticación no está disponible'\n      };\n    }\n  \n    return results;\n  }\n  \n  /**\n   * Verifica si el backend de autenticación está disponible antes de operaciones críticas\n   * @param {number} timeout - Timeout en milisegundos (por defecto 5000ms)\n   * @returns {Promise<Object>} Objeto con estado del servicio\n   */\n  async isBackendReachable(timeout = 5000) {\n    const results = { auth: false };\n  \n    // Check auth service\n    try {\n      const authCheck = axios.create({\n        baseURL: AUTH_API_BASE_URL,\n        timeout: timeout,\n        headers: { 'Accept': 'application/json' }\n      });\n      await authCheck.get('/health');\n      results.auth = true;\n    } catch (error) {\n      console.warn('Auth service no disponible:', error.message);\n    }\n  \n    return results;\n  }\n  \n  // ==================== DASHBOARD ====================\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    try {\n      const response = await dashboardClient.get('/dashboard/stats');\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo datos del dashboard:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener datos del dashboard'\n        }\n      };\n    }\n  }\n\n  // ==================== USUARIOS ====================\n\n  // Obtener lista de usuarios\n  async getUsuarios() {\n    try {\n      const response = await authClient.get('/usuarios');\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo usuarios:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener usuarios'\n        }\n      };\n    }\n  }\n\n  // ==================== PARTICIPANTES ====================\n\n  // Obtener lista de participantes\n  async getParticipantes() {\n    try {\n      const response = await dashboardClient.get('/participantes');\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo participantes:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener participantes'\n        }\n      };\n    }\n  }\n\n  // ==================== MENSUALIDADES ====================\n\n  // Obtener lista de mensualidades\n  async getMensualidades() {\n    console.log('🔄 API: Solicitando mensualidades desde:', DASHBOARD_API_BASE_URL + '/mensualidades');\n    try {\n      const response = await dashboardClient.get('/mensualidades');\n      console.log('✅ API: Respuesta mensualidades:', {\n        status: response.status,\n        dataLength: response.data?.length || 'N/A',\n        dataType: Array.isArray(response.data) ? 'array' : typeof response.data,\n        firstItem: response.data?.[0] || 'No data'\n      });\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('❌ API: Error obteniendo mensualidades:', {\n        message: error.message,\n        status: error.response?.status,\n        url: error.config?.url,\n        baseURL: error.config?.baseURL,\n        fullURL: error.config?.baseURL + error.config?.url\n      });\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener mensualidades'\n        }\n      };\n    }\n  }\n\n  // ==================== SEDES ====================\n\n  // Obtener lista de sedes\n  async getSedes() {\n    try {\n      const response = await dashboardClient.get('/sedes');\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo sedes:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener sedes'\n        }\n      };\n    }\n  }\n\n  // ==================== ACUDIENTES ====================\n\n  // Obtener lista de acudientes\n  async getAcudientes(filters) {\n    try {\n      const response = await dashboardClient.get('/acudientes', {\n        params: filters\n      });\n      return { data: response.data, error: null };\n    } catch (error) {\n      console.error('Error obteniendo acudientes:', error);\n      return {\n        data: null,\n        error: {\n          message: error.message || 'Error al obtener acudientes'\n        }\n      };\n    }\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return {\n      authBaseURL: AUTH_API_BASE_URL,\n      dashboardBaseURL: DASHBOARD_API_BASE_URL,\n      hasToken: !!localStorage.getItem('authToken'),\n      environment: process.env.NODE_ENV,\n      isConfigured: !!AUTH_API_BASE_URL && !!DASHBOARD_API_BASE_URL\n    };\n  }\n}\n\n// Exportar instancia única del servicio\nexport const api = new ApiService();\nexport default api;\n\n// Exportar cliente axios para uso directo si es necesario\nexport { authClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}