{"ast":null,"code":"import _objectSpread from\"/Users/todoporunalma/Desktop/corporacion_react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import FormModal from'../../UI/Modal/FormModal';import FormInput from'../../UI/Form/FormInput';import FormSelect from'../../UI/Form/FormSelect';import FormTextarea from'../../UI/Form/FormTextarea';import FormGroup from'../../UI/Form/FormGroup';/**\n * CreateFormModal component - Composite modal for creating new entities\n * Combines FormModal with common create patterns including form state management\n *\n * @param {Object} props\n * @param {boolean} props.isOpen - Modal open state\n * @param {Function} props.onClose - Close handler\n * @param {string} props.title - Modal title\n * @param {Object} props.defaultValues - Default form values\n * @param {Function} props.onSubmit - Submit handler (receives form data)\n * @param {React.ReactNode} props.children - Form fields (receives formData and handleChange)\n * @param {Array} props.fields - Field configuration array (alternative to children)\n * @param {Object} props.initialData - Initial form data (alternative to defaultValues)\n * @param {string} props.submitLabel - Submit button label\n * @param {'sm'|'md'|'lg'|'xl'} props.size - Modal size\n * @param {Function} props.validate - Optional validation function\n * @param {boolean} props.resetOnSuccess - Reset form after successful submission\n * @param {string} props.className - Additional CSS classes\n */import{jsx as _jsx}from\"react/jsx-runtime\";const CreateFormModal=_ref=>{let{isOpen,onClose,title,defaultValues={},onSubmit,children,fields,initialData,submitLabel='Crear',size='lg',validate,resetOnSuccess=true,className=''}=_ref;// Use initialData if provided, otherwise use defaultValues\nconst initialFormData=initialData||defaultValues;const[formData,setFormData]=useState(initialFormData);const[errors,setErrors]=useState({});const[loading,setLoading]=useState(false);const[submitError,setSubmitError]=useState('');// Reset form when modal opens\nuseEffect(()=>{if(isOpen){setFormData(initialFormData);setErrors({});setSubmitError('');}},[isOpen,initialFormData]);const handleChange=(name,value)=>{setFormData(prev=>_objectSpread(_objectSpread({},prev),{},{[name]:value}));// Clear field error when user starts typing\nif(errors[name]){setErrors(prev=>_objectSpread(_objectSpread({},prev),{},{[name]:''}));}};const handleSubmit=async e=>{e.preventDefault();setSubmitError('');// Run validation if provided\nif(validate){const validationErrors=validate(formData);if(Object.keys(validationErrors).length>0){setErrors(validationErrors);return;}}setLoading(true);try{await onSubmit(formData);if(resetOnSuccess){setFormData(defaultValues);setErrors({});}if(typeof onClose==='function'){onClose();}else{console.error('onClose is not a function in CreateFormModal handleSubmit');}}catch(error){setSubmitError(error.message||'Error al crear el registro');}finally{setLoading(false);}};const handleClose=()=>{if(!loading){setFormData(initialFormData);setErrors({});setSubmitError('');if(typeof onClose==='function'){onClose();}else{console.error('onClose is not a function in CreateFormModal');}}};// Function to render form fields from configuration\nconst renderFields=()=>{if(!fields||!Array.isArray(fields))return null;return/*#__PURE__*/_jsx(FormGroup,{columns:2,children:fields.map((field,index)=>{const fieldProps=_objectSpread({key:field.name||index,name:field.name,label:field.label,value:formData[field.name]||'',onChange:value=>handleChange(field.name,value),error:errors[field.name],required:field.required,placeholder:field.placeholder,disabled:field.disabled},field);switch(field.type){case'select':return/*#__PURE__*/_jsx(FormSelect,_objectSpread(_objectSpread({},fieldProps),{},{options:field.options||[]}));case'textarea':return/*#__PURE__*/_jsx(FormTextarea,_objectSpread({},fieldProps));case'text':case'email':case'password':case'number':case'tel':case'date':default:return/*#__PURE__*/_jsx(FormInput,_objectSpread(_objectSpread({},fieldProps),{},{type:field.type||'text'}));}})});};return/*#__PURE__*/_jsx(FormModal,{isOpen:isOpen,onClose:handleClose,title:title,onSubmit:handleSubmit,loading:loading,error:submitError,submitLabel:submitLabel,size:size,className:className,children:fields?renderFields():typeof children==='function'?children({formData,handleChange,errors}):React.Children.map(children,child=>/*#__PURE__*/React.isValidElement(child)?/*#__PURE__*/React.cloneElement(child,{formData,handleChange,errors}):child)});};export default CreateFormModal;","map":{"version":3,"names":["React","useState","useEffect","FormModal","FormInput","FormSelect","FormTextarea","FormGroup","jsx","_jsx","CreateFormModal","_ref","isOpen","onClose","title","defaultValues","onSubmit","children","fields","initialData","submitLabel","size","validate","resetOnSuccess","className","initialFormData","formData","setFormData","errors","setErrors","loading","setLoading","submitError","setSubmitError","handleChange","name","value","prev","_objectSpread","handleSubmit","e","preventDefault","validationErrors","Object","keys","length","console","error","message","handleClose","renderFields","Array","isArray","columns","map","field","index","fieldProps","key","label","onChange","required","placeholder","disabled","type","options","Children","child","isValidElement","cloneElement"],"sources":["/Users/todoporunalma/Desktop/corporacion_react/src/components/common/CRUDModals/CreateFormModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport FormModal from '../../UI/Modal/FormModal';\nimport FormInput from '../../UI/Form/FormInput';\nimport FormSelect from '../../UI/Form/FormSelect';\nimport FormTextarea from '../../UI/Form/FormTextarea';\nimport FormGroup from '../../UI/Form/FormGroup';\n\n/**\n * CreateFormModal component - Composite modal for creating new entities\n * Combines FormModal with common create patterns including form state management\n *\n * @param {Object} props\n * @param {boolean} props.isOpen - Modal open state\n * @param {Function} props.onClose - Close handler\n * @param {string} props.title - Modal title\n * @param {Object} props.defaultValues - Default form values\n * @param {Function} props.onSubmit - Submit handler (receives form data)\n * @param {React.ReactNode} props.children - Form fields (receives formData and handleChange)\n * @param {Array} props.fields - Field configuration array (alternative to children)\n * @param {Object} props.initialData - Initial form data (alternative to defaultValues)\n * @param {string} props.submitLabel - Submit button label\n * @param {'sm'|'md'|'lg'|'xl'} props.size - Modal size\n * @param {Function} props.validate - Optional validation function\n * @param {boolean} props.resetOnSuccess - Reset form after successful submission\n * @param {string} props.className - Additional CSS classes\n */\nconst CreateFormModal = ({\n  isOpen,\n  onClose,\n  title,\n  defaultValues = {},\n  onSubmit,\n  children,\n  fields,\n  initialData,\n  submitLabel = 'Crear',\n  size = 'lg',\n  validate,\n  resetOnSuccess = true,\n  className = ''\n}) => {\n  // Use initialData if provided, otherwise use defaultValues\n  const initialFormData = initialData || defaultValues;\n\n  const [formData, setFormData] = useState(initialFormData);\n  const [errors, setErrors] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [submitError, setSubmitError] = useState('');\n\n  // Reset form when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setFormData(initialFormData);\n      setErrors({});\n      setSubmitError('');\n    }\n  }, [isOpen, initialFormData]);\n\n  const handleChange = (name, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    // Clear field error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSubmitError('');\n\n    // Run validation if provided\n    if (validate) {\n      const validationErrors = validate(formData);\n      if (Object.keys(validationErrors).length > 0) {\n        setErrors(validationErrors);\n        return;\n      }\n    }\n\n    setLoading(true);\n    try {\n      await onSubmit(formData);\n\n      if (resetOnSuccess) {\n        setFormData(defaultValues);\n        setErrors({});\n      }\n\n      if (typeof onClose === 'function') {\n        onClose();\n      } else {\n        console.error('onClose is not a function in CreateFormModal handleSubmit');\n      }\n    } catch (error) {\n      setSubmitError(error.message || 'Error al crear el registro');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (!loading) {\n      setFormData(initialFormData);\n      setErrors({});\n      setSubmitError('');\n      if (typeof onClose === 'function') {\n        onClose();\n      } else {\n        console.error('onClose is not a function in CreateFormModal');\n      }\n    }\n  };\n\n  // Function to render form fields from configuration\n  const renderFields = () => {\n    if (!fields || !Array.isArray(fields)) return null;\n\n    return (\n      <FormGroup columns={2}>\n        {fields.map((field, index) => {\n          const fieldProps = {\n            key: field.name || index,\n            name: field.name,\n            label: field.label,\n            value: formData[field.name] || '',\n            onChange: (value) => handleChange(field.name, value),\n            error: errors[field.name],\n            required: field.required,\n            placeholder: field.placeholder,\n            disabled: field.disabled,\n            ...field\n          };\n\n          switch (field.type) {\n            case 'select':\n              return (\n                <FormSelect\n                  {...fieldProps}\n                  options={field.options || []}\n                />\n              );\n            case 'textarea':\n              return (\n                <FormTextarea\n                  {...fieldProps}\n                />\n              );\n            case 'text':\n            case 'email':\n            case 'password':\n            case 'number':\n            case 'tel':\n            case 'date':\n            default:\n              return (\n                <FormInput\n                  {...fieldProps}\n                  type={field.type || 'text'}\n                />\n              );\n          }\n        })}\n      </FormGroup>\n    );\n  };\n\n  return (\n    <FormModal\n      isOpen={isOpen}\n      onClose={handleClose}\n      title={title}\n      onSubmit={handleSubmit}\n      loading={loading}\n      error={submitError}\n      submitLabel={submitLabel}\n      size={size}\n      className={className}\n    >\n      {fields ? renderFields() : (\n        typeof children === 'function'\n          ? children({ formData, handleChange, errors })\n          : React.Children.map(children, child =>\n              React.isValidElement(child)\n                ? React.cloneElement(child, { formData, handleChange, errors })\n                : child\n            )\n      )}\n    </FormModal>\n  );\n};\n\nCreateFormModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  defaultValues: PropTypes.object,\n  onSubmit: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.node\n  ]),\n  fields: PropTypes.array,\n  initialData: PropTypes.object,\n  submitLabel: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),\n  validate: PropTypes.func,\n  resetOnSuccess: PropTypes.bool,\n  className: PropTypes.string\n};\n\nexport default CreateFormModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}