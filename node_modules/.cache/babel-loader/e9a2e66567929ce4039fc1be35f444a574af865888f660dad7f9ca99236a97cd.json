{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useMemo, useEffect, useRef } from 'react';\nimport { formatosApi } from 'shared/services/formatosApi';\nimport { dbService, ROLES } from 'shared/services';\nimport { useDebouncedSearch } from 'shared/hooks';\nconst useFileManager = () => {\n  _s();\n  // Basic state\n  const [currentPath, setCurrentPath] = useState('');\n  const [files, setFiles] = useState([]);\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n\n  // Ref to prevent double loading in strict mode\n  const hasLoadedRef = useRef(false);\n\n  // Additional state for enhanced functionality\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebouncedSearch(searchTerm, 300);\n  const [newFolderName, setNewFolderName] = useState('');\n  const [renamingFolder, setRenamingFolder] = useState(null); // {folderName, newName}\n\n  // Simple notification helper\n  const addNotification = useCallback((message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, {\n      id,\n      message,\n      type\n    }]);\n    setTimeout(() => setNotifications(prev => prev.filter(n => n.id !== id)), 5000);\n  }, []);\n\n  // Load files and folders\n  const loadFiles = useCallback(async (path = '') => {\n    setLoading(true);\n    try {\n      const result = await formatosApi.listFiles(path);\n      const {\n        files: loadedFiles,\n        folders: loadedFolders\n      } = result;\n      setFiles(loadedFiles || []);\n      setFolders(loadedFolders || []);\n      setCurrentPath(path);\n    } catch (error) {\n      addNotification(`Error loading files: ${error.message}`, 'error');\n      setFiles([]);\n      setFolders([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [addNotification]);\n\n  // Check admin permission on mount\n  const checkAdmin = useCallback(async () => {\n    try {\n      const admin = await dbService.hasPermission(ROLES.ADMINISTRADOR);\n      setIsAdmin(admin);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Load files on mount\n  useEffect(() => {\n    checkAdmin();\n  }, [checkAdmin]);\n  useEffect(() => {\n    if (!hasLoadedRef.current) {\n      hasLoadedRef.current = true;\n      const savedPath = localStorage.getItem('lastFileManagerPath') || '';\n      loadFiles(savedPath);\n    }\n  }, [loadFiles]);\n\n  // Save current path to cache\n  useEffect(() => {\n    localStorage.setItem('lastFileManagerPath', currentPath);\n  }, [currentPath]);\n\n  // Navigation functions\n  const navigateToPath = targetPath => {\n    loadFiles(targetPath);\n  };\n  const navigateToFolder = folderName => {\n    const newPath = currentPath ? `${currentPath}/${folderName}` : folderName;\n    loadFiles(newPath);\n  };\n  const handleBreadcrumbClick = pathPrefix => {\n    navigateToPath(pathPrefix);\n  };\n\n  // Folder CRUD functions\n  const handleCreateFolder = async () => {\n    if (!isAdmin || !newFolderName.trim()) return;\n    try {\n      await formatosApi.createFolder(newFolderName.trim(), currentPath);\n      addNotification('Folder created successfully', 'success');\n      setNewFolderName('');\n      loadFiles(currentPath);\n    } catch (error) {\n      addNotification(`Error creating folder: ${error.message}`, 'error');\n    }\n  };\n  const handleRenameFolder = async oldName => {\n    if (!isAdmin || !renamingFolder || !renamingFolder.newName.trim()) return;\n    try {\n      await formatosApi.renameFolder(oldName, renamingFolder.newName.trim(), currentPath);\n      addNotification('Folder renamed successfully', 'success');\n      setRenamingFolder(null);\n      loadFiles(currentPath);\n    } catch (error) {\n      addNotification(`Error renaming folder: ${error.message}`, 'error');\n      setRenamingFolder(null);\n    }\n  };\n  const startRename = folder => {\n    setRenamingFolder({\n      folderName: folder,\n      newName: folder\n    });\n  };\n  const cancelRename = () => {\n    setRenamingFolder(null);\n  };\n  const updateRenameName = newName => {\n    setRenamingFolder(prev => ({\n      ...prev,\n      newName\n    }));\n  };\n  const handleDeleteFolder = async folderName => {\n    if (!isAdmin || !window.confirm(`Delete folder '${folderName}' and all contents?`)) return;\n    try {\n      // Find the folder ID\n      const folder = folders.find(f => f.nombre === folderName);\n      if (!folder) {\n        addNotification('Folder not found', 'error');\n        return;\n      }\n      await formatosApi.deleteFolder(folder.id);\n      addNotification('Folder deleted successfully', 'success');\n      loadFiles(currentPath);\n    } catch (error) {\n      addNotification(`Error deleting folder: ${error.message}`, 'error');\n    }\n  };\n\n  // File CRUD functions\n  const handleDeleteFile = async fileName => {\n    if (!isAdmin || !window.confirm(`Delete file '${fileName}'?`)) return;\n    try {\n      // Find the file ID\n      const file = files.find(f => f.nombre === fileName);\n      if (!file) {\n        addNotification('File not found', 'error');\n        return;\n      }\n      await formatosApi.deleteFile(file.id);\n      addNotification('File deleted successfully', 'success');\n      loadFiles(currentPath);\n    } catch (error) {\n      addNotification(`Error deleting file: ${error.message}`, 'error');\n    }\n  };\n  const handleDownload = async fileName => {\n    try {\n      // Find the file ID\n      const file = files.find(f => f.nombre === fileName);\n      if (!file) {\n        addNotification('File not found', 'error');\n        return;\n      }\n      const blob = await formatosApi.downloadFile(file.id);\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = fileName;\n      a.click();\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      addNotification(`Error downloading file: ${error.message}`, 'error');\n    }\n  };\n\n  // Upload files\n  const onDrop = async acceptedFiles => {\n    console.log('onDrop called with files:', acceptedFiles);\n    if (!isAdmin) {\n      console.log('onDrop: User is not admin');\n      addNotification('Permission denied: Admin access required for uploads', 'error');\n      return;\n    }\n    setUploading(true);\n    try {\n      console.log('onDrop: Starting upload for', acceptedFiles.length, 'files');\n      for (const file of acceptedFiles) {\n        await formatosApi.uploadFile(file);\n      }\n      addNotification(`${acceptedFiles.length} files uploaded successfully`, 'success');\n      loadFiles(currentPath);\n    } catch (error) {\n      console.error('onDrop: Upload error:', error);\n      addNotification(`Upload error: ${error.message}`, 'error');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  // Filtered files (only by search term)\n  const filteredAndSortedFiles = useMemo(() => {\n    return files.filter(file => {\n      const matchesSearch = file.nombre.toLowerCase().includes(debouncedSearchTerm.toLowerCase());\n      return matchesSearch;\n    }).sort((a, b) => {\n      // Sort by creation date (newest first)\n      return new Date(b.createdAt || 0) - new Date(a.createdAt || 0);\n    });\n  }, [files, debouncedSearchTerm]);\n  return {\n    // State\n    currentPath,\n    files,\n    folders,\n    loading,\n    error,\n    uploading,\n    isAdmin,\n    notifications,\n    searchTerm,\n    debouncedSearchTerm,\n    newFolderName,\n    renamingFolder,\n    filteredAndSortedFiles,\n    // Setters\n    setSearchTerm,\n    setNewFolderName,\n    setRenamingFolder,\n    setUploading,\n    setError,\n    // Functions\n    loadFiles,\n    addNotification,\n    checkAdmin,\n    navigateToPath,\n    navigateToFolder,\n    handleBreadcrumbClick,\n    handleCreateFolder,\n    handleRenameFolder,\n    startRename,\n    cancelRename,\n    updateRenameName,\n    handleDeleteFolder,\n    handleDeleteFile,\n    handleDownload,\n    onDrop\n  };\n};\n_s(useFileManager, \"JK0pIp/DhG6RF6mNS28H/zXYayY=\", false, function () {\n  return [useDebouncedSearch];\n});\nexport default useFileManager;","map":{"version":3,"names":["useState","useCallback","useMemo","useEffect","useRef","formatosApi","dbService","ROLES","useDebouncedSearch","useFileManager","_s","currentPath","setCurrentPath","files","setFiles","folders","setFolders","loading","setLoading","error","setError","uploading","setUploading","isAdmin","setIsAdmin","notifications","setNotifications","hasLoadedRef","searchTerm","setSearchTerm","debouncedSearchTerm","newFolderName","setNewFolderName","renamingFolder","setRenamingFolder","addNotification","message","type","id","Date","now","prev","setTimeout","filter","n","loadFiles","path","result","listFiles","loadedFiles","loadedFolders","checkAdmin","admin","hasPermission","ADMINISTRADOR","err","current","savedPath","localStorage","getItem","setItem","navigateToPath","targetPath","navigateToFolder","folderName","newPath","handleBreadcrumbClick","pathPrefix","handleCreateFolder","trim","createFolder","handleRenameFolder","oldName","newName","renameFolder","startRename","folder","cancelRename","updateRenameName","handleDeleteFolder","window","confirm","find","f","nombre","deleteFolder","handleDeleteFile","fileName","file","deleteFile","handleDownload","blob","downloadFile","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","onDrop","acceptedFiles","console","log","length","uploadFile","filteredAndSortedFiles","matchesSearch","toLowerCase","includes","sort","b","createdAt"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/pages/Dashboard/Formatos/hooks/useFileManager.js"],"sourcesContent":["import { useState, useCallback, useMemo, useEffect, useRef } from 'react';\nimport { formatosApi } from 'shared/services/formatosApi';\nimport { dbService, ROLES } from 'shared/services';\nimport { useDebouncedSearch } from 'shared/hooks';\n\nconst useFileManager = () => {\n  // Basic state\n  const [currentPath, setCurrentPath] = useState('');\n  const [files, setFiles] = useState([]);\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n\n  // Ref to prevent double loading in strict mode\n  const hasLoadedRef = useRef(false);\n\n  // Additional state for enhanced functionality\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebouncedSearch(searchTerm, 300);\n  const [newFolderName, setNewFolderName] = useState('');\n  const [renamingFolder, setRenamingFolder] = useState(null); // {folderName, newName}\n\n\n  // Simple notification helper\n  const addNotification = useCallback((message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, { id, message, type }]);\n    setTimeout(() => setNotifications(prev => prev.filter(n => n.id !== id)), 5000);\n  }, []);\n\n  // Load files and folders\n  const loadFiles = useCallback(async (path = '') => {\n    setLoading(true);\n    try {\n      const result = await formatosApi.listFiles(path);\n\n      const { files: loadedFiles, folders: loadedFolders } = result;\n      setFiles(loadedFiles || []);\n      setFolders(loadedFolders || []);\n      setCurrentPath(path);\n    } catch (error) {\n      addNotification(`Error loading files: ${error.message}`, 'error');\n      setFiles([]);\n      setFolders([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [addNotification]);\n\n  // Check admin permission on mount\n  const checkAdmin = useCallback(async () => {\n    try {\n      const admin = await dbService.hasPermission(ROLES.ADMINISTRADOR);\n      setIsAdmin(admin);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Load files on mount\n  useEffect(() => {\n    checkAdmin();\n  }, [checkAdmin]);\n\n  useEffect(() => {\n    if (!hasLoadedRef.current) {\n      hasLoadedRef.current = true;\n      const savedPath = localStorage.getItem('lastFileManagerPath') || '';\n      loadFiles(savedPath);\n    }\n  }, [loadFiles]);\n\n  // Save current path to cache\n  useEffect(() => {\n    localStorage.setItem('lastFileManagerPath', currentPath);\n  }, [currentPath]);\n\n  // Navigation functions\n  const navigateToPath = (targetPath) => {\n    loadFiles(targetPath);\n  };\n\n  const navigateToFolder = (folderName) => {\n    const newPath = currentPath ? `${currentPath}/${folderName}` : folderName;\n    loadFiles(newPath);\n  };\n\n  const handleBreadcrumbClick = (pathPrefix) => {\n    navigateToPath(pathPrefix);\n  };\n\n  // Folder CRUD functions\n  const handleCreateFolder = async () => {\n    if (!isAdmin || !newFolderName.trim()) return;\n    try {\n      await formatosApi.createFolder(newFolderName.trim(), currentPath);\n      addNotification('Folder created successfully', 'success');\n      setNewFolderName('');\n      loadFiles(currentPath);\n    } catch (error) {\n      addNotification(`Error creating folder: ${error.message}`, 'error');\n    }\n  };\n\n  const handleRenameFolder = async (oldName) => {\n    if (!isAdmin || !renamingFolder || !renamingFolder.newName.trim()) return;\n    try {\n      await formatosApi.renameFolder(oldName, renamingFolder.newName.trim(), currentPath);\n      addNotification('Folder renamed successfully', 'success');\n      setRenamingFolder(null);\n      loadFiles(currentPath);\n    } catch (error) {\n      addNotification(`Error renaming folder: ${error.message}`, 'error');\n      setRenamingFolder(null);\n    }\n  };\n\n  const startRename = (folder) => {\n    setRenamingFolder({ folderName: folder, newName: folder });\n  };\n\n  const cancelRename = () => {\n    setRenamingFolder(null);\n  };\n\n  const updateRenameName = (newName) => {\n    setRenamingFolder(prev => ({ ...prev, newName }));\n  };\n\n  const handleDeleteFolder = async (folderName) => {\n    if (!isAdmin || !window.confirm(`Delete folder '${folderName}' and all contents?`)) return;\n    try {\n      // Find the folder ID\n      const folder = folders.find(f => f.nombre === folderName);\n      if (!folder) {\n        addNotification('Folder not found', 'error');\n        return;\n      }\n      await formatosApi.deleteFolder(folder.id);\n      addNotification('Folder deleted successfully', 'success');\n      loadFiles(currentPath);\n    } catch (error) {\n      addNotification(`Error deleting folder: ${error.message}`, 'error');\n    }\n  };\n\n  // File CRUD functions\n  const handleDeleteFile = async (fileName) => {\n    if (!isAdmin || !window.confirm(`Delete file '${fileName}'?`)) return;\n    try {\n      // Find the file ID\n      const file = files.find(f => f.nombre === fileName);\n      if (!file) {\n        addNotification('File not found', 'error');\n        return;\n      }\n      await formatosApi.deleteFile(file.id);\n      addNotification('File deleted successfully', 'success');\n      loadFiles(currentPath);\n    } catch (error) {\n      addNotification(`Error deleting file: ${error.message}`, 'error');\n    }\n  };\n\n  const handleDownload = async (fileName) => {\n    try {\n      // Find the file ID\n      const file = files.find(f => f.nombre === fileName);\n      if (!file) {\n        addNotification('File not found', 'error');\n        return;\n      }\n      const blob = await formatosApi.downloadFile(file.id);\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = fileName;\n      a.click();\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      addNotification(`Error downloading file: ${error.message}`, 'error');\n    }\n  };\n\n  // Upload files\n  const onDrop = async (acceptedFiles) => {\n    console.log('onDrop called with files:', acceptedFiles);\n    if (!isAdmin) {\n      console.log('onDrop: User is not admin');\n      addNotification('Permission denied: Admin access required for uploads', 'error');\n      return;\n    }\n\n    setUploading(true);\n    try {\n      console.log('onDrop: Starting upload for', acceptedFiles.length, 'files');\n      for (const file of acceptedFiles) {\n        await formatosApi.uploadFile(file);\n      }\n      addNotification(`${acceptedFiles.length} files uploaded successfully`, 'success');\n      loadFiles(currentPath);\n    } catch (error) {\n      console.error('onDrop: Upload error:', error);\n      addNotification(`Upload error: ${error.message}`, 'error');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  // Filtered files (only by search term)\n  const filteredAndSortedFiles = useMemo(() => {\n    return files.filter(file => {\n      const matchesSearch = file.nombre.toLowerCase().includes(debouncedSearchTerm.toLowerCase());\n      return matchesSearch;\n    }).sort((a, b) => {\n      // Sort by creation date (newest first)\n      return new Date(b.createdAt || 0) - new Date(a.createdAt || 0);\n    });\n  }, [files, debouncedSearchTerm]);\n\n  return {\n    // State\n    currentPath,\n    files,\n    folders,\n    loading,\n    error,\n    uploading,\n    isAdmin,\n    notifications,\n    searchTerm,\n    debouncedSearchTerm,\n    newFolderName,\n    renamingFolder,\n    filteredAndSortedFiles,\n\n    // Setters\n    setSearchTerm,\n    setNewFolderName,\n    setRenamingFolder,\n    setUploading,\n    setError,\n\n    // Functions\n    loadFiles,\n    addNotification,\n    checkAdmin,\n    navigateToPath,\n    navigateToFolder,\n    handleBreadcrumbClick,\n    handleCreateFolder,\n    handleRenameFolder,\n    startRename,\n    cancelRename,\n    updateRenameName,\n    handleDeleteFolder,\n    handleDeleteFile,\n    handleDownload,\n    onDrop,\n  };\n};\n\nexport default useFileManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}