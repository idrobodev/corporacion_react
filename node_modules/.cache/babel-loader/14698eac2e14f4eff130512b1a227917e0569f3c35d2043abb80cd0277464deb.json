{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { storage } from '../services/storage';\nimport { dbService, ROLES } from '../services/database';\n\n// Hook personalizado para manejo de archivos\nexport const useFileManager = () => {\n  _s();\n  const [state, setState] = useState({\n    currentPath: '',\n    files: [],\n    folders: [],\n    loading: true,\n    error: null,\n    uploading: false,\n    isAdmin: false\n  });\n  const [ui, setUI] = useState({\n    viewMode: 'list',\n    // 'list' | 'grid'\n    sortBy: 'name',\n    // 'name' | 'size' | 'date'\n    sortOrder: 'asc',\n    // 'asc' | 'desc'\n    searchTerm: '',\n    selectedFiles: [],\n    showPreview: false,\n    previewFile: null\n  });\n  const [notifications, setNotifications] = useState([]);\n  const [folderOperations, setFolderOperations] = useState({\n    newFolderName: '',\n    renamingFolder: null\n  });\n\n  // Notification helper\n  const addNotification = useCallback((message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, {\n      id,\n      message,\n      type\n    }]);\n    setTimeout(() => setNotifications(prev => prev.filter(n => n.id !== id)), 5000);\n  }, []);\n\n  // Check admin permissions\n  useEffect(() => {\n    const checkAdmin = async () => {\n      try {\n        const admin = await dbService.hasPermission(ROLES.ADMINISTRADOR);\n        setState(prev => ({\n          ...prev,\n          isAdmin: admin,\n          loading: false\n        }));\n      } catch (err) {\n        setState(prev => ({\n          ...prev,\n          error: err.message,\n          loading: false\n        }));\n      }\n    };\n    checkAdmin();\n  }, []);\n\n  // Load files and folders\n  const loadFiles = useCallback(async (path = '') => {\n    setState(prev => ({\n      ...prev,\n      loading: true\n    }));\n    try {\n      const {\n        files: loadedFiles,\n        folders: loadedFolders\n      } = await storage.listFiles(path);\n      setState(prev => ({\n        ...prev,\n        files: loadedFiles,\n        folders: loadedFolders,\n        currentPath: path,\n        loading: false,\n        error: null\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error.message,\n        loading: false\n      }));\n      addNotification(`Error loading files: ${error.message}`, 'error');\n    }\n  }, [addNotification]);\n\n  // Initial load\n  useEffect(() => {\n    if (state.isAdmin) {\n      loadFiles();\n    }\n  }, [state.isAdmin, loadFiles]);\n\n  // Navigation functions\n  const navigateToFolder = folderName => {\n    const newPath = state.currentPath ? `${state.currentPath}/${folderName}` : folderName;\n    loadFiles(newPath);\n  };\n  const navigateToPath = targetPath => {\n    loadFiles(targetPath);\n  };\n\n  // File operations\n  const uploadFiles = async acceptedFiles => {\n    if (!state.isAdmin) {\n      addNotification('Permission denied: Admin access required for uploads', 'error');\n      return;\n    }\n    setState(prev => ({\n      ...prev,\n      uploading: true\n    }));\n    try {\n      for (const file of acceptedFiles) {\n        await storage.upload(file, state.currentPath);\n      }\n      addNotification(`${acceptedFiles.length} files uploaded successfully`, 'success');\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Upload error: ${error.message}`, 'error');\n    } finally {\n      setState(prev => ({\n        ...prev,\n        uploading: false\n      }));\n    }\n  };\n  const deleteFile = async fileName => {\n    if (!state.isAdmin || !window.confirm(`Delete file '${fileName}'?`)) return;\n    try {\n      const fullPath = state.currentPath ? `${state.currentPath}/${fileName}` : fileName;\n      await storage.deleteFile(fullPath);\n      addNotification('File deleted successfully', 'success');\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Error deleting file: ${error.message}`, 'error');\n    }\n  };\n  const downloadFile = async fileName => {\n    try {\n      const fullPath = state.currentPath ? `${state.currentPath}/${fileName}` : fileName;\n      const url = await storage.getDownloadUrl(fullPath);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = fileName;\n      a.click();\n    } catch (error) {\n      addNotification(`Error downloading file: ${error.message}`, 'error');\n    }\n  };\n\n  // Folder operations\n  const createFolder = async () => {\n    if (!state.isAdmin || !folderOperations.newFolderName.trim()) return;\n    try {\n      await storage.createFolder(folderOperations.newFolderName.trim(), state.currentPath);\n      addNotification('Folder created successfully', 'success');\n      setFolderOperations(prev => ({\n        ...prev,\n        newFolderName: ''\n      }));\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Error creating folder: ${error.message}`, 'error');\n    }\n  };\n  const renameFolder = async oldName => {\n    var _folderOperations$ren;\n    if (!state.isAdmin || !((_folderOperations$ren = folderOperations.renamingFolder) !== null && _folderOperations$ren !== void 0 && _folderOperations$ren.newName.trim())) return;\n    try {\n      await storage.renameFolder(oldName, folderOperations.renamingFolder.newName.trim(), state.currentPath);\n      addNotification('Folder renamed successfully', 'success');\n      setFolderOperations(prev => ({\n        ...prev,\n        renamingFolder: null\n      }));\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Error renaming folder: ${error.message}`, 'error');\n      setFolderOperations(prev => ({\n        ...prev,\n        renamingFolder: null\n      }));\n    }\n  };\n  const deleteFolder = async folderName => {\n    if (!state.isAdmin || !window.confirm(`Delete folder '${folderName}' and all contents?`)) return;\n    try {\n      await storage.deleteFolder(state.currentPath ? `${state.currentPath}/${folderName}` : folderName);\n      addNotification('Folder deleted successfully', 'success');\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Error deleting folder: ${error.message}`, 'error');\n    }\n  };\n\n  // UI functions\n  const updateUI = updates => {\n    setUI(prev => ({\n      ...prev,\n      ...updates\n    }));\n  };\n  const updateFolderOperations = updates => {\n    setFolderOperations(prev => ({\n      ...prev,\n      ...updates\n    }));\n  };\n\n  // Filtered and sorted files\n  const processedFiles = state.files.filter(file => file.nombre.toLowerCase().includes(ui.searchTerm.toLowerCase())).sort((a, b) => {\n    let aValue, bValue;\n    switch (ui.sortBy) {\n      case 'size':\n        aValue = a.tamaño || 0;\n        bValue = b.tamaño || 0;\n        break;\n      case 'date':\n        aValue = new Date(a.createdAt || 0);\n        bValue = new Date(b.createdAt || 0);\n        break;\n      default:\n        aValue = a.nombre.toLowerCase();\n        bValue = b.nombre.toLowerCase();\n    }\n    if (ui.sortOrder === 'desc') {\n      return aValue < bValue ? 1 : -1;\n    }\n    return aValue > bValue ? 1 : -1;\n  });\n  return {\n    // State\n    ...state,\n    ui,\n    notifications,\n    folderOperations,\n    processedFiles,\n    // Actions\n    loadFiles,\n    navigateToFolder,\n    navigateToPath,\n    uploadFiles,\n    deleteFile,\n    downloadFile,\n    createFolder,\n    renameFolder,\n    deleteFolder,\n    updateUI,\n    updateFolderOperations,\n    addNotification\n  };\n};\n_s(useFileManager, \"bwFHAT5bhk/ACP6sYoZEdZoOUgk=\");\nexport default useFileManager;","map":{"version":3,"names":["useState","useEffect","useCallback","storage","dbService","ROLES","useFileManager","_s","state","setState","currentPath","files","folders","loading","error","uploading","isAdmin","ui","setUI","viewMode","sortBy","sortOrder","searchTerm","selectedFiles","showPreview","previewFile","notifications","setNotifications","folderOperations","setFolderOperations","newFolderName","renamingFolder","addNotification","message","type","id","Date","now","prev","setTimeout","filter","n","checkAdmin","admin","hasPermission","ADMINISTRADOR","err","loadFiles","path","loadedFiles","loadedFolders","listFiles","navigateToFolder","folderName","newPath","navigateToPath","targetPath","uploadFiles","acceptedFiles","file","upload","length","deleteFile","fileName","window","confirm","fullPath","downloadFile","url","getDownloadUrl","a","document","createElement","href","download","click","createFolder","trim","renameFolder","oldName","_folderOperations$ren","newName","deleteFolder","updateUI","updates","updateFolderOperations","processedFiles","nombre","toLowerCase","includes","sort","b","aValue","bValue","tamaño","createdAt"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/hooks/useFileManager.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { storage } from '../services/storage';\nimport { dbService, ROLES } from '../services/database';\n\n// Hook personalizado para manejo de archivos\nexport const useFileManager = () => {\n  const [state, setState] = useState({\n    currentPath: '',\n    files: [],\n    folders: [],\n    loading: true,\n    error: null,\n    uploading: false,\n    isAdmin: false\n  });\n\n  const [ui, setUI] = useState({\n    viewMode: 'list', // 'list' | 'grid'\n    sortBy: 'name', // 'name' | 'size' | 'date'\n    sortOrder: 'asc', // 'asc' | 'desc'\n    searchTerm: '',\n    selectedFiles: [],\n    showPreview: false,\n    previewFile: null\n  });\n\n  const [notifications, setNotifications] = useState([]);\n  const [folderOperations, setFolderOperations] = useState({\n    newFolderName: '',\n    renamingFolder: null\n  });\n\n  // Notification helper\n  const addNotification = useCallback((message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, { id, message, type }]);\n    setTimeout(() => setNotifications(prev => prev.filter(n => n.id !== id)), 5000);\n  }, []);\n\n  // Check admin permissions\n  useEffect(() => {\n    const checkAdmin = async () => {\n      try {\n        const admin = await dbService.hasPermission(ROLES.ADMINISTRADOR);\n        setState(prev => ({ ...prev, isAdmin: admin, loading: false }));\n      } catch (err) {\n        setState(prev => ({ ...prev, error: err.message, loading: false }));\n      }\n    };\n    checkAdmin();\n  }, []);\n\n  // Load files and folders\n  const loadFiles = useCallback(async (path = '') => {\n    setState(prev => ({ ...prev, loading: true }));\n    try {\n      const { files: loadedFiles, folders: loadedFolders } = await storage.listFiles(path);\n      setState(prev => ({\n        ...prev,\n        files: loadedFiles,\n        folders: loadedFolders,\n        currentPath: path,\n        loading: false,\n        error: null\n      }));\n    } catch (error) {\n      setState(prev => ({ ...prev, error: error.message, loading: false }));\n      addNotification(`Error loading files: ${error.message}`, 'error');\n    }\n  }, [addNotification]);\n\n  // Initial load\n  useEffect(() => {\n    if (state.isAdmin) {\n      loadFiles();\n    }\n  }, [state.isAdmin, loadFiles]);\n\n  // Navigation functions\n  const navigateToFolder = (folderName) => {\n    const newPath = state.currentPath ? `${state.currentPath}/${folderName}` : folderName;\n    loadFiles(newPath);\n  };\n\n  const navigateToPath = (targetPath) => {\n    loadFiles(targetPath);\n  };\n\n  // File operations\n  const uploadFiles = async (acceptedFiles) => {\n    if (!state.isAdmin) {\n      addNotification('Permission denied: Admin access required for uploads', 'error');\n      return;\n    }\n\n    setState(prev => ({ ...prev, uploading: true }));\n    try {\n      for (const file of acceptedFiles) {\n        await storage.upload(file, state.currentPath);\n      }\n      addNotification(`${acceptedFiles.length} files uploaded successfully`, 'success');\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Upload error: ${error.message}`, 'error');\n    } finally {\n      setState(prev => ({ ...prev, uploading: false }));\n    }\n  };\n\n  const deleteFile = async (fileName) => {\n    if (!state.isAdmin || !window.confirm(`Delete file '${fileName}'?`)) return;\n    try {\n      const fullPath = state.currentPath ? `${state.currentPath}/${fileName}` : fileName;\n      await storage.deleteFile(fullPath);\n      addNotification('File deleted successfully', 'success');\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Error deleting file: ${error.message}`, 'error');\n    }\n  };\n\n  const downloadFile = async (fileName) => {\n    try {\n      const fullPath = state.currentPath ? `${state.currentPath}/${fileName}` : fileName;\n      const url = await storage.getDownloadUrl(fullPath);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = fileName;\n      a.click();\n    } catch (error) {\n      addNotification(`Error downloading file: ${error.message}`, 'error');\n    }\n  };\n\n  // Folder operations\n  const createFolder = async () => {\n    if (!state.isAdmin || !folderOperations.newFolderName.trim()) return;\n    try {\n      await storage.createFolder(folderOperations.newFolderName.trim(), state.currentPath);\n      addNotification('Folder created successfully', 'success');\n      setFolderOperations(prev => ({ ...prev, newFolderName: '' }));\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Error creating folder: ${error.message}`, 'error');\n    }\n  };\n\n  const renameFolder = async (oldName) => {\n    if (!state.isAdmin || !folderOperations.renamingFolder?.newName.trim()) return;\n    try {\n      await storage.renameFolder(oldName, folderOperations.renamingFolder.newName.trim(), state.currentPath);\n      addNotification('Folder renamed successfully', 'success');\n      setFolderOperations(prev => ({ ...prev, renamingFolder: null }));\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Error renaming folder: ${error.message}`, 'error');\n      setFolderOperations(prev => ({ ...prev, renamingFolder: null }));\n    }\n  };\n\n  const deleteFolder = async (folderName) => {\n    if (!state.isAdmin || !window.confirm(`Delete folder '${folderName}' and all contents?`)) return;\n    try {\n      await storage.deleteFolder(state.currentPath ? `${state.currentPath}/${folderName}` : folderName);\n      addNotification('Folder deleted successfully', 'success');\n      loadFiles(state.currentPath);\n    } catch (error) {\n      addNotification(`Error deleting folder: ${error.message}`, 'error');\n    }\n  };\n\n  // UI functions\n  const updateUI = (updates) => {\n    setUI(prev => ({ ...prev, ...updates }));\n  };\n\n  const updateFolderOperations = (updates) => {\n    setFolderOperations(prev => ({ ...prev, ...updates }));\n  };\n\n  // Filtered and sorted files\n  const processedFiles = state.files\n    .filter(file =>\n      file.nombre.toLowerCase().includes(ui.searchTerm.toLowerCase())\n    )\n    .sort((a, b) => {\n      let aValue, bValue;\n\n      switch (ui.sortBy) {\n        case 'size':\n          aValue = a.tamaño || 0;\n          bValue = b.tamaño || 0;\n          break;\n        case 'date':\n          aValue = new Date(a.createdAt || 0);\n          bValue = new Date(b.createdAt || 0);\n          break;\n        default:\n          aValue = a.nombre.toLowerCase();\n          bValue = b.nombre.toLowerCase();\n      }\n\n      if (ui.sortOrder === 'desc') {\n        return aValue < bValue ? 1 : -1;\n      }\n      return aValue > bValue ? 1 : -1;\n    });\n\n  return {\n    // State\n    ...state,\n    ui,\n    notifications,\n    folderOperations,\n    processedFiles,\n    \n    // Actions\n    loadFiles,\n    navigateToFolder,\n    navigateToPath,\n    uploadFiles,\n    deleteFile,\n    downloadFile,\n    createFolder,\n    renameFolder,\n    deleteFolder,\n    updateUI,\n    updateFolderOperations,\n    addNotification\n  };\n};\n\nexport default useFileManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}