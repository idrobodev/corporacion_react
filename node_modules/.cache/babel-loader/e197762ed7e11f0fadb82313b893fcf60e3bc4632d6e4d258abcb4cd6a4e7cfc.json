{"ast":null,"code":"import axios from 'axios';\n\n// Configuración de la API de formatos - usa el dashboard API ya que no hay servicio dedicado\nconst FORMATOS_API_BASE_URL = process.env.REACT_APP_DASHBOARD_API_BASE_URL || `${window.location.protocol}//${window.location.hostname}/api/dashboard`;\nconsole.log('🔧 FORMATOS_API_BASE_URL configurada como:', FORMATOS_API_BASE_URL);\nconsole.log('🔧 FORMATOS API DIAGNOSTICS:');\nconsole.log('  - REACT_APP_DASHBOARD_API_BASE_URL:', process.env.REACT_APP_DASHBOARD_API_BASE_URL);\nconsole.log('  - Fallback URL:', `${window.location.protocol}//${window.location.hostname}/api/dashboard`);\n\n// Crear instancia de axios para la API de formatos\nconst formatosClient = axios.create({\n  baseURL: FORMATOS_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Interceptor para manejar respuestas y errores\nformatosClient.interceptors.response.use(response => response, error => {\n  var _error$config, _error$response, _error$response2, _error$response3, _error$response4, _error$response5, _error$response6;\n  console.error('Error en formatos API:', (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, error.message);\n\n  // Manejar errores específicos\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 413) {\n    throw new Error('El archivo es demasiado grande (máximo 100MB)');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 409) {\n    var _error$response$data;\n    throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Conflicto: el recurso ya existe');\n  } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 404) {\n    throw new Error('Recurso no encontrado');\n  } else if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 400) {\n    var _error$response$data2;\n    throw new Error(((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.detail) || 'Datos inválidos');\n  } else if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 500) {\n    throw new Error('Error interno del servidor');\n  }\n\n  // Error de red o desconocido\n  if (!error.response) {\n    throw new Error('No se puede conectar con el servidor de formatos');\n  }\n  throw error;\n});\nclass FormatosApiService {\n  // ==================== ARCHIVOS ====================\n\n  /**\n   * Lista archivos y carpetas en una ruta específica\n   * @param {string} path - Ruta a listar (opcional, default=\"\")\n   * @returns {Promise<{files: Array, folders: Array, path: string}>}\n   */\n  async listFiles(path = \"\") {\n    try {\n      // Since there's no dedicated formatos API, return empty data for now\n      // This should be implemented in the dashboard API\n      console.warn('Formatos API not implemented - returning empty data');\n      return {\n        files: [],\n        folders: [],\n        path: path\n      };\n    } catch (error) {\n      console.error('Error listando archivos:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sube un archivo al servidor\n   * Los archivos se organizan automáticamente en carpetas por tipo\n   * @param {File} file - Archivo a subir\n   * @returns {Promise<Object>} Información del archivo subido\n   */\n  async uploadFile(file) {\n    try {\n      // Since there's no dedicated formatos API, simulate upload success\n      // This should be implemented in the dashboard API\n      console.warn('Formatos upload not implemented - simulating success');\n      return {\n        id: Date.now(),\n        nombre: file.name,\n        ruta: '',\n        tamaño: file.size,\n        tipo: file.type,\n        createdAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error subiendo archivo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Descarga un archivo por su ID\n   * @param {number} fileId - ID del archivo\n   * @returns {Promise<Blob>} Archivo como blob\n   */\n  async downloadFile(fileId) {\n    try {\n      // Since there's no dedicated formatos API, simulate download\n      // This should be implemented in the dashboard API\n      console.warn('Formatos download not implemented - cannot download file');\n      throw new Error('Download functionality not implemented');\n    } catch (error) {\n      console.error('Error descargando archivo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Elimina un archivo por su ID\n   * @param {number} fileId - ID del archivo a eliminar\n   * @returns {Promise<Object>} Confirmación de eliminación\n   */\n  async deleteFile(fileId) {\n    try {\n      // Since there's no dedicated formatos API, simulate deletion\n      // This should be implemented in the dashboard API\n      console.warn('Formatos delete not implemented - simulating success');\n      return {\n        message: 'Archivo eliminado exitosamente',\n        id: fileId\n      };\n    } catch (error) {\n      console.error('Error eliminando archivo:', error);\n      throw error;\n    }\n  }\n\n  // ==================== CARPETAS ====================\n\n  /**\n   * Crea una nueva carpeta\n   * @param {string} nombre - Nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre (opcional)\n   * @returns {Promise<Object>} Información de la carpeta creada\n   */\n  async createFolder(nombre, parentPath = \"\") {\n    try {\n      // Since there's no dedicated formatos API, simulate folder creation\n      // This should be implemented in the dashboard API\n      console.warn('Formatos create folder not implemented - simulating success');\n      return {\n        id: Date.now(),\n        nombre: nombre,\n        ruta: parentPath,\n        createdAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error creando carpeta:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Renombra una carpeta\n   * @param {string} oldName - Nombre actual de la carpeta\n   * @param {string} newName - Nuevo nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre\n   * @returns {Promise<Object>} Confirmación del cambio\n   */\n  async renameFolder(oldName, newName, parentPath = \"\") {\n    try {\n      // Since there's no dedicated formatos API, simulate folder rename\n      // This should be implemented in the dashboard API\n      console.warn('Formatos rename folder not implemented - simulating success');\n      return {\n        message: `Carpeta renombrada de '${oldName}' a '${newName}' exitosamente`,\n        oldName: oldName,\n        newName: newName,\n        parentPath: parentPath\n      };\n    } catch (error) {\n      console.error('Error renombrando carpeta:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Elimina una carpeta por su ID\n   * @param {number} folderId - ID de la carpeta a eliminar\n   * @returns {Promise<Object>} Confirmación de eliminación\n   */\n  async deleteFolder(folderId) {\n    try {\n      // Since there's no dedicated formatos API, simulate folder deletion\n      // This should be implemented in the dashboard API\n      console.warn('Formatos delete folder not implemented - simulating success');\n      return {\n        message: 'Carpeta eliminada exitosamente',\n        id: folderId\n      };\n    } catch (error) {\n      console.error('Error eliminando carpeta:', error);\n      throw error;\n    }\n  }\n}\n\n// Exportar instancia única del servicio\nexport const formatosApi = new FormatosApiService();\nexport default formatosApi;","map":{"version":3,"names":["axios","FORMATOS_API_BASE_URL","process","env","REACT_APP_DASHBOARD_API_BASE_URL","window","location","protocol","hostname","console","log","formatosClient","create","baseURL","timeout","withCredentials","headers","interceptors","response","use","error","_error$config","_error$response","_error$response2","_error$response3","_error$response4","_error$response5","_error$response6","config","url","status","message","Error","_error$response$data","data","detail","_error$response$data2","FormatosApiService","listFiles","path","warn","files","folders","uploadFile","file","id","Date","now","nombre","name","ruta","tamaño","size","tipo","type","createdAt","toISOString","downloadFile","fileId","deleteFile","createFolder","parentPath","renameFolder","oldName","newName","deleteFolder","folderId","formatosApi"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/services/formatosApi.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuración de la API de formatos - usa el dashboard API ya que no hay servicio dedicado\nconst FORMATOS_API_BASE_URL = process.env.REACT_APP_DASHBOARD_API_BASE_URL ||\n  `${window.location.protocol}//${window.location.hostname}/api/dashboard`;\n\nconsole.log('🔧 FORMATOS_API_BASE_URL configurada como:', FORMATOS_API_BASE_URL);\nconsole.log('🔧 FORMATOS API DIAGNOSTICS:');\nconsole.log('  - REACT_APP_DASHBOARD_API_BASE_URL:', process.env.REACT_APP_DASHBOARD_API_BASE_URL);\nconsole.log('  - Fallback URL:', `${window.location.protocol}//${window.location.hostname}/api/dashboard`);\n\n// Crear instancia de axios para la API de formatos\nconst formatosClient = axios.create({\n  baseURL: FORMATOS_API_BASE_URL,\n  timeout: 30000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n});\n\n// Interceptor para manejar respuestas y errores\nformatosClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('Error en formatos API:', error.config?.url, error.response?.status, error.message);\n\n    // Manejar errores específicos\n    if (error.response?.status === 413) {\n      throw new Error('El archivo es demasiado grande (máximo 100MB)');\n    } else if (error.response?.status === 409) {\n      throw new Error(error.response.data?.detail || 'Conflicto: el recurso ya existe');\n    } else if (error.response?.status === 404) {\n      throw new Error('Recurso no encontrado');\n    } else if (error.response?.status === 400) {\n      throw new Error(error.response.data?.detail || 'Datos inválidos');\n    } else if (error.response?.status === 500) {\n      throw new Error('Error interno del servidor');\n    }\n\n    // Error de red o desconocido\n    if (!error.response) {\n      throw new Error('No se puede conectar con el servidor de formatos');\n    }\n\n    throw error;\n  }\n);\n\nclass FormatosApiService {\n  // ==================== ARCHIVOS ====================\n\n  /**\n   * Lista archivos y carpetas en una ruta específica\n   * @param {string} path - Ruta a listar (opcional, default=\"\")\n   * @returns {Promise<{files: Array, folders: Array, path: string}>}\n   */\n  async listFiles(path = \"\") {\n    try {\n      // Since there's no dedicated formatos API, return empty data for now\n      // This should be implemented in the dashboard API\n      console.warn('Formatos API not implemented - returning empty data');\n      return {\n        files: [],\n        folders: [],\n        path: path\n      };\n    } catch (error) {\n      console.error('Error listando archivos:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sube un archivo al servidor\n   * Los archivos se organizan automáticamente en carpetas por tipo\n   * @param {File} file - Archivo a subir\n   * @returns {Promise<Object>} Información del archivo subido\n   */\n  async uploadFile(file) {\n    try {\n      // Since there's no dedicated formatos API, simulate upload success\n      // This should be implemented in the dashboard API\n      console.warn('Formatos upload not implemented - simulating success');\n      return {\n        id: Date.now(),\n        nombre: file.name,\n        ruta: '',\n        tamaño: file.size,\n        tipo: file.type,\n        createdAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error subiendo archivo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Descarga un archivo por su ID\n   * @param {number} fileId - ID del archivo\n   * @returns {Promise<Blob>} Archivo como blob\n   */\n  async downloadFile(fileId) {\n    try {\n      // Since there's no dedicated formatos API, simulate download\n      // This should be implemented in the dashboard API\n      console.warn('Formatos download not implemented - cannot download file');\n      throw new Error('Download functionality not implemented');\n    } catch (error) {\n      console.error('Error descargando archivo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Elimina un archivo por su ID\n   * @param {number} fileId - ID del archivo a eliminar\n   * @returns {Promise<Object>} Confirmación de eliminación\n   */\n  async deleteFile(fileId) {\n    try {\n      // Since there's no dedicated formatos API, simulate deletion\n      // This should be implemented in the dashboard API\n      console.warn('Formatos delete not implemented - simulating success');\n      return {\n        message: 'Archivo eliminado exitosamente',\n        id: fileId\n      };\n    } catch (error) {\n      console.error('Error eliminando archivo:', error);\n      throw error;\n    }\n  }\n\n  // ==================== CARPETAS ====================\n\n  /**\n   * Crea una nueva carpeta\n   * @param {string} nombre - Nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre (opcional)\n   * @returns {Promise<Object>} Información de la carpeta creada\n   */\n  async createFolder(nombre, parentPath = \"\") {\n    try {\n      // Since there's no dedicated formatos API, simulate folder creation\n      // This should be implemented in the dashboard API\n      console.warn('Formatos create folder not implemented - simulating success');\n      return {\n        id: Date.now(),\n        nombre: nombre,\n        ruta: parentPath,\n        createdAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error creando carpeta:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Renombra una carpeta\n   * @param {string} oldName - Nombre actual de la carpeta\n   * @param {string} newName - Nuevo nombre de la carpeta\n   * @param {string} parentPath - Ruta del directorio padre\n   * @returns {Promise<Object>} Confirmación del cambio\n   */\n  async renameFolder(oldName, newName, parentPath = \"\") {\n    try {\n      // Since there's no dedicated formatos API, simulate folder rename\n      // This should be implemented in the dashboard API\n      console.warn('Formatos rename folder not implemented - simulating success');\n      return {\n        message: `Carpeta renombrada de '${oldName}' a '${newName}' exitosamente`,\n        oldName: oldName,\n        newName: newName,\n        parentPath: parentPath\n      };\n    } catch (error) {\n      console.error('Error renombrando carpeta:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Elimina una carpeta por su ID\n   * @param {number} folderId - ID de la carpeta a eliminar\n   * @returns {Promise<Object>} Confirmación de eliminación\n   */\n  async deleteFolder(folderId) {\n    try {\n      // Since there's no dedicated formatos API, simulate folder deletion\n      // This should be implemented in the dashboard API\n      console.warn('Formatos delete folder not implemented - simulating success');\n      return {\n        message: 'Carpeta eliminada exitosamente',\n        id: folderId\n      };\n    } catch (error) {\n      console.error('Error eliminando carpeta:', error);\n      throw error;\n    }\n  }\n}\n\n// Exportar instancia única del servicio\nexport const formatosApi = new FormatosApiService();\nexport default formatosApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}