{"ast":null,"code":"import{useState,useMemo}from'react';/**\n * Custom hook for pagination logic\n * \n * @param {Array} data - The array of data to paginate\n * @param {number} pageSize - Number of items per page (default: 10)\n * @returns {Object} Pagination state and functions\n * \n * @example\n * const { \n *   currentPage, \n *   totalPages, \n *   paginatedData, \n *   setPage, \n *   nextPage, \n *   prevPage \n * } = usePagination(items, 10);\n */export const usePagination=function(data){let pageSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const[currentPage,setCurrentPage]=useState(1);// Calculate total pages\nconst totalPages=useMemo(()=>{return Math.ceil(data.length/pageSize);},[data.length,pageSize]);// Calculate start and end indices\nconst{startIndex,endIndex}=useMemo(()=>{const start=(currentPage-1)*pageSize;const end=start+pageSize;return{startIndex:start,endIndex:end};},[currentPage,pageSize]);// Calculate paginated data slice\nconst paginatedData=useMemo(()=>{return data.slice(startIndex,endIndex);},[data,startIndex,endIndex]);// Set page function with validation\nconst setPage=page=>{if(page>=1&&page<=totalPages){setCurrentPage(page);}};// Navigate to next page\nconst nextPage=()=>{if(currentPage<totalPages){setCurrentPage(prev=>prev+1);}};// Navigate to previous page\nconst prevPage=()=>{if(currentPage>1){setCurrentPage(prev=>prev-1);}};// Reset to first page\nconst resetPage=()=>{setCurrentPage(1);};return{currentPage,totalPages,pageSize,setPage,nextPage,prevPage,resetPage,paginatedData,startIndex,endIndex,// Additional helper properties\ntotalItems:data.length,hasNextPage:currentPage<totalPages,hasPrevPage:currentPage>1,startItem:data.length>0?startIndex+1:0,endItem:Math.min(endIndex,data.length)};};export default usePagination;","map":{"version":3,"names":["useState","useMemo","usePagination","data","pageSize","arguments","length","undefined","currentPage","setCurrentPage","totalPages","Math","ceil","startIndex","endIndex","start","end","paginatedData","slice","setPage","page","nextPage","prev","prevPage","resetPage","totalItems","hasNextPage","hasPrevPage","startItem","endItem","min"],"sources":["/Users/todoporunalma/Desktop/coptua/corporacion_react/src/shared/hooks/usePagination.js"],"sourcesContent":["import { useState, useMemo } from 'react';\n\n/**\n * Custom hook for pagination logic\n * \n * @param {Array} data - The array of data to paginate\n * @param {number} pageSize - Number of items per page (default: 10)\n * @returns {Object} Pagination state and functions\n * \n * @example\n * const { \n *   currentPage, \n *   totalPages, \n *   paginatedData, \n *   setPage, \n *   nextPage, \n *   prevPage \n * } = usePagination(items, 10);\n */\nexport const usePagination = (data, pageSize = 10) => {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Calculate total pages\n  const totalPages = useMemo(() => {\n    return Math.ceil(data.length / pageSize);\n  }, [data.length, pageSize]);\n\n  // Calculate start and end indices\n  const { startIndex, endIndex } = useMemo(() => {\n    const start = (currentPage - 1) * pageSize;\n    const end = start + pageSize;\n    return { startIndex: start, endIndex: end };\n  }, [currentPage, pageSize]);\n\n  // Calculate paginated data slice\n  const paginatedData = useMemo(() => {\n    return data.slice(startIndex, endIndex);\n  }, [data, startIndex, endIndex]);\n\n  // Set page function with validation\n  const setPage = (page) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  // Navigate to next page\n  const nextPage = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  // Navigate to previous page\n  const prevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(prev => prev - 1);\n    }\n  };\n\n  // Reset to first page\n  const resetPage = () => {\n    setCurrentPage(1);\n  };\n\n  return {\n    currentPage,\n    totalPages,\n    pageSize,\n    setPage,\n    nextPage,\n    prevPage,\n    resetPage,\n    paginatedData,\n    startIndex,\n    endIndex,\n    // Additional helper properties\n    totalItems: data.length,\n    hasNextPage: currentPage < totalPages,\n    hasPrevPage: currentPage > 1,\n    startItem: data.length > 0 ? startIndex + 1 : 0,\n    endItem: Math.min(endIndex, data.length)\n  };\n};\n\nexport default usePagination;\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,OAAO,KAAQ,OAAO,CAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,aAAa,CAAG,QAAAA,CAACC,IAAI,CAAoB,IAAlB,CAAAC,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC/C,KAAM,CAACG,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,CAAC,CAAC,CAEjD;AACA,KAAM,CAAAU,UAAU,CAAGT,OAAO,CAAC,IAAM,CAC/B,MAAO,CAAAU,IAAI,CAACC,IAAI,CAACT,IAAI,CAACG,MAAM,CAAGF,QAAQ,CAAC,CAC1C,CAAC,CAAE,CAACD,IAAI,CAACG,MAAM,CAAEF,QAAQ,CAAC,CAAC,CAE3B;AACA,KAAM,CAAES,UAAU,CAAEC,QAAS,CAAC,CAAGb,OAAO,CAAC,IAAM,CAC7C,KAAM,CAAAc,KAAK,CAAG,CAACP,WAAW,CAAG,CAAC,EAAIJ,QAAQ,CAC1C,KAAM,CAAAY,GAAG,CAAGD,KAAK,CAAGX,QAAQ,CAC5B,MAAO,CAAES,UAAU,CAAEE,KAAK,CAAED,QAAQ,CAAEE,GAAI,CAAC,CAC7C,CAAC,CAAE,CAACR,WAAW,CAAEJ,QAAQ,CAAC,CAAC,CAE3B;AACA,KAAM,CAAAa,aAAa,CAAGhB,OAAO,CAAC,IAAM,CAClC,MAAO,CAAAE,IAAI,CAACe,KAAK,CAACL,UAAU,CAAEC,QAAQ,CAAC,CACzC,CAAC,CAAE,CAACX,IAAI,CAAEU,UAAU,CAAEC,QAAQ,CAAC,CAAC,CAEhC;AACA,KAAM,CAAAK,OAAO,CAAIC,IAAI,EAAK,CACxB,GAAIA,IAAI,EAAI,CAAC,EAAIA,IAAI,EAAIV,UAAU,CAAE,CACnCD,cAAc,CAACW,IAAI,CAAC,CACtB,CACF,CAAC,CAED;AACA,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACrB,GAAIb,WAAW,CAAGE,UAAU,CAAE,CAC5BD,cAAc,CAACa,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAClC,CACF,CAAC,CAED;AACA,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACrB,GAAIf,WAAW,CAAG,CAAC,CAAE,CACnBC,cAAc,CAACa,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAClC,CACF,CAAC,CAED;AACA,KAAM,CAAAE,SAAS,CAAGA,CAAA,GAAM,CACtBf,cAAc,CAAC,CAAC,CAAC,CACnB,CAAC,CAED,MAAO,CACLD,WAAW,CACXE,UAAU,CACVN,QAAQ,CACRe,OAAO,CACPE,QAAQ,CACRE,QAAQ,CACRC,SAAS,CACTP,aAAa,CACbJ,UAAU,CACVC,QAAQ,CACR;AACAW,UAAU,CAAEtB,IAAI,CAACG,MAAM,CACvBoB,WAAW,CAAElB,WAAW,CAAGE,UAAU,CACrCiB,WAAW,CAAEnB,WAAW,CAAG,CAAC,CAC5BoB,SAAS,CAAEzB,IAAI,CAACG,MAAM,CAAG,CAAC,CAAGO,UAAU,CAAG,CAAC,CAAG,CAAC,CAC/CgB,OAAO,CAAElB,IAAI,CAACmB,GAAG,CAAChB,QAAQ,CAAEX,IAAI,CAACG,MAAM,CACzC,CAAC,CACH,CAAC,CAED,cAAe,CAAAJ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}