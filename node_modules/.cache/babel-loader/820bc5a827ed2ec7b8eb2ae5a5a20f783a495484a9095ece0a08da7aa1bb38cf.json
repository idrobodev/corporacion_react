{"ast":null,"code":"import{api,ROLES}from'./api';// Re-exportar roles para compatibilidad\nexport{ROLES};class DatabaseService{// Obtener usuario actual con rol\nasync getCurrentUser(){return await api.getCurrentUser();}// Verificar permisos del usuario\nasync hasPermission(requiredRole){return await api.hasPermission(requiredRole);}// Obtener datos del dashboard\nasync getDashboardData(){return await api.getDashboardData();}// Obtener participantes\nasync getParticipantes(){return await api.getParticipantes();}// Obtener mensualidades/pagos\nasync getMensualidades(){return await api.getMensualidades();}// Crear nuevo participante\nasync createParticipante(participanteData){return await api.createParticipante(participanteData);}// Actualizar participante\nasync updateParticipante(id,participanteData){return await api.updateParticipante(id,participanteData);}// Eliminar participante\nasync deleteParticipante(id){return await api.deleteParticipante(id);}// ==================== USUARIOS ====================\n// Obtener lista de usuarios\nasync getUsuarios(){return await api.getUsuarios();}// Crear nuevo usuario\nasync createUsuario(usuarioData){return await api.createUsuario(usuarioData);}// Actualizar usuario\nasync updateUsuario(id,usuarioData){return await api.updateUsuario(id,usuarioData);}// Eliminar usuario\nasync deleteUsuario(id){return await api.deleteUsuario(id);}// ==================== ACUDIENTES ====================\n// Obtener lista de acudientes\nasync getAcudientes(filters){return await api.getAcudientes(filters);}// Obtener acudientes de un participante específico\nasync getAcudientesByParticipante(participanteId){return await api.getAcudientesByParticipante(participanteId);}// Crear nuevo acudiente\nasync createAcudiente(acudienteData){return await api.createAcudiente(acudienteData);}// Actualizar acudiente\nasync updateAcudiente(id,acudienteData){return await api.updateAcudiente(id,acudienteData);}// Eliminar acudiente\nasync deleteAcudiente(id){return await api.deleteAcudiente(id);}// ==================== SEDES ====================\n// Obtener sedes\nasync getSedes(){return await api.getSedes();}// Crear nueva sede\nasync createSede(sedeData){return await api.createSede(sedeData);}// Actualizar sede\nasync updateSede(id,sedeData){return await api.updateSede(id,sedeData);}// Eliminar sede\nasync deleteSede(id){return await api.deleteSede(id);}// Crear nueva mensualidad\nasync createMensualidad(mensualidadData){return await api.createMensualidad(mensualidadData);}// Actualizar mensualidad\nasync updateMensualidad(id,mensualidadData){return await api.updateMensualidad(id,mensualidadData);}// Verificar conexión con la API\nasync testConnection(){return await api.testConnection();}// Obtener configuración de la API\ngetApiConfig(){return api.getApiConfig();}}// Exportar instancia única del servicio\nexport const dbService=new DatabaseService();export default dbService;","map":{"version":3,"names":["api","ROLES","DatabaseService","getCurrentUser","hasPermission","requiredRole","getDashboardData","getParticipantes","getMensualidades","createParticipante","participanteData","updateParticipante","id","deleteParticipante","getUsuarios","createUsuario","usuarioData","updateUsuario","deleteUsuario","getAcudientes","filters","getAcudientesByParticipante","participanteId","createAcudiente","acudienteData","updateAcudiente","deleteAcudiente","getSedes","createSede","sedeData","updateSede","deleteSede","createMensualidad","mensualidadData","updateMensualidad","testConnection","getApiConfig","dbService"],"sources":["/Users/todoporunalma/Desktop/corporacion_react/src/shared/services/database.js"],"sourcesContent":["import { api, ROLES } from './api';\n\n// Re-exportar roles para compatibilidad\nexport { ROLES };\n\nclass DatabaseService {\n  // Obtener usuario actual con rol\n  async getCurrentUser() {\n    return await api.getCurrentUser();\n  }\n\n  // Verificar permisos del usuario\n  async hasPermission(requiredRole) {\n    return await api.hasPermission(requiredRole);\n  }\n\n  // Obtener datos del dashboard\n  async getDashboardData() {\n    return await api.getDashboardData();\n  }\n\n  // Obtener participantes\n  async getParticipantes() {\n    return await api.getParticipantes();\n  }\n\n  // Obtener mensualidades/pagos\n  async getMensualidades() {\n    return await api.getMensualidades();\n  }\n\n\n  // Crear nuevo participante\n  async createParticipante(participanteData) {\n    return await api.createParticipante(participanteData);\n  }\n\n  // Actualizar participante\n  async updateParticipante(id, participanteData) {\n    return await api.updateParticipante(id, participanteData);\n  }\n\n  // Eliminar participante\n  async deleteParticipante(id) {\n    return await api.deleteParticipante(id);\n  }\n\n  // ==================== USUARIOS ====================\n  \n  // Obtener lista de usuarios\n  async getUsuarios() {\n    return await api.getUsuarios();\n  }\n\n  // Crear nuevo usuario\n  async createUsuario(usuarioData) {\n    return await api.createUsuario(usuarioData);\n  }\n\n  // Actualizar usuario\n  async updateUsuario(id, usuarioData) {\n    return await api.updateUsuario(id, usuarioData);\n  }\n\n  // Eliminar usuario\n  async deleteUsuario(id) {\n    return await api.deleteUsuario(id);\n  }\n\n  // ==================== ACUDIENTES ====================\n  \n  // Obtener lista de acudientes\n  async getAcudientes(filters) {\n    return await api.getAcudientes(filters);\n  }\n\n  // Obtener acudientes de un participante específico\n  async getAcudientesByParticipante(participanteId) {\n    return await api.getAcudientesByParticipante(participanteId);\n  }\n\n  // Crear nuevo acudiente\n  async createAcudiente(acudienteData) {\n    return await api.createAcudiente(acudienteData);\n  }\n\n  // Actualizar acudiente\n  async updateAcudiente(id, acudienteData) {\n    return await api.updateAcudiente(id, acudienteData);\n  }\n\n  // Eliminar acudiente\n  async deleteAcudiente(id) {\n    return await api.deleteAcudiente(id);\n  }\n\n  // ==================== SEDES ====================\n\n  // Obtener sedes\n  async getSedes() {\n    return await api.getSedes();\n  }\n\n  // Crear nueva sede\n  async createSede(sedeData) {\n    return await api.createSede(sedeData);\n  }\n\n  // Actualizar sede\n  async updateSede(id, sedeData) {\n    return await api.updateSede(id, sedeData);\n  }\n\n  // Eliminar sede\n  async deleteSede(id) {\n    return await api.deleteSede(id);\n  }\n\n  // Crear nueva mensualidad\n  async createMensualidad(mensualidadData) {\n    return await api.createMensualidad(mensualidadData);\n  }\n\n  // Actualizar mensualidad\n  async updateMensualidad(id, mensualidadData) {\n    return await api.updateMensualidad(id, mensualidadData);\n  }\n\n  // Verificar conexión con la API\n  async testConnection() {\n    return await api.testConnection();\n  }\n\n  // Obtener configuración de la API\n  getApiConfig() {\n    return api.getApiConfig();\n  }\n}\n\n// Exportar instancia única del servicio\nexport const dbService = new DatabaseService();\nexport default dbService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}