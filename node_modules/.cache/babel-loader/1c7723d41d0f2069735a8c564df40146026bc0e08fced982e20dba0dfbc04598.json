{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nexport default function useDebouncedSearch(value, delay = 500) {\n  _s();\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  const timeoutRef = useRef(null);\n\n  // Memoize delay to prevent unnecessary effect re-runs\n  const memoizedDelay = useMemo(() => delay, [delay]);\n  useEffect(() => {\n    // Clear existing timeout to prevent memory leaks\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    // Optimize: Don't set timeout if value hasn't actually changed\n    if (debouncedValue === value) {\n      return;\n    }\n    timeoutRef.current = setTimeout(() => {\n      setDebouncedValue(value);\n      timeoutRef.current = null;\n    }, memoizedDelay);\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = null;\n      }\n    };\n  }, [value, memoizedDelay, debouncedValue]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n  return debouncedValue;\n}\n_s(useDebouncedSearch, \"eNGHGTFDArYPGvrb7HEItW01r2o=\");","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","useDebouncedSearch","value","delay","_s","debouncedValue","setDebouncedValue","timeoutRef","memoizedDelay","current","clearTimeout","setTimeout"],"sources":["/Users/todoporunalma/Desktop/ol/corporacion_react/src/shared/hooks/useDebouncedSearch.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\n\nexport default function useDebouncedSearch(value, delay = 500) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  const timeoutRef = useRef(null);\n  \n  // Memoize delay to prevent unnecessary effect re-runs\n  const memoizedDelay = useMemo(() => delay, [delay]);\n  \n  useEffect(() => {\n    // Clear existing timeout to prevent memory leaks\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    // Optimize: Don't set timeout if value hasn't actually changed\n    if (debouncedValue === value) {\n      return;\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      setDebouncedValue(value);\n      timeoutRef.current = null;\n    }, memoizedDelay);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = null;\n      }\n    };\n  }, [value, memoizedDelay, debouncedValue]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  return debouncedValue;\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,OAAO,QAAQ,OAAO;AAE5D,eAAe,SAASC,kBAAkBA,CAACC,KAAK,EAAEC,KAAK,GAAG,GAAG,EAAE;EAAAC,EAAA;EAC7D,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAACK,KAAK,CAAC;EAC3D,MAAMK,UAAU,GAAGR,MAAM,CAAC,IAAI,CAAC;;EAE/B;EACA,MAAMS,aAAa,GAAGR,OAAO,CAAC,MAAMG,KAAK,EAAE,CAACA,KAAK,CAAC,CAAC;EAEnDL,SAAS,CAAC,MAAM;IACd;IACA,IAAIS,UAAU,CAACE,OAAO,EAAE;MACtBC,YAAY,CAACH,UAAU,CAACE,OAAO,CAAC;IAClC;;IAEA;IACA,IAAIJ,cAAc,KAAKH,KAAK,EAAE;MAC5B;IACF;IAEAK,UAAU,CAACE,OAAO,GAAGE,UAAU,CAAC,MAAM;MACpCL,iBAAiB,CAACJ,KAAK,CAAC;MACxBK,UAAU,CAACE,OAAO,GAAG,IAAI;IAC3B,CAAC,EAAED,aAAa,CAAC;IAEjB,OAAO,MAAM;MACX,IAAID,UAAU,CAACE,OAAO,EAAE;QACtBC,YAAY,CAACH,UAAU,CAACE,OAAO,CAAC;QAChCF,UAAU,CAACE,OAAO,GAAG,IAAI;MAC3B;IACF,CAAC;EACH,CAAC,EAAE,CAACP,KAAK,EAAEM,aAAa,EAAEH,cAAc,CAAC,CAAC;;EAE1C;EACAP,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIS,UAAU,CAACE,OAAO,EAAE;QACtBC,YAAY,CAACH,UAAU,CAACE,OAAO,CAAC;MAClC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOJ,cAAc;AACvB;AAACD,EAAA,CAzCuBH,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}