{"version":3,"file":"static/js/880.eec688cc.chunk.js","mappings":"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","sources":["pages/Dashboard/Sedes.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport DashboardLayout from \"components/layout/DashboardLayout\";\nimport { dbService } from \"shared/services\";\nimport { StatsGrid } from \"components/UI/Card\";\nimport { StatusToggle } from \"components/UI/Badge\";\nimport { ActionDropdown } from \"components/UI/Table\";\nimport { ViewDetailsModal, EditFormModal, CreateFormModal } from \"components/common/CRUDModals\";\nimport { useModal } from \"shared/hooks\";\n\nconst SedesComponent = () => {\n  const [sedes, setSedes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // No filters needed\n  \n  const verModal = useModal();\n  const editarModal = useModal();\n  const crearModal = useModal();\n\n  // Función para cargar sedes\n  const loadSedes = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('🔄 Cargando sedes...');\n\n      const result = await dbService.getSedes();\n      console.log('📊 Resultado sedes:', result);\n\n      if (result.error) {\n        throw new Error(result.error.message || 'Error al cargar sedes');\n      }\n\n      const sedesData = Array.isArray(result.data?.data) ? result.data.data : [];\n      setSedes(sedesData);\n      console.log('✅ Sedes cargadas:', sedesData.length);\n    } catch (err) {\n      console.error('❌ Error cargando sedes:', err);\n      setError(err.message || 'Error desconocido al cargar sedes');\n      setSedes([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadSedes();\n  }, []);\n\n\n\n  const filteredSedes = useMemo(() => {\n    return Array.isArray(sedes) ? sedes : [];\n  }, [sedes]);\n\n  const statsData = useMemo(() => [\n    {\n      title: \"Total Sedes\",\n      value: filteredSedes.length,\n      icon: \"fas fa-building\",\n      color: \"blue\"\n    },\n    {\n      title: \"Activas\",\n      value: filteredSedes.filter(s => s.estado === \"Activa\").length,\n      icon: \"fas fa-check-circle\",\n      color: \"green\"\n    },\n    {\n      title: \"Inactivas\",\n      value: filteredSedes.filter(s => s.estado === \"Inactiva\").length,\n      icon: \"fas fa-times-circle\",\n      color: \"red\"\n    }\n  ], [filteredSedes]);\n\n  const toggleEstado = async (id, newEstado) => {\n    try {\n      await dbService.updateSede(id, { estado: newEstado });\n      const result = await dbService.getSedes();\n      setSedes(result.data?.data || []);\n    } catch (err) {\n      console.error('Error updating status:', err);\n    }\n  };\n\n  const handleDeleteSede = async (id) => {\n    try {\n      setLoading(true);\n      \n      // Verificar si la sede tiene participantes asociados\n      const participantesResult = await dbService.getParticipantes();\n      if (participantesResult.error) {\n        throw new Error('Error al verificar participantes asociados');\n      }\n\n      const participantesEnSede = (participantesResult.data?.data || []).filter(\n        p => p.id_sede === id || p.sede_id === id || p.sedeId === id\n      );\n      \n      if (participantesEnSede.length > 0) {\n        alert(`No se puede eliminar la sede porque tiene ${participantesEnSede.length} participante(s) asociado(s). Por favor, reasigna o elimina los participantes primero.`);\n        setLoading(false);\n        return;\n      }\n      \n      // Si no hay participantes, proceder con la eliminación\n      const result = await dbService.deleteSede(id);\n      if (result.error) {\n        throw new Error(result.error.message || 'Error al eliminar sede');\n      }\n      \n      // Recargar la lista de sedes\n      await loadSedes();\n      alert('Sede eliminada exitosamente');\n    } catch (err) {\n      console.error('Error eliminando sede:', err);\n      alert(err.message || 'Error al eliminar sede');\n      setLoading(false);\n    }\n  };\n\n\n  if (loading) {\n    return (\n      <DashboardLayout title=\"Sedes\" subtitle=\"Gestión de sedes\" loading={true} loadingText=\"Cargando sedes...\" />\n    );\n  }\n\n  if (error) {\n    return (\n      <DashboardLayout title=\"Sedes\" subtitle=\"Error al cargar datos\" loading={false}>\n        <div className=\"flex items-center justify-center h-screen\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <p className=\"text-red-600\">Error loading sedes: {error}</p>\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Gestión de Sedes\" subtitle=\"Administra las sedes de la fundación\" extraActions={\n      <button\n        onClick={() => crearModal.openModal()}\n        className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n      >\n        <i className=\"fas fa-plus mr-2\"></i>\n        Nueva Sede\n      </button>\n    }>\n\n      {/* Estadísticas Rápidas */}\n      <div className=\"px-6 py-4\">\n        <StatsGrid stats={statsData} columns={3} />\n      </div>\n\n      {/* Grid de Sedes */}\n      <div className=\"px-6 py-4\">\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-800\">Lista de Sedes</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Haz clic en una sede para ver más detalles</p>\n        </div>\n\n        {filteredSedes.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center\">\n            <i className=\"fas fa-building text-gray-300 text-4xl mb-4\"></i>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No se encontraron sedes</h3>\n            <p className=\"text-gray-500\">No hay sedes que coincidan con los filtros aplicados.</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredSedes.map((sede) => (\n              <div\n                key={sede.id}\n                className=\"bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-lg transition-all duration-200 cursor-pointer group\"\n                onClick={() => {\n                  verModal.setData(sede);\n                  verModal.openModal();\n                }}\n              >\n                {/* Card Content */}\n                <div className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                        <i className=\"fas fa-building text-blue-600 text-lg\"></i>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors\">\n                          {sede.nombre}\n                        </h3>\n                        <p className=\"text-sm text-gray-500\">{sede.tipo || 'Principal'}</p>\n                      </div>\n                    </div>\n                    <div onClick={(e) => e.stopPropagation()}>\n                      <StatusToggle\n                        currentStatus={sede.estado}\n                        statuses={[\n                          { value: 'Activa', label: 'Activa', variant: 'success' },\n                          { value: 'Inactiva', label: 'Inactiva', variant: 'danger' }\n                        ]}\n                        onChange={(newEstado) => toggleEstado(sede.id, newEstado)}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start\">\n                      <i className=\"fas fa-map-marker-alt text-gray-400 mt-1 mr-3 flex-shrink-0\"></i>\n                      <p className=\"text-sm text-gray-600 line-clamp-2\">{sede.direccion}</p>\n                    </div>\n\n                    {sede.telefono && (\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-phone text-gray-400 mr-3 flex-shrink-0\"></i>\n                        <p className=\"text-sm text-gray-600\">{sede.telefono}</p>\n                      </div>\n                    )}\n\n                    {sede.capacidad_maxima && (\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-users text-gray-400 mr-3 flex-shrink-0\"></i>\n                        <p className=\"text-sm text-gray-600\">Capacidad: {sede.capacidad_maxima} participantes</p>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-gray-100\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        verModal.setData(sede);\n                        verModal.openModal();\n                      }}\n                      className=\"flex items-center text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors\"\n                    >\n                      <i className=\"fas fa-eye mr-2\"></i>\n                      Ver detalles\n                    </button>\n\n                    <div onClick={(e) => e.stopPropagation()}>\n                      <ActionDropdown\n                        actions={[\n                          {\n                            label: 'Ver detalles',\n                            icon: 'fas fa-eye',\n                            onClick: () => {\n                              verModal.setData(sede);\n                              verModal.openModal();\n                            }\n                          },\n                          {\n                            label: 'Editar',\n                            icon: 'fas fa-edit',\n                            onClick: () => {\n                              editarModal.setData(sede);\n                              editarModal.openModal();\n                            }\n                          },\n                          {\n                            label: 'Eliminar',\n                            icon: 'fas fa-trash',\n                            onClick: async () => {\n                              if (window.confirm('¿Estás seguro de que deseas eliminar esta sede?')) {\n                                await handleDeleteSede(sede.id);\n                              }\n                            },\n                            variant: 'danger'\n                          }\n                        ]}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Modales */}\n      <ViewDetailsModal\n        isOpen={verModal.isOpen}\n        onClose={verModal.closeModal}\n        title=\"Detalles de la Sede\"\n        data={verModal.data ? [\n          { label: 'Nombre', value: verModal.data.nombre },\n          { label: 'Dirección', value: verModal.data.direccion, fullWidth: true },\n          { label: 'Teléfono', value: verModal.data.telefono },\n          { label: 'Capacidad Máxima', value: verModal.data.capacidad_maxima ? `${verModal.data.capacidad_maxima} participantes` : 'No especificada' },\n          { label: 'Estado', value: verModal.data.estado },\n          { label: 'Tipo', value: verModal.data.tipo || 'No especificado' }\n        ] : []}\n      />\n\n      <EditFormModal\n        isOpen={editarModal.isOpen}\n        onClose={editarModal.closeModal}\n        title=\"Editar Sede\"\n        onSubmit={async (formData) => {\n          // Validar capacidad_maxima si está presente\n          if (formData.capacidad_maxima !== undefined && formData.capacidad_maxima !== null && formData.capacidad_maxima !== '') {\n            const capacidad = Number(formData.capacidad_maxima);\n            if (isNaN(capacidad) || capacidad <= 0) {\n              throw new Error('La capacidad máxima debe ser un número positivo');\n            }\n          }\n          \n          const result = await dbService.updateSede(editarModal.data.id, formData);\n          if (result.error) {\n            throw new Error(result.error.message || 'Error al actualizar sede');\n          }\n          await loadSedes();\n        }}\n        initialData={editarModal.data}\n        fields={[\n          { name: 'nombre', label: 'Nombre', type: 'text', required: true },\n          { name: 'telefono', label: 'Teléfono', type: 'tel' },\n          { name: 'direccion', label: 'Dirección', type: 'textarea', required: true, fullWidth: true },\n          { name: 'capacidad_maxima', label: 'Capacidad Máxima', type: 'number', placeholder: 'Número de participantes', min: 1 },\n          { \n            name: 'estado', \n            label: 'Estado', \n            type: 'select',\n            options: [\n              { value: 'Activa', label: 'Activa' },\n              { value: 'Inactiva', label: 'Inactiva' }\n            ]\n          },\n          { \n            name: 'tipo', \n            label: 'Tipo', \n            type: 'select',\n            options: [\n              { value: 'Principal', label: 'Principal' },\n              { value: 'Secundaria', label: 'Secundaria' },\n              { value: 'Temporal', label: 'Temporal' }\n            ]\n          }\n        ]}\n      />\n\n      <CreateFormModal\n        isOpen={crearModal.isOpen}\n        onClose={crearModal.closeModal}\n        title=\"Nueva Sede\"\n        onSubmit={async (formData) => {\n          if (!formData.nombre?.trim() || !formData.direccion?.trim()) {\n            throw new Error('Nombre y dirección son campos obligatorios');\n          }\n          \n          // Validar capacidad_maxima si está presente\n          if (formData.capacidad_maxima !== undefined && formData.capacidad_maxima !== null && formData.capacidad_maxima !== '') {\n            const capacidad = Number(formData.capacidad_maxima);\n            if (isNaN(capacidad) || capacidad <= 0) {\n              throw new Error('La capacidad máxima debe ser un número positivo');\n            }\n          }\n          \n          const result = await dbService.createSede(formData);\n          if (result.error) {\n            throw new Error(result.error.message || 'Error al crear sede');\n          }\n          await loadSedes();\n        }}\n        initialData={{\n          nombre: '',\n          direccion: '',\n          telefono: '',\n          capacidad_maxima: '',\n          estado: 'Activa',\n          tipo: 'Principal'\n        }}\n        fields={[\n          { name: 'nombre', label: 'Nombre', type: 'text', required: true, placeholder: 'Nombre de la sede' },\n          { name: 'telefono', label: 'Teléfono', type: 'tel', placeholder: 'Número de teléfono' },\n          { name: 'direccion', label: 'Dirección', type: 'textarea', required: true, placeholder: 'Dirección completa de la sede', fullWidth: true },\n          { name: 'capacidad_maxima', label: 'Capacidad Máxima', type: 'number', placeholder: 'Número de participantes', min: 1 },\n          { \n            name: 'estado', \n            label: 'Estado', \n            type: 'select',\n            options: [\n              { value: 'Activa', label: 'Activa' },\n              { value: 'Inactiva', label: 'Inactiva' }\n            ]\n          },\n          { \n            name: 'tipo', \n            label: 'Tipo', \n            type: 'select',\n            options: [\n              { value: 'Principal', label: 'Principal' },\n              { value: 'Secundaria', label: 'Secundaria' },\n              { value: 'Temporal', label: 'Temporal' }\n            ]\n          }\n        ]}\n      />\n    </DashboardLayout>\n  );\n};\n\n// Wrap with React.memo to prevent unnecessary re-renders\n// Component will only re-render when props change\nconst Sedes = React.memo(SedesComponent);\n\nexport default Sedes;"],"names":["SedesComponent","sedes","setSedes","useState","loading","setLoading","error","setError","verModal","useModal","editarModal","crearModal","loadSedes","async","_result$data","console","log","result","dbService","getSedes","Error","message","sedesData","Array","isArray","data","length","err","useEffect","filteredSedes","useMemo","statsData","title","value","icon","color","filter","s","estado","_jsx","DashboardLayout","subtitle","loadingText","children","className","_jsxs","extraActions","onClick","openModal","StatsGrid","stats","columns","map","sede","setData","nombre","tipo","e","stopPropagation","StatusToggle","currentStatus","statuses","label","variant","onChange","newEstado","id","_result$data2","updateSede","toggleEstado","direccion","telefono","capacidad_maxima","ActionDropdown","actions","window","confirm","_participantesResult$","participantesResult","getParticipantes","participantesEnSede","p","id_sede","sede_id","sedeId","alert","concat","deleteSede","handleDeleteSede","ViewDetailsModal","isOpen","onClose","closeModal","fullWidth","EditFormModal","onSubmit","undefined","formData","capacidad","Number","isNaN","initialData","fields","name","type","required","placeholder","min","options","CreateFormModal","_formData$nombre","_formData$direccion","trim","createSede","React"],"sourceRoot":""}